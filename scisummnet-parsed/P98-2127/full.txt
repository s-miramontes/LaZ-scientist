1 Introduction. The meaning of an unknown word can often be inferred from its context. Consider the following (slightly modified) example in (Nida, 1975, p.167): Everyone likes tezgiiino. Tezgiiino makes you drunk. We make tezgiiino out of corn. The contexts in which the word tezgiiino is used suggest that tezgiiino may be a kind of alcoholic beverage made from corn mash. Bootstrapping semantics from text is one of the greatest challenges in natural language learning. It has been argued that similarity plays an important role in word acquisition (Gentner, 1982). Identifying similar words is an initial step in learning the definition of a word. This paper presents a method for making this first step. For example, given a corpus that includes the sentences in (1), our goal is to be able to infer that tezgiiino is similar to &quot;beer&quot;, &quot;wine&quot;, &quot;vodka&quot;, etc. In addition to the long-term goal of bootstrapping semantics from text, automatic identification of similar words has many immediate applications. The most obvious one is thesaurus construction. An automatically created thesaurus offers many advantages over manually constructed thesauri. Firstly, the terms can be corpus- or genre-specific. Manually constructed general-purpose dictionaries and thesauri include many usages that are very infrequent in a particular corpus or genre of documents. For example, one of the 8 senses of &quot;company&quot; in WordNet 1.5 is a &quot;visitor/visitant&quot;, which is a hyponym of &quot;person&quot;. This usage of the word is practically never used in newspaper articles. However, its existance may prevent a co-reference recognizer to rule out the possiblity for personal pronouns to refer to &quot;company&quot;. Secondly, certain word usages may be particular to a period of time, which are unlikely to be captured by manually compiled lexicons. For example, among 274 occurrences of the word &quot;westerner&quot; in a 45 million word San Jose Mercury corpus, 55% of them refer to hostages. If one needs to search hostage-related articles, &quot;westerner&quot; may well be a good search term. Another application of automatically extracted similar words is to help solve the problem of data sparseness in statistical natural language processing (Dagan et al., 1994; Essen and Steinbiss, 1992). When the frequency of a word does not warrant reliable maximum likelihood estimation, its probability can be computed as a weighted sum of the probabilities of words that are similar to it. It was shown in (Dagan et al., 1997) that a similarity-based smoothing method achieved much better results than backoff smoothing methods in word sense disambiguation. The remainder of the paper is organized as follows. The next section is concerned with similarities between words based on their distributional patterns. The similarity measure can then be used to create a thesaurus. In Section 3, we evaluate the constructed thesauri by computing the similarity between their entries and entries in manually created thesauri. Section 4 briefly discuss future work in clustering similar words. Finally, Section 5 reviews related work and summarize our contributions.
2 Word Similarity. Our similarity measure is based on a proposal in (Lin, 1997), where the similarity between two objects is defined to be the amount of information contained in the commonality between the objects divided by the amount of information in the descriptions of the objects. We use a broad-coverage parser (Lin, 1993; Lin, 1994) to extract dependency triples from the text corpus. A dependency triple consists of two words and the grammatical relationship between them in the input sentence. For example, the triples extracted from the sentence &quot;I have a brown dog&quot; are: We use the notation 11w, r, w' II to denote the frequency count of the dependency triple (w, r, w') in the parsed corpus. When w, r, or w' is the wild card (*), the frequency counts of all the dependency triples that matches the rest of the pattern are summed up. For example, kook, obj, *11 is the total occurrences of cook—object relationships in the parsed corpus, and 11*,*,*11 is the total number of dependency triples extracted from the parsed corpus. The description of a word w consists of the frequency counts of all the dependency triples that matches the pattern (w, *, *). The commonality between two words consists of the dependency triples that appear in the descriptions of both words. For example, (3) is the the description of the word &quot;cell&quot;. II cell, obj-of, contain11=4 obj-of, decorate11=2 Icell, nmod, bacteriall=3 I cell, nmod, blood vessell1=1 I cell, nmod, body11=2 Icell, nmod, bone marrow 11=2 Icell, nmod, burial 11=1 J cell, nmod, chameleon11=1 Assuming that the frequency counts of the dependency triples are independent of each other, the information contained in the description of a word is the sum of the information contained in each individual frequency count. To measure the information contained in the statement Ilw, r, Il=c, we first measure the amount of information in the statement that a randomly selected dependency triple is (w, r, w') when we do not know the value of 11w, r, will. We then measure the amount of information in the same statement when we do know the value of11w, r, w' II. The difference between these two amounts is taken to be the information contained in 11w, r, w' II =c• An occurrence of a dependency triple (w, r, w') can be regarded as the co-occurrence of three events: A: a randomly selected word is w; B: a randomly selected dependency type is r; C: a randomly selected word is w1. When the value of II w, r, w' II is unknown, we assume that A and C are conditionally independent given B. The probability of A, B and C cooccurring is estimated by where PALE is the maximum likelihood estimation of a probability distribution and II cell, obj -of, bludgeon11=1 lIcell, obj-of, cal111.11 cell, obj-of, come from11=3 When the value of II w, r, w' II is known, we can obtain PALE (A, B, C) directly: Let /(w, r, w') denote the amount information contained in 11w, r, w1 II=c. Its value can be cornIt is worth noting that 1(w,r,w') is equal to the mutual information between w and w' (Hindle, 1990). Let T(W) be the set of pairs (r, w') such that log x 1,r,is positive. We define the similarity sim(wi , w2) between two words w1 and w2 as follows: We parsed a 64-million-word corpus consisting of the Wall Street Journal (24 million words), San Jose Mercury (21 million words) and AP Newswire (19 million words). From the parsed corpus, we extracted 56.5 million dependency triples (8.7 million unique). In the parsed corpus, there are 5469 nouns, 2173 verbs, and 2632 adjectives/adverbs that occurred at least 100 times. We computed the pairwise similarity between all the nouns, all the verbs and all the adjectives/adverbs, using the above similarity measure. For each word, we created a thesaurus entry which contains the top-N1 words that are most similar to it.2 The thesaurus entry for word w has the following format: where pos is a part of speech, we is a word, se=sim(w, ) and se's are ordered in descending order. For example, the top-10 words in the noun, verb, and adjective entries for the word &quot;brief&quot; are shown below: brief (noun): affidavit 0.13, petition 0.05, memorandum 0.05, motion 0.05, lawsuit 0.05, deposition 0.05, slight 0.05, prospectus 0.04, document 0.04 paper 0.04, ... brief (verb): tell 0.09, urge 0.07, ask 0.07, meet 0.06, appoint 0.06, elect 0.05, name 0.05, empower 0.05, summon 0.05, overrule 0.04, ... brief (adjective): lengthy 0.13, short 0.12, recent 0.09, prolonged 0.09, long 0.09, extended 0.09, daylong 0.08, scheduled 0.08, stormy 0.07, planned 0.06, ... Two words are a pair of respective nearest neighbors (RNNs) if each is the other's most similar word. Our program found 543 pairs of RNN nouns, 212 pairs of RNN verbs and 382 pairs of RNN adjectives/adverbs in the automatically created thesaurus. Appendix A lists every 10th of the RNNs. The result looks very strong. Few pairs of RNNs in Appendix A have clearly better alternatives. We also constructed several other thesauri using the same corpus, but with the similarity measures in Figure 1. The measure SirriHindie is the same as the similarity measure proposed in (Hindle, 1990), except that it does not use dependency triples with negative mutual information. The measure simHindi„ is the same as sim H indle except that all types of dependency relationships are used, instead of just subject and object relationships. The measures simeosine, simdice and SiMJacard are versions of similarity measures commonly used in information retrieval (Frakes and Baeza-Yates, 1992). Unlike sim, sim H indle and si -MHindler, they only where S(w) is the set of senses of w in the WordNet, super(c) is the set of (possibly indirect) superclasses of concept c in the WordNet, R(w) is the set of words that belong to a same Roget category as w. make use of the unique dependency triples and ignore their frequency counts.
3 Evaluation. In this section, we present an evaluation of automatically constructed thesauri with two manually compiled thesauri, namely, WordNet1.5 (Miller et al., 1990) and Roget Thesaurus. We first define two word similarity measures that are based on the structures of WordNet and Roget (Figure 2). The similarity measure simwN is based on the proposal in (Lin, 1997). The similarity measure sim --Roget treats all the words in Roget as features. A word w possesses the feature f if f and w belong to a same Roget category. The similarity between two words is then defined as the cosine coefficient of the two feature vectors. With simwN and siMRoget, we transform WordNet and Roget into the same format as the automatically constructed thesauri in the previous section. We now discuss how to measure the similarity between two thesaurus entries. Suppose two thesaurus entries for the same word are as follows: For example, (5) is the entry for &quot;brief (noun)&quot; in our automatically generated thesaurus and (6) and (7) are corresponding entries in WordNet thesaurus and Roget thesaurus. (5) brief (noun): affidavit 0.13, petition 0.05, memorandum 0.05, motion 0.05, lawsuit 0.05, deposition 0.05, slight 0.05, prospectus 0.04, document 0.04 paper 0.04. Our evaluation was conducted with 4294 nouns that occurred at least 100 times in the parsed corpus and are found in both WordNet1.5 and the Roget Thesaurus. Table 1 shows the average similarity between corresponding entries in different thesauri and the standard deviation of the average, which is the standard deviation of the data items divided by the square root of the number of data items. Since the differences among sim SiMJacard cosine, SiMdzce and are very small, we only included the results for sitncosi, in Table 1 for the sake of brevity. It can be seen that sim, Hindle, and cosine are significantly more similar to WordNet than Roget is, but are significantly less similar to Roget than WordNet is. The differences between Hindle and Hindle,. clearly demonstrate that the use of other types of dependencies in addition to subject and object relationships is very beneficial. The performance of sim, Hindle, and cosine are quite close. To determine whether or not the differences are statistically significant, we computed their differences in similarities to WordNet and Roget thesaurus for each individual entry. Table 2 shows the average and standard deviation of the average difference. Since the 95% confidence intervals of all the differences in Table 2 are on the positive side, one can draw the statistical conclusion that simis better than simHzndle, which is better than sinacosine. WordNet average Gra vp sim- Hindle, 0.008021 0.000428 sim-cosine 0.012798 0.000386 Hindle, -cosine 0.004777 0.000561 Roget average Cravg sim-Hindle„ 0.002415 0.000401 sim -cosine 0.013349 0.000375 Hindle, -cosine 0.010933 0.000509
4 Future Work. Reliable extraction of similar words from text corpus opens up many possibilities for future work. For example, one can go a step further by constructing a tree structure among the most similar words so that different senses of a given word can be identified with different subtrees. Let w1, , wr, be a list of words in descending order of their similarity to a given word w. The similarity tree for w is created as follows: among lw, w1, wz-11. For example, Figure 3 shows the similarity tree for the top-40 most similar words to duty. The first number behind a word is the similarity of the word to its parent. The second number is the similarity of the word to the root node of the tree. Inspection of sample outputs shows that this algorithm works well. However, formal evaluation of its accuracy remains to be future work.
5 Related Work and Conclusion. There have been many approaches to automatic detection of similar words from text corpora. Ours is similar to (Grefenstette, 1994; Hindle, 1990; Ruge, 1992) in the use of dependency relationship as the word features, based on which word similarities are computed. Evaluation of automatically generated lexical resources is a difficult problem. In (Hindle, 1990), a small set of sample results are presented. In (Smadja, 1993), automatically extracted collocations are judged by a lexicographer. In (Dagan et al., 1993) and (Pereira et al., 1993), clusters of similar words are evaluated by how well they are able to recover data items that are removed from the input corpus one at a time. In (Alshawi and Carter, 1994), the collocations and their associated scores were evaluated indirectly by their use in parse tree selection. The merits of different measures for association strength are judged by the differences they make in the precision and the recall of the parser outputs. The main contribution of this paper is a new evaluation methodology for automatically constructed thesaurus. While previous methods rely on indirect tasks or subjective judgments, our method allows direct and objective comparison between automatically and manually constructed thesauri. The results show that our automatically created thesaurus is significantly closer to WordNet than Roget Thesaurus is. Our experiments also surpasses previous experiments on automatic thesaurus construction in scale and (possibly) accuracy.
Acknowledgement. This research has also been partially supported by NSERC Research Grant 0GP121338 and by the Institute for Robotics and Intelligent Systems.