Center for Machine Translation Carnegie-Mellon University Pittsburgh, PA 15213. An efficient parsing algorithm for augmented context-free grammars is introduced, and its application to on-line natural language interfaces discussed. The algorithm is a generalized LR parsing algorithm, which precomputes an LR shift-reduce parsing table (possibly with multiple entries) from a given augmented context-free grammar. Unlike the standard LR parsing algorithm, it can handle arbitrary context-free grammars, including ambiguous grammars, while most of the LR efficiency is preserved by introducing the concept of a &quot;graph-structured stack&quot;. The graph-structured stack allows an LR shift-reduce parser to maintain multiple parses without parsing any part of the input twice in the same way. We can also view our parsing algorithm as an extended chart parsing algorithm efficiently guided by LR parsing tables. The algorithm is fast, due to the LR table precomputation. In several experiments with different English grammars and sentences, timings indicate a five- to tenfold speed advantage over Earley's context-free parsing algorithm. The algorithm parses a sentence strictly from left to right on-line, that is, it starts parsing as soon as the user types in the first word of a sentence, without waiting for completion of the sentence. A practical on-line parser based on the algorithm has been implemented in Common Lisp, and running on Symbolics and HP Al workstations. The parser is used in the multi-lingual machine translation project at CMU. Also, a commercial on-line parser for Japanese language is being built by Intelligent Technology Incorporation, based on the technique developed at CMU.
1 INTRODUCTION. Parsing efficiency is crucial when building practical natural language systems on smaller computers such as personal workstations. This is especially the case for interactive systems such as natural language database access, interfaces to expert systems, and interactive machine translation. This paper introduces an efficient on-line parsing algorithm, and focuses on its practical application to natural language interfaces. The algorithm can be viewed as a generalized LR parsing algorithm that can handle arbitrary context-free grammars, including ambiguous grammars. Section 2 describes the algorithm by extending the standard LR parsing algorithm with the idea of a &quot;graph-structured stack&quot;. Section 3 describes how to represent parse trees efficiently, so that all possible parse trees (the parse forest) take at most polynomial space as the ambiguity of a sentence grows exponentially. In section 4, several examples are given. Section 5 presents several empirical results of the algorithm's practical performance, including comparison with Earley's algorithm. In section 6, we discuss how to enhance the algorithm to handle augmented context-free grammars rather than pure context-free grammars. Section 7 describes the concept of on-line parsing, taking advantage of left-to-right operation of our parsing algorithm. The on-line parser parses a sentence strictly from left to right, and starts parsing as soon as the user types in the first word, without waiting for the end of line. Benefits of on-line parsing are then discussed. Finally, several versions of on-line parser have been implemented, and they are mentioned in section 8.
2 THE CONTEXT-FREE PARSING ALGORITHM. The LR parsing algorithms (Aho and Ullman 1972, Aho and Johnson 1974) were developed originally for programming languages. An LR parsing algorithm is a Copyright 1987 by the Association for Computational Linguistics. Permission to copy without fee all or part of this material is granted provided that the copies are not made for direct commercial advantage and the CL reference and this copyright notice are included on the first page. To copy otherwise, or to republish, requires a fee and/or specific permission. 0362-613X/87 /010031-46$ 03.00 shift-reduce parsing algorithm deterministically guided by a parsing table indicating what action should be taken next. The parsing table can be obtained automatically from a context-free phrase structure grammar, using an algorithm first developed by DeRemer (1969, 1971). We do not describe the algorithms here, referring the reader to chapter 6 in Aho and Ullman (1977). We assume that the reader is familiar with the standard LR parsing algorithm (not necessarily with the parsing table construction algorithm). The LR paring algorithm is one of the most efficient parsing algorithms. It is totally deterministic, and no backtracking or search is involved. Unfortunately, we cannot directly adopt the LR parsing technique for natural languages, because it is applicable only to a small subset of context-free grammars called LR grammars, and it is almost certain that any practical natural language grammars are not LR. If a grammar is non-LR, its parsing table will have multiple entries;1 one or more of the action table entries will be multiply defined (Shieber 1983). Figures 2.1 and 2.2 show an example of a non-LR grammar and its parsing table. Grammar symbols starting with &quot;s&quot; represent pre-terminals. Entries &quot;sh n&quot; in the action table (the left part of the table) indicate the action &quot;shift one word from input buffer onto the stack, and go to state n&quot;. Entries &quot;re n&quot; indicate the action &quot;reduce constituents on the stack using rule n&quot;. The entry &quot;acc&quot; stands for the action &quot;accept&quot;, and blank spaces represent &quot;error&quot;. The goto table (the right part of the table) decides to what state the parser should go after a reduce action. These operations shall become clear when we trace the algorithm with example sentences in section 4. The exact definition and operation of the LR parser can be found in Aho and Ullman (1977). We can see that there are two multiple entries in the action table; on the rows of state 11 and 12 at the column labeled &quot;prep&quot;. Roughly speaking, this is the situation where the parser encounters a preposition of a PP right after a NP. If this PP does not modify the NP, then the parser can go ahead to reduce the NP into a higher nonterminal such as PP or VP, using rule 6 or 7, respectively (re& and re7 in the multiple entries). If, on the other hand, the PP does modify the NP, then the parser must wait (sh6) until the PP is completed so it can build a higher NP using rule 5. It has been thought that, for LR parsing, multiple entries are fatal because once a parsing table has multiple entries, deterministic parsing is no longer possible and some kind of non-determinism is necessary. We handle multiple entries with a special technique, named a graphstructured stack. In order to introduce the concept, we first give a simpler form of non-determinism, and make refinements on it. Subsection 2.1 describes a simple and straightforward non-deterministic technique, that is, pseudo-parallelism (breadth-first search), in which the system maintains a number of stacks simultaneously, called the Stack List. A disadvantage of the stack list is then described. The next subsection describes the idea of stack combination, which was introduced in the author's earlier research (Tomita 1984), to make the algorithm much more efficient. With this idea, stacks are represented as trees (or a forest). Finally, a further refinement, the graph-structured stack, is described to make the algorithm even more efficient; efficient enough to run in polynomial time. The simplest idea would be to handle multiple entries non-deterministically. We adopt pseudo-parallelism (breadth-first search), maintaining a list of stacks (the Stack List). The pseudo-parallelism works as follows. A number of processes are operated in parallel. Each process has a stack and behaves basically the same as in standard LR parsing. When a process encounters a multiple entry, the process is split into several processes (one for each entry), by replicating its stack. When a process encounters an error entry, the process is killed, by removing its stack from the stack list. All processes are synchronized; they shift a word at the same time so that they always look at the same word. Thus, if a process encounters a shift action, it waits until all other processes also encounter a (possibly different) shift action. Figure 2.3 shows a snapshot of the stack list right after shifting the word with in the sentence I saw a man on the bed in the apartment with a telescope using the grammar in Figure 2.1 and the parsing table in Figure 2.2. For the sake of convenience, we denote a stack with vertices and edges. The leftmost vertex is the bottom of the stack, and the rightmost vertex is the top of the stack. Vertices represented by a circle are called state vertices, and they represent a state number. Vertices represented by a square are called symbol vertices, and they represent a grammar symbol. Each stack is exactly the same as a stack in the standard LR parsing algorithm. The distance between vertices (length of an edge) does not have any significance, except it may help the reader understand the status of the stacks. In the figures, &quot;p&quot; stands for *prep, and &quot;d&quot; stands for *det throughout this paper. Since the sentence is 14-way ambiguous, the stack has been split into 14 stacks. For example, the sixth stack (05 1 *p 6 NP 11 *p 6) is in the status where I saw a man on the bed has been reduced into S, and the apartment has been reduced into NP. From the LR parsing table, we know that the top of the stack, state 6, is expecting *det or *n and eventually a NP. Thus, after a telescope comes in, a PP with a telescope will be formed, and the PP will modify the NP the apartment, and in the apartment will modify the S I saw a man. We notice that some stacks in the stack list appear to be identical. This is because they have reached the current state in different ways. For example, the sixth and seventh stacks are identical, because I saw a man on the bed has been reduced into S in two different ways. A disadvantage of the stack list method is that there are no interconnections between stacks (processes), and there is no way in which a process can utilize what other processes have done already. The number of stacks in the stack list grows exponentially as ambiguities are encountered.3 For example, these 14 processes in Figure 2.3 will parse the rest of the sentence the telescope 14 I saw a man on the bed in the apartment with a telescope (with the the grammar and the table in Figures 2.1 and 2.2). times in exactly the same way. This can be avoided by using a tree-structured stack, which is described in the following subsection. If two processes are in a common state, that is, if two stacks have a common state number at the rightmost vertex, they will behave in exactly the same manner until the vertex is popped from the stacks by a reduce action. To avoid this redundant operation, these processes are unified into one process by combining their stacks. Whenever two or more processes have a common state number on the top of their stacks, the top vertices are unified, and these stacks are represented as a tree, where the top vertex corresponds to the root of the tree. We call this a tree-structured stack. When the top vertex is popped, the tree-structured stack is split into the original number of stacks. In general, the system maintains a number of tree-structured stacks in parallel, so stacks are represented as a forest. Figure 2.4 shows a snapshot of the tree-structured stack immediately after shifting the word with. In contrast to the previous example, the telescope will be parsed only once. Although the amount of computation is significantly reduced by the stack combination technique, the number of branches of the tree-structured stack (the number of bottoms of the stack) that must be maintained still grows exponentially as ambiguities are encountered. In the next subsection, we describe a further modification in which stacks are represented as a directed acyclic graph, in order to avoid such inefficiency. So far, when a stack is split, a copy of the whole stack is made. However, we do not necessarily have to copy the whole stack: even after different parallel operations on the tree-structured stack, the bottom portion of the stack may remain the same. Only the necessary portion of the stack should therefore be split. When a stack is split, the stack is thus represented as a tree, where the bottom of the stack corresponds to the root of the tree. With the stack combination technique described in the previous subsection, stacks are represented as a directed acyclic graph. Figure 2.5 shows a snapshot of the graph stack. It is easy to show that the algorithm with the graph-structured stack does not parse any part of an input sentence more than once in the same way. This is because, if two processes had parsed a part of a sentence in the same way, they would have been in the same state, and they would have been combined as one process. The graph-structured stack looks very similar to a chart in chart parsing. In fact, one can also view our algorithm as an extended chart parsing algorithm that is guided by LR parsing tables. The major extension is that nodes in the chart contain more information (LR state numbers) than in conventional chart parsing. In this paper, however, we describe the algorithm as a generalized LR parsing algorithm only. So far, we have focussed on how to accept or reject a sentence. In practice, however, the parser must not only accept or reject sentences but also build the syntactic structure(s) of the sentence (parse forest). The next section describes how to represent the parse forest and how to build it with our parsing algorithm.
3 AN EFFICIENT REPRESENTATION OF A PARSE FOREST. Our parsing algorithm is an all-path parsing algorithm; that is, it produces all possible parses in case an input sentence is ambiguous. Such all-path parsing is of ten needed in natural language processing to manage temporarily or absolutely ambiguous input sentences. The ambiguity (the number of parses) of a sentence may grow exponentially as the length of a sentence grows (Church and Patil 1982). Thus, one might notice that, even with an efficient parsing algorithm such as the one we described, the parser would take exponential time because exponential time would be required merely to print out all parse trees (parse forest). We must therefore provide an efficient representation so that the size of the parse forest does not grow exponentially. This section describes two techniques for providing an efficient representation: subtree sharing and local ambiguity packing. It should be mentioned that these two techniques are not completely new ideas, and some existing systems (e.g., Earley's (1970) algorithm) have already adopted these techniques, either implicitly or explicitly. If two or more trees have a common subtree, the subtree should be represented only once. For example, the parse forest for the sentence I saw a man in the park with a telescope should be represented as in Figure 3.1. To implement this, we no longer push grammatical symbols on the stack; instead, we push pointers to a node of the shared forest.4 When the parser &quot;shifts&quot; a word, it creates a leaf node labeled with the word and the pre-terminal, and, instead of the pre-terminal symbol, a pointer to the newly created leaf node is pushed onto the stack. lithe exact same leaf node (i.e., the node labeled with the same word and the same pre-terminal) already exists, a pointer to this existing node is pushed onto the stack, without creating another node. When the parser &quot;reduces&quot; the stack, it pops pointers from the stack, creates a new node whose successive nodes are pointed to by those popped pointers, and pushes a pointer to the newly created node onto the stack. Using this relatively simple procedure, our parsing algorithm can produce the shared forest as its output without any other special book-keeping mechanism, because it never does the same reduce action twice in the same manner. We say that two or more subtrees represent local ambiguity if they have common leaf nodes and their top nodes are labeled with the same non-terminal symbol. That is to say, a fragment of a sentence is locally ambiguous if the fragment can be reduced to a certain non-terminal symbol in two or more ways. If a sentence has many local ambiguities, the total ambiguity would grow exponentially. To avoid this, we use a technique called local ambiguity packing, which works in the following way. The top nodes of subtrees that represent local ambiguity are merged and treated by higher-level structures as if there were only one node. Such a node is called a packed node, and nodes before packing are called subnodes of the packed node. An example of a shared-packed forest is shown in Figure 3.2. Packed nodes are represented by boxes. We have three packed nodes in Figure 3.2; one with three subnodes and two with two subnodes. Local ambiguity packing can be easily implemented with our parsing algorithm as follows. In the graph-structured stack, if two or more symbol vertices have a common state vertex immediately on their left and a common state vertex immediately on their right, they represent local ambiguity. Nodes pointed to by these symbol vertices are to be packed as one node. In Figure 2.5, for example, we see one 5-way local ambiguity and two 2-way local ambiguities. The algorithm is made clear by the example in the following section. Recently, the author (Tomita 1986) suggested a technique to disambiguate a sentence out of the sharedpacked forest representation by asking the user a minimal number of questions in natural language (without showing any tree structures).
4 EXAMPLES. This section presents three examples. The first example, using the sentence I saw a man in the apartment with a telescope, is intended to help the reader understand the algorithm mOre clearly. The second example, with the sentence That information is important is doubtful, is presented to demonstrate that our algorithm is able to handle multi-part-of-speech words without any special mechanism. In the sentence, that is a multi-part-of-speech word, because it could also be a determiner or a pronoun. The third example is provided to show that the algorithm is also able to handle unknown words by considering an unknown word as a special multi-part-of-speech word whose part of speech can be anything. We use an example sentence / * a *, where *s represent unknown words. This subsection gives a trace of the algorithm with the grammar in Figure 2.1, the parsing table in Figure 2.2, and the sentence I saw a man in the park with a telescope. At the very beginning, the stack contains only one vertex labeled 0, and the parse forest contains nothing. By looking at the action table, the next action, &quot;shift 4&quot;, is determined as in standard LR parsing. Computational Linguistics, Volume 13, Numbers 1-2, January-June 1987 35 Masaru Tomita An Efficient Augmented-Context-Free Parsing Algorithm When shifting the word /, the algorithm creates a leaf node in the parse forest labeled with the word / and its preterminal *n, and pushes a pointer to the leaf node onto the stack. The next action, &quot;reduce 3, is determined from the action table. Next Word = 'saw' 0 0 4 9-11F-40 (p.31 0 [6n ' I' ] We reduce the stack basically in the same manner as standard LR parsing. It pops the top vertex &quot;4&quot; and the pointer &quot;0&quot; from the stack, and creates a new node in the parse forest whose successor is the node pointed to by the pointer. The newly created node is labeled with the left-hand side symbol of rule 3, namely &quot;NP&quot;. The pointer to this newly created node, namely &quot;1&quot;, is pushed onto the stack. The action, &quot;shift 7&quot;, is determined as the next action. Now, we have At this point, we encounter a multiple entry, &quot;reduce 7&quot; and &quot;shift 6&quot;, and both actions are to be executed. Reduce actions are always executed first, and shift actions are executed only when there is no remaining reduce action to execute. In this way, the parser works strictly from left to right; it does everything that can be done before shifting the next word. After executing &quot;reduce 7&quot;, the stack and the parse forest look like the following. The top vertex labeled &quot;12&quot; is not popped away, because it still has an action not yet executed. Such a top vertex, or more generally, vertices with one or more actions yet to be executed, are called &quot;active&quot;. Thus, we have two active vertices in the stack above: one labeled &quot;12&quot;, and the other labeled &quot;8&quot;. The action &quot;reduce 1&quot; is determined from the action table, and is associated with the latter vertex. After about 20 steps (see below), the action &quot;accept&quot; is finally executed. It returns &quot;25&quot; as the top node of the parse forest, and halts the process. This subsection gives a trace of the algorithm with the sentence That information is important is doubtful, to demonstrate that our algorithm can handle multi-part-ofspeech words (in this sentence, that) just like multiple entries without any special mechanism. We use the grammar at the right and the parsing table below. At the very beginning, the parse forest contains nothing, and the stack contains only one vertex, labeled 0. The first word of the sentence is that, which can be categorized as *that, *det or *n. The action table tells us that all of these categories are legal. Thus, the algorithm behaves as if a multiple entry is encountered. Three actions, &quot;shift 3&quot;, &quot;shift 4&quot;, and &quot;shift 5&quot;, are to be executed. Note that three different leaf nodes have been created in the parse forest. One of the three possibilities, that as a noun, is discarded immediately after the parser sees the next word information. After executing the two shift actions, we have After executing &quot;shift 10&quot;, we have This time, only one leaf node has been created in the parse forest, because both shift actions regarded the word as belonging to the same category, i.e., noun. Now we have two active vertices, and &quot;reduce 3&quot; is arbitrarily chosen as the next action to execute. After executing The parser accepts the sentence, and returns &quot;15&quot; as the top node of the parse forest. The forest consists of only one tree which is the desired structure for That information is important is doubtful. In the previous subsection, we saw the parsing algorithm handling a multi-part-of-speech word just like multiple entries without any special mechanism. That capability can also be applied to handle unknown words (words whose categories are unknown). An unknown word can be thought of as a special type of a multi-part-of-speech word whose categories can be anything. In the following, we present another trace of the parser with the sentence / * a *, where *s represent an unknown word. We use the same grammar and parsing table as in the first example (Figures 2.1 and 2.2). At the very beginning, we have The possibility of the first unknown word being a preposition has now disappeared. The parser accepts the sentence in only one way, and returns &quot;10&quot; as the root node of the parse forest. We have shown that our parsing algorithm can handle unknown words without any special mechanism.
5 EMPIRICAL RESULTS. In this section, we present some empirical results of the algorithm's practical performance. Since space is limited, we only show the highlights of the results, referring the reader to chapter 6 of Tomita (1985) for more detail. Figure 5.1 shows the relationship between parsing time of the Tomita algorithm and the length of input sentence, and Figure 5.2 shows the comparison with Earley's algorithm (or active chart parsing), using a sample English grammar that consists of 220 context-free rules and 40 sample sentences taken from actual publications. All programs are run on DEC-20 and written in MacLisp, but not compiled. Although the experiment is informal, the result show that the Tomita algorithm is about 5 to 10 times faster than Earley's algorithm, due to the pre-compilation of the grammar into the LR table. The Earley/Tomita ratio seems to increase as the size of grammar grows as shown in Figure 5.3. Figure 5.4 shows the relationship between the size of a produced sharedpacked forest representation (in terms of the number of nodes) and the ambiguity of its input sentence (the number of possible parses). The sample sentences are created from the following schema. noun verb det noun (prep det noun)n-1 An example sentence with this structure is I saw a man in the park on the hill with a telescope. The result shows that all possible parses can be represented in almost 0(log n) space, where n is the number of possible parses in a sentence.5 Figure 5.5 shows the relationship between the parsing time and the ambiguity of a sentence. Recall that within the given time the algorithm produces all possible parses in the shared-packed forest representation. It is concluded that our algorithm can parse (and produce a forest for) a very ambiguous sentence with a million possible parses in a reasonable time.
6 AUGMENTED CONTEXT-FREE GRAMMARS. So far, we have described the algorithm as a pure context-free parsing algorithm. In practice, it is often desired for each grammar nonterminal to have attributes, and for each grammar rule to have an augmentation to define, pass, and test the attribute values. It is also desired to produce a functional structure (in the sense of functional grammar formalism (Kay 1984, Bresnan and Kaplan 1982) rather than the context-free forest. Subsection 6.1 describes the augmentation, and subsection 6.2 discusses the shared-packed representation for functional structures. We attach a Lisp function to each grammar rule for this augmentation. Whenever the parser reduces constituents into a higher-level nonterminal using a phrase structure rule, the Lisp program associated with the rule is evaluated. The Lisp program handles such aspects as construction of a syntax/semantic representation of the input sentence, passing attribute values among constituents at different levels and checking syntactic/semantic constraints such as subject-verb agreement. If the Lisp function returns NIL, the parser does not do the reduce action with the rule. If the Lisp function returns a non-NIL value, then this value is given to the newly created non-terminal. The value includes attributes of the nonterminal and a partial syntactic/semantic representation constructed thus far. Notice that those Lisp functions can be precompiled into machine code by the standard Lisp compiler. A functional structure used in the functional grammar formalisms (Kay 1984, Bresnan and Kaplan 1982, Shieber 1985) is in general a directed acyclic graph (dag) rather than a tree. This is because some value may be shared by two different attributes in the same sentence (e.g., the &quot;agreement&quot; attributes of subject and main verb). Pereira (1985) introduced a method to share dag structures. However, the dag structure sharing method is much more complex and computationally expensive than tree structure sharing. Therefore, we handle only treestructured functional structures for the sake of efficiency and simplicity.6 In the example, the &quot;agreement&quot; attributes of subject and main verb may thus have two different values. The identity of these two values is tested explicitly by a test in the augmentation. Sharing treestructured functional structures requires only a minor modification on the subtree sharing method for the shared-packed forest representation described in subsection 3.1. Local ambiguity packing for augmented context-free grammars is not as easy. Suppose two certain nodes have been packed into one packed node. Although these two nodes have the same category name (e.g., NP), they may have different attribute values. When a certain test in the Lisp function refers to an attribute of the packed node, its value may not be uniquely determined. In this case, the parser can no longer treat the packed node as one node, and the parser will unpack the packed node into two individual nodes again. The question, then, is how often this unpacking needs to take place in practice. The more frequently it takes place, the less significant it is to do local ambiguity packing. However, most of sentence ambiguity comes from such phenomena as PP-attachment and conjunction scoping, and it is unlikely to require unpacking in these cases. For instance, consider the noun phrase: a man in the park with a telescope, which is locally ambiguous (whether telescope modifies man or park). Two NP nodes (one for each interpretation) will be packed into one node, but it is unlikely that the two NP nodes have different attribute values which are referred to later by some tests in the augmentation. The same argument holds with the noun phrases: pregnant women and children large file equipment Although more comprehensive experiments are desired, it is expected that only a few packed nodes need to be unpacked in practical applications. It is in general very painful to create, extend, and modify augmentations written in Lisp. The Lisp functions should be generated automatically from more abstract specifications. We have implemented the LFG compiler that compiles augmentations in a higher level notation into Lisp functions. The notation is similar to the Lexical Functional Grammar (LFG) formalism (Bresnan and Kaplan 1982) and PATR-1I (Shieber 1984). An example of the LFG-like notation and its compiled Lisp function are shown in Figures 6.1 and 6.2. We generate only non-destructive functions with no side-effects to make sure that a process never alters other processes or the parser's control flow. A generated function takes a list of arguments, each of which is a value associated with each right-hand side symbol, and returns a value to be associated with the left-hand side symbol. Each value is a list of f-structures, in case of disjunction and local ambiguity. That a semantic grammar in the LFG-like notation can also be generated automatically from a domain semantics specification and a purely syntactic grammar is discussed further in Tomita and Carbonell (1986). The discussion is, however, beyond the scope of this paper.
7 THE ON-LINE PARSER. Our parsing algorithm parses a sentence strictly from left to right. This characteristics makes on-line parsing possible; i.e., to parse a sentence as the user types it in, without waiting for completion of the sentence. An example session of on-line parsing is presented in Figure 7.1 for the sample sentence I saw a man with a telescope. As in this example, the user often wants to hit the &quot;backspace&quot; key to correct previously input words. In the case in which these words have already been processed by the parser, the parser must be able to &quot;unparse&quot; the words, without parsing the sentence from the beginning all over again. To implement unparsing, the parser needs to store system status each time a word is parsed. Fortunately, this can be nicely done with our parsing algorithm; only pointers to the graph-structured stack and the parse forest need to be stored. It should be noted that our parsing algorithm is not the only algorithm that parses a sentence strictly from left to right; Other left-to-right algorithms include Earley's (1970) algorithm, the active chart parsing algorithm (Winograd 1983), and a breadth-first version of ATN (Woods 1970). Despite the availability of left-to-right algorithms, surprisingly few on-line parsers exist. NLMenu (Tennant et al. 1983) adopted on-line parsing for a menu-based system but not for typed inputs. In the rest of this section, we discuss two benefits of on-line parsing, quicker response time and early error detection. One obvious benefit of on-line parsing is that it reduces the parser's response time significantly. When the user finishes typing a whole sentence, most of the input sentence has been already processed by the parser. Although this does not affect CPU time, it could reduce response time from the user's point of view significantly. On-line parsing is therefore useful in interactive systems in which input sentences are typed in by the user on-line; it is not particularly useful in batch systems in which input sentences are provided in a file. Another benefit of on-line parsing is that it can detect an error almost as soon as the error occurs, and it can warn the user immediately. In this way, on-line parsing could provide better man-machine communication. Further studies on human factors are necessary.
8 CONCLUSION. This paper has introduced an efficient context-free parsing algorithm, and its application to on-line natural language interfaces has been discussed. A pilot on-line parser was first implemented in MacLisp at the Computer Science Department, Carnegie-Mellon University (CMU) as a part of the author's thesis work (Tomita 1985). The empirical results in section 5 are based on this parser. CMU's machine translation project (Carbonell and Tomita 1986) adopts on-line parsing for multiple languages. It can parse unsegmented sentences (with no spaces between words, typical in Japanese). To handle unsegmented sentences, its grammar is written in a character-based manner; all terminal symbols in the grammar are characters rather than words. Thus, morphological rules, as well as syntactic rules, are written in the augmented context-free grammar. The parser takes about 1-3 seconds CPU time per sentence on a Symbolics 3600 with about 800 grammar rules; its response time (real time), however, is less than a second due to on-line parsing. This speed does not seem to be affected very much by the length of sentence or the size of grammar, as discussed in section 5. We expect further improvements for fully segmented sentences (such as English) where words rather then characters are the atomic units. A commercial on-line parser for Japanese language is being developed in Common Lisp jointly by Intelligent Technology Incorporation (ITI) and Carnegie Group Incorporation (CGI), based on the technique developed at CMU. Finally, in the continuous speech recognition project at CMU (Hayes et al. 1986), the on-line parsing algoComputational Linguistics, Volume 13, Numbers 1-2, January-June 1987 45 Masaru Tomita An Efficient Augmented-Context-Free Parsing Algorithm rithm is being extended to handle speech input, to make the speech parsing process efficient and capable of being pipelined with lower level processes such as acoustic/phonetic level recognition (Tomita 1986).
AKNOWLEDGMENTS. I would like to thank Jaime Carbonell, Phil Hayes, James Allen, Herb Simon, Hozumi Tanaka, and Ralph Grishman for their helpful comments on the early version of this paper. Kazuhiro Toyoshima and Hideto Kagamida have implemented the runtime parser and the LR table compiler, respectively, in Common Lisp. Lori Levin, Teruko Watanabe, Peggy Anderson, and Donna Gates have developed Japanese and English grammars in the LFG-like notation. Hiroaki Saito has implemented the algorithm for speech input. Ron Kaplan, Martin Kay, Lauri Karttunen, and Stuart Shieber provided useful comments on the implementation of LFG and dag structure sharing.