1 Introduction. As millions of users contribute rich information to the Internet everyday, an enormous number of product reviews are freely written in blog pages, Web forums and other consumer-generated mediums (CGMs). This vast richness of content becomes increasingly important information source for collecting and tracking customer opinions. Retrieving this information and analyzing this content are impossible tasks if they were to be manually done. However, advances in machine learning and natural language processing present us with a unique opportunity to automate the decoding of consumers’ opinions from online reviews. Previous works on mining opinions can be divided into two directions: sentiment classification and sentiment related information extraction. The former is a task of identifying positive and negative sentiments from a text which can be a passage, a sentence, a phrase and even a word (Somasundaran et al., 2008; Pang et al., 2002; Dave et al., 2003; Kim and Hovy, 2004; Takamura et al., 2005). The latter focuses on extracting the elements composing a sentiment text. The elements include source of opinions who expresses an opinion (Choi et al., 2005); target of opinions which is a receptor of an opinion (Popescu and Etzioni, 2005); opinion expression which delivers an opinion (Wilson et al., 2005b). Some researchers refer this information extraction task as opinion extraction or opinion mining. Comparing with the former one, opinion mining usually produces richer information. In this paper, we define an opinion unit as a triple consisting of a product feature, an expression of opinion, and an emotional attitude(positive or negative). We use this definition as the basis for our opinion mining task. Since a product review may refer more than one product feature and express different opinions on each of them, the relation extraction is an important subtask of opinion mining. Consider the following sentences: and its size(4) [cannot be beat](4). The phrases underlined are the product features, marked with square brackets are opinion expressions. Product features and opinion expressions with identical superscript compose a relation. For the first sentence, an opinion relation exists between “the Canon SD500” and “recommend”, but not between “picture” and “recommend”. The example shows that more than one relation may appear in a sentence, and the correct relations are not simple Cartesian product of opinion expressions and product features. Simple inspection of the data reveals that product features usually contain more than one word, such as “LCD screen”, “image color”, “Canon PowerShot SD500”, and so on. An incomplete product feature will confuse the successive analysis. For example, in passage “Image color is disappointed”, the negative sentiment becomes obscure if only “image” or “color” is picked out. Since a product feature could not be represented by a single word, dependency parsing might not be the best approach here unfortunately, which provides dependency relations only between words. Previous works on relation extraction usually use the head word to represent the whole phrase and extract features from the word level dependency tree. This solution is problematic because the information provided by the phrase itself can not be used by this kind of methods. And, experimental results show that relation extraction task can benefit from dependencies within a phrase. To solve this issue, we introduce the concept of phrase dependency parsing and propose an approach to construct it. Phrase dependency parsing segments an input sentence into “phrases” and links segments with directed arcs. The parsing focuses on the “phrases” and the relations between them, rather than on the single words inside each phrase. Because phrase dependency parsing naturally divides the dependencies into local and global, a novel tree kernel method has also been proposed. The remaining parts of this paper are organized as follows: In Section 2 we discuss our phrase dependency parsing and our approach. In Section 3, experiments are given to show the improvements. In Section 4, we present related work and Section 5 concludes the paper.
2 The Approach. Fig. 1 gives the architecture overview for our approach, which performs the opinion mining task in three main steps: (1) constructing phrase dependency tree from results of chunking and dependency parsing; (2) extracting candidate product features and candidate opinion expressions; (3) extracting relations between product features and opinion expressions. Dependency grammar is a kind of syntactic theories presented by Lucien Tesni`ere(1959). In dependency grammar, structure is determined by the relation between a head and its dependents. In general, the dependent is a modifier or complement; the head plays a more important role in determining the behaviors of the pair. Therefore, criteria of how to establish dependency relations and how to distinguish the head and dependent in such relations is central problem for dependency grammar. Fig. 2(a) shows the dependency representation of an example sentence. The root of the sentence is “enjoyed”. There are seven pairs of dependency relationships, depicted by seven arcs from heads to dependents. Currently, the mainstream of dependency parsing is conducted on lexical elements: relations are built between single words. A major information loss of this word level dependency tree compared with constituent tree is that it doesn’t explicitly provide local structures and syntactic categories (i.e. NP, VP labels) of phrases (Xia and Palmer, 2001). On the other hand, dependency tree provides connections between distant words, which are useful in extracting long distance relations. Therefore, compromising between the two, we extend the dependency tree node with phrases. That implies a noun phrase “Cannon SD500 PowerShot” can be a dependent that modifies a verb phrase head “really enjoy using” with relation type “dobj”. The feasibility behind is that a phrase is a syntactic unit regardless of the length or syntactic category (Santorini and Kroch, 2007), and it is acceptable to substitute a single word by a phrase with same syntactic category in a sentence. Formally, we define the dependency parsing with phrase nodes as phrase dependency parsing. A dependency relationship which is an asymmetric binary relationship holds between two phrases. One is called head, which is the central phrase in the relation. The other phrase is called dependent, which modifies the head. A label representing the relation type is assigned to each dependency relationship, such as subj (subject), obj (object), and so on. Fig.2(c) shows an example of phrase dependency parsing result. By comparing the phrase dependency tree and the word level dependency tree in Fig.2, the former delivers a more succinct tree structure. Local words in same phrase are compacted into a single node. These words provide local syntactic and semantic effects which enrich the phrase they belong to. But they should have limited influences on the global tree topology, especially in applications which emphasis the whole tree structures, such as tree kernels. Pruning away local dependency relations by additional phrase structure information, phrase dependency parsing accelerates following processing of opinion relation extraction. To construct phrase dependency tree, we propose a method which combines results from an existing shallow parser and a lexical dependency parser. A phrase dependency tree is defined as T = (V , E ), where V is the set of phrases, E is the dependency relations among the phrases in V representing by direct edges. To reserve the word level dependencies inside a phrase, we define a nested structure for a phrase Ti in V : Ti = (U, Ei). Vi = {v1, v2, · · · , vm} is the internal words, Ei is the internal dependency relations. We conduct the phrase dependency parsing in this way: traverses word level dependency tree in preorder (visits root node first, then traverses the children recursively). When visits a node R, searches in its children and finds the node set D which are in the same phrase with R according Algorithm 1 Pseudo-Code for constructing the phrase dependency tree INPUT: OUTPUT: phrase dependency tree T = (V , E ) where to the shallow parsing result. Compacts D and R into a single node. Then traverses all the remaining children in the same way. The algorithm is shown in Alg. 1. The output of the algorithm is still a tree, for we only cut edges which are compacted into a phrase, the connectivity is keeped. Note that there will be inevitable disagrees between shallow parser and lexical dependency parser, the algorithm implies that we simply follow the result of the latter one: the phrases from shallow parser will not appear in the final result if they cannot be found in the procedure. Consider the following example: Fig.2 shows the procedure of phrase dependency parsing. Fig.2(a) is the result of the lexical dependency parser. Shallow parsers result is shown in Fig.2(b). Chunk phrases “NP(We)”, “VP(really enjoyed using)” and “NP(the Canon PowerShot SD500)” are nodes in the output phrase dependency tree. When visiting node “enjoyed” in Fig.2(a), the shallow parser tells that “really” and “using” which are children of “enjoy” are in the same phrase with their parent, then the three nodes are packed. The final phrase dependency parsing tree is shown in the Fig. 2(c). In this work, we define that product features are products, product parts, properties of products, properties of parts, company names and related objects. For example,in consumer electronic domain, “Canon PowerShot”, “image quality”,“camera”, “laptop” are all product features. From analyzing the labeled corpus, we observe that more than 98% of product features are in a single phrase, which is either noun phrase (NP) or verb phrase (VP). Based on it, all NPs and VPs are selected as candidate product features. While prepositional phrases (PPs) and adjectival phrases (ADJPs) are excluded. Although it can cover nearly all the true product features, the precision is relatively low. The large amount of noise candidates may confuse the relation extraction classifier. To shrink the size of candidate set, we introduce language model by an intuition that the more likely a phrase to be a product feature, the more closely it related to the product review. In practice, for a certain domain of product reviews, a language model is build on easily acquired unlabeled data. Each candidate NP or VP chunk in the output of shallow parser is scored by the model, and cut off if its score is less than a threshold. Opinion expressions are spans of text that express a comment or attitude of the opinion holder, which are usually evaluative or subjective phrases. We also analyze the labeled corpus for opinion expressions and observe that many opinion expressions are used in multiple domains, which is identical with the conclusion presented by Kobayashi et al. (2007). They collected 5,550 opinion expressions from various sources . The coverage of the dictionary is high in multiple domains. Motivated by those observations, we use a dictionary which contains 8221 opinion expressions to select candidates (Wilson et al., 2005b). An assumption we use to filter candidate opinion expressions is that opinion expressions tend to appear closely with product features, which is also used to extract product features by Hu and Liu (2004). In our experiments, the tree distance between product feature and opinion expression in a relation should be less than 5 in the phrase dependency parsing tree. This section describes our method on extracting relations between opinion expressions and product features using phrase dependency tree. Manually built patterns were used in previous works which have an obvious drawback that those patterns can hardly cover all possible situations. By taking advantage of the kernel methods which can search a feature space much larger than that could be represented by a feature extraction-based approach, we define a new tree kernel over phrase dependency trees and incorporate this kernel within an SVM to extract relations between opinion expressions and product features. The potential relation set consists of the all combinations between candidate product features and candidate opinion expressions in a sentence. Given a phrase dependency parsing tree, we choose the subtree rooted at the lowest common parent(LCP) of opinion expression and product feature to represent the relation. Dependency tree kernels has been proposed by (Culotta and Sorensen, 2004). Their kernel is defined on lexical dependency tree by the convolution of similarities between all possible subtrees. However, if the convolution containing too many irrelevant subtrees, over-fitting may occur and decreases the performance of the classifier. In phrase dependency tree, local words in a same phrase are compacted, therefore it provides a way to treat “local dependencies” and “global dependencies” differently (Fig. 3). As a consequence, these two kinds of dependencies will not disturb each other in measuring similarity. Later experiments prove the validity of this statement. We generalize the definition by (Culotta and Sorensen, 2004) to fit the phrase dependency tree. Use the symbols in Section 2.1.2, 9 i and 9j are two trees with root Ri and Rj, K(9 i, Jj) is the kernel function for them. Firstly, each tree node Tk E 9i is augmented with a set of features F, and an instance of F for Tk is Fk = {fk}. A match function m(Ti, Tj) is defined on comparing a subset of nodes’ features M C_ F. And in the same way, a similarity function s(Ti, Tj) are defined on 5 C F where i 1 if fis = fs C(fs, fl 0 otherwise (3) For the given phrase dependency parsing trees, the kernel function K(9i, 9j) is defined as folKc is the kernel function over Ri and Rj’s children. Denote a is a continuous subsequence of indices a, a + 1, · · · a + l (a) for Ri’s children where l(a) is its length, as is the s-th element in a. And likewise b for Rj. where the constant 0 < A < 1 normalizes the effects of children subsequences’ length. Compared with the definitions in (Culotta and Sorensen, 2004), we add term Kin to handle the internal nodes of a pharse, and make this extension still satisfy the kernel function requirements (composition of kernels is still a kernel (Joachims et al., 2001)). The consideration is that the local words should have limited effects on whole tree structures. So the kernel is defined on external children (Kc) and internal nodes (Kin) separately, annotator extracted 3595 relations, while the other annotator A2 extracted 3745 relations, an A1 d 3217 cases of them matched. In order to measure the annotation quality, we use the following metric to measure the inter-annotator agreement, which is also used by Wiebe et al. (2005). as the result, the local words are not involved in In this section, we describe the annotated corpus and experiment configurations including baseline We conducted experiments with labeled corpus which are selected from Hu and Liu (2004), Jindal and Liu (2008) have built. Their documents are collected from Amazon.com and CNet.com, where products have a large number of reviews. They also manually labeled product features and polarity orientations. Our corpus is selected from them, which contains customer reviews of 11 products belong to 5 categories(Diaper, Cell Phone, Digital Camera, DVD Player, and MP3 Player). Table 1 gives the detail statistics. Since we need to evaluate not only the product features but also the opinion expressions and relations between them, we asked two annotators to annotate them independently. The annotators started from identifying product features. Then for each product feature, they annotated the opinion expression which has relation with it. Finally, one Features for match function where agr(a||b) represents the inter-annotator agreement between annotator a and b, A and B are the sets of anchors annotated by annotators a and b. agr(A1||A2) was 85.9% and agr(A2||A1) was 89.5%. It indicates that the reliability of our annotated corpus is satisfactory. Results of extracting product features and opinion expressions are shown in Table 2. We use precision, recall and F-measure to evaluate performances. The candidate product features are extracted by the method described in Section 2.2, whose result is in the first row. 6760 of 24414 candidate product features remained after the filtering, which means we cut 72% of irrelevant candidates with a cost of 14.5%(1-85.5%) loss in true answers. Similar to the product feature extraction, the precision of extracting opinion expression is relatively low, while the recall is 75.2%. Since both product features and opinion expressions extractions are preprocessing steps, recall is more important. In order to compare with state-of-the-art results, we also evaluated the following methods. Table 5 shows the performances of different relation extraction methods with in-domain data. For each domain, we conducted 5-fold cross validation. Table 6 shows the performances of the extraction methods on cross-domain data. We use the digital camera and cell phone domain as training set. The other domains are used as testing set.
3.3.2 Results Discussion. Table 5 presents different methods’ results in five domains. We observe that the three learning based methods(SVM-1, SVM-WTree, SVM-PTree) perform better than the Adjacent baseline in the first three domains. However, in other domains, directly adjacent method is better than the learning based methods. The main difference between the first three domains and the last two domains is the size of data(Table 1). It implies that the simple Adjacent method is also competent when the training set is small. A further inspection into the result of first 3 domains, we can also conclude that: 1) Tree kernels(SVM-WTree and SVM-PTree) are better than Adjacent, SVM-1 and SVM-2 in all domains. It proofs that the dependency tree is important in the opinion relation extraction. The reason for that is a connection between an opinion and its target can be discovered with various syntactic structures. 2) The kernel defined on phrase dependency tree (SVM-PTree) outperforms kernel defined on word level dependency tree(SVMWTree) by 4.8% in average. We believe the main reason is that phrase dependency tree provides a more succinct tree structure, and the separative treatment of local dependencies and global dependencies in kernel computation can indeed improve the performance of relation extraction. To analysis the results of preprocessing steps’ influences on the following relation extraction, we provide 2 additional experiments which the product features and opinion expressions are all correctly extracted respectively: OERight and PFRight. These two results show that given an exactly extraction of opinion expression and product feature, the results of opinion relation extraction will be much better. Further, opinion expressions are more influential which naturally means the opinion expressions are crucial in opinion relation extraction. For evaluations on cross domain, the Adjacent method doesn’t need training data, its results are the same as the in-domain experiments. Note in Table 3 and Table 4, we don’t use domain related features in SVM-1, SVM-WTree, SVMPTree, but SVM-2’s features are domain dependent. Since the cross-domain training set is larger than the original one in Diaper and DVD domain, the models are trained more sufficiently. The final results on cross-domain are even better than in-domain experiments on SVM-1, SVM-WTree, and SVM-PTree with percentage of 4.6%, 8.6%, 10.3% in average. And the cross-domain training set is smaller than in-domain in MP3, but it also achieve competitive performance with the in-domain. On the other hand, SVM-2’s result decreased compared with the in-domain experiments because the test domain changed. At the same time, SVM-PTree outperforms other methods which is similar in in-domain experiments.
4 Related Work. Opinion mining has recently received considerable attention. Amount of works have been done on sentimental classification in different levels (Zhang et al., 2009; Somasundaran et al., 2008; Pang et al., 2002; Dave et al., 2003; Kim and Hovy, 2004; Takamura et al., 2005). While we focus on extracting product features, opinion expressions and mining relations in this paper. Kobayashi et al. (2007) presented their work on extracting opinion units including: opinion holder, subject, aspect and evaluation. Subject and aspect belong to product features, while evaluation is the opinion expression in our work. They converted the task to two kinds of relation extraction tasks and proposed a machine learning-based method which combines contextual clues and statistical clues. Their experimental results showed that the model using contextual clues improved the performance. However since the contextual information in a domain is specific, the model got by their approach can not easily converted to other domains. Choi et al. (2006) used an integer linear programming approach to jointly extract entities and relations in the context of opinion oriented information extraction. They identified expressions of opinions, sources of opinions and the linking relation that exists between them. The sources of opinions denote to the person or entity that holds the opinion. Another area related to our work is opinion expressions identification (Wilson et al., 2005a; Breck et al., 2007). They worked on identifying the words and phrases that express opinions in text. According to Wiebe et al. (2005), there are two types of opinion expressions, direct subjective expressions and expressive subjective elements.
5 Conclusions. In this paper, we described our work on mining opinions from unstructured documents. We focused on extracting relations between product features and opinion expressions. The novelties of our work included: 1) we defined the phrase dependency parsing and proposed an approach to construct the phrase dependency trees; 2) we proposed a new tree kernel function to model the phrase dependency trees. Experimental results show that our approach improved the performances of the mining task.
6 Acknowledgement. This work was (partially) funded by Chinese NSF 60673038, Doctoral Fund of Ministry of Education of China 200802460066, and Shanghai Science and Technology Development Funds 08511500302. The authors would like to thank the reviewers for their useful comments.