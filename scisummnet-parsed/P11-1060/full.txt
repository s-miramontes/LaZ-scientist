1 Introduction. What is the total population of the ten largest capitals in the US? Answering these types of complex questions compositionally involves first mapping the questions into logical forms (semantic parsing). Supervised semantic parsers (Zelle and Mooney, 1996; Tang and Mooney, 2001; Ge and Mooney, 2005; Zettlemoyer and Collins, 2005; Kate and Mooney, 2007; Zettlemoyer and Collins, 2007; Wong and Mooney, 2007; Kwiatkowski et al., 2010) rely on manual annotation of logical forms, which is expensive. On the other hand, existing unsupervised semantic parsers (Poon and Domingos, 2009) do not handle deeper linguistic phenomena such as quantification, negation, and superlatives. As in Clarke et al. (2010), we obviate the need for annotated logical forms by considering the endto-end problem of mapping questions to answers. However, we still model the logical form (now as a latent variable) to capture the complexities of language. Figure 1 shows our probabilistic model: with respect to a world w (database of facts), producing an answer y. We represent logical forms z as labeled trees, induced automatically from (x, y) pairs. We want to induce latent logical forms z (and parameters 0) given only question-answer pairs (x, y), which is much cheaper to obtain than (x, z) pairs. The core problem that arises in this setting is program induction: finding a logical form z (over an exponentially large space of possibilities) that produces the target answer y. Unlike standard semantic parsing, our end goal is only to generate the correct y, so we are free to choose the representation for z. Which one should we use? The dominant paradigm in compositional semantics is Montague semantics, which constructs lambda calculus forms in a bottom-up manner. CCG is one instantiation (Steedman, 2000), which is used by many semantic parsers, e.g., Zettlemoyer and Collins (2005). However, the logical forms there can become quite complex, and in the context of program induction, this would lead to an unwieldy search space. At the same time, representations such as FunQL (Kate et al., 2005), which was used in Clarke et al. (2010), are simpler but lack the full expressive power of lambda calculus. The main technical contribution of this work is a new semantic representation, dependency-based compositional semantics (DCS), which is both simple and expressive (Section 2). The logical forms in this framework are trees, which is desirable for two reasons: (i) they parallel syntactic dependency trees, which facilitates parsing and learning; and (ii) evaluating them to obtain the answer is computationally efficient. We trained our model using an EM-like algorithm (Section 3) on two benchmarks, GEO and JOBS (Section 4). Our system outperforms all existing systems despite using no annotated logical forms.
2 Semantic Representation. We first present a basic version (Section 2.1) of dependency-based compositional semantics (DCS), which captures the core idea of using trees to represent formal semantics. We then introduce the full version (Section 2.2), which handles linguistic phenomena such as quantification, where syntactic and semantic scope diverge. We start with some definitions, using US geography as an example domain. Let V be the set of all values, which includes primitives (e.g., 3, CA ∈ V) as well as sets and tuples formed from other values (e.g., 3, {3, 4, 7}, (CA, {5}) ∈ V). Let P be a set of predicates (e.g., state, count ∈ P), which are just symbols. A world w is mapping from each predicate p ∈ P to a set of tuples; for example, w(state) = {(CA), (OR),... }. Conceptually, a world is a relational database where each predicate is a relation (possibly infinite). Define a special predicate ø with w(ø) = V. We represent functions by a set of inputoutput pairs, e.g., w(count) = {(S, n) : n = |S|}. As another example, w(average) = {(S, ¯x) : We write a DCS tree z as hp; r1 : c1; ... ; rm : cmi. Figure 2(a) shows an example of a DCS tree. Although a DCS tree is a logical form, note that it looks like a syntactic dependency tree with predicates in place of words. It is this transparency between syntax and semantics provided by DCS which leads to a simple and streamlined compositional semantics suitable for program induction. The basic version of DCS restricts R to join and aggregate relations (see Table 1). Let us start by considering a DCS tree z with only join relations. Such a z defines a constraint satisfaction problem (CSP) with nodes as variables. The CSP has two types of constraints: (i) x ∈ w(p) for each node x labeled with predicate p ∈ P; and (ii) xj = yj0 (the j-th component of x must equal the j'-th component of y) for each edge (x, y) labeled with j0j ∈ R. A solution to the CSP is an assignment of nodes to values that satisfies all the constraints. We say a value v is consistent for a node x if there exists a solution that assigns v to x. The denotation JzKw (z evaluated on w) is the set of consistent values of the root node (see Figure 2 for an example). Computation We can compute the denotation JzKw of a DCS tree z by exploiting dynamic programming on trees (Dechter, 2003). The recurrence is as follows: At each node, we compute the set of tuples v consistent with the predicate at that node (v ∈ w(p)), and S(x)}, where a set of pairs S is treated as a set-valued function S(x) = {y : (x, y) ∈ S} with domain S1 = {x : (x, y) ∈ S}. The logical forms in DCS are called DCS trees, where nodes are labeled with predicates, and edges are labeled with relations. Formally: Definition 1 (DCS trees) Let Z be the set of DCS trees, where each z ∈ Z consists of (i) a predicate for each child i, the ji-th component of v must equal the j'i-th component of some t in the child’s denotation (t ∈ JciKw). This algorithm is linear in the number of nodes times the size of the denotations.1 Now the dual importance of trees in DCS is clear: We have seen that trees parallel syntactic dependency structure, which will facilitate parsing. In addition, trees enable efficient computation, thereby establishing a new connection between dependency syntax and efficient semantic evaluation. Aggregate relation DCS trees that only use join relations can represent arbitrarily complex compositional structures, but they cannot capture higherorder phenomena in language. For example, consider the phrase number of major cities, and suppose that number corresponds to the count predicate. It is impossible to represent the semantics of this phrase with just a CSP, so we introduce a new aggregate relation, notated E. Consider a tree hE:ci, whose root is connected to a child c via E. If the denotation of c is a set of values s, the parent’s denotation is then a singleton set containing s. Formally: Figure 3(a) shows the DCS tree for our running example. The denotation of the middle node is {s}, where s is all major cities. Having instantiated s as a value, everything above this node is an ordinary CSP: s constrains the count node, which in turns constrains the root node to |s|. A DCS tree that contains only join and aggregate relations can be viewed as a collection of treestructured CSPs connected via aggregate relations. The tree structure still enables us to compute denotations efficiently based on (1) and (2). The basic version of DCS described thus far handles a core subset of language. But consider Figure 4: (a) is headed by borders, but states needs to be extracted; in (b), the quantifier no is syntactically dominated by the head verb borders but needs to take wider scope. We now present the full version of DCS which handles this type of divergence between syntactic and semantic scope. The key idea that allows us to give semanticallyscoped denotations to syntactically-scoped trees is as follows: We mark a node low in the tree with a mark relation (one of E, Q, or C). Then higher up in the tree, we invoke it with an execute relation Xi to create the desired semantic scope.2 This mark-execute construct acts non-locally, so to maintain compositionality, we must augment the denotation d = JzKw to include any information about the marked nodes in z that can be accessed by an execute relation later on. In the basic version, d was simply the consistent assignments to the root. Now d contains the consistent joint assignments to the active nodes (which include the root and all marked nodes), as well as information stored about each marked node. Think of d as consisting of n columns, one for each active node according to a pre-order traversal of z. Column 1 always corresponds to the root node. Formally, a denotation is defined as follows (see Figure 5 for an example): Definition 2 (Denotations) Let D be the set of denotations, where each d E D consists of where each store a contains a mark relation a.r E {E, Q, C, 0}, a base denotation a.b E D U{0}, and a child denotation a.c E D U{0}. We write d as ((A; (ri, bi, ci); ... ; (rn, bn, cn))). We use d{ri = x} to mean d with d.ri = d.ai.r = x (similar definitions apply for d{ai = x}, d{bi = x}, and d{ci = x}). The denotation of a DCS tree can now be defined recursively: The base case is defined in (3): if z is a single node with predicate p, then the denotation of z has one column with the tuples w(p) and an empty store. The other six cases handle different edge relations. These definitions depend on several operations (mj,j0, E, Xi, M) which we will define shortly, but let us first get some intuition. Let z be a DCS tree. If the last child c of z’s root is a join (jj0), aggregate (E), or execute (Xi) relation ((4)–(6)), then we simply recurse on z with c removed and join it with some transformation (identity, E, or Xi) of c’s denotation. If the last (or first) child is connected via a mark relation E, C (or Q), then we strip off that child and put the appropriate information in the store by invoking M. We now define the operations mj,j0, E, Xi, M. Some helpful notation: For a sequence v = (v1,... , vn) and indices i = (i1, ... , ik), let vi = (vi1, ... , vik) be the projection of v onto i; we write v−i to mean v�1 i. Extending this notation to denotations, let (hA; αii[i] = hh{ai : a ∈ A}; αiii. Let d[−ø] = d[−i], where i are the columns with empty stores. For example, for d in Figure 5, d[1] keeps column 1, d[−ø] keeps column 2, and d[2, −2] swaps the two columns. Join The join of two denotations d and d' with respect to components j and j' (∗ means all components) is formed by concatenating all arrays a of d with all compatible arrays a' of d', where compatibility means a1j = a'1j0. The stores are also concatenated (α + α'). Non-initial columns with empty stores are projected away by applying ·[1,−ø]. The full definition of join is as follows: Aggregate The aggregate operation takes a denotation and forms a set out of the tuples in the first column for each setting of the rest of the columns: Now we turn to the mark (M) and execute (Xi) operations, which handles the divergence between syntactic and semantic scope. In some sense, this is the technical core of DCS. Marking is simple: When a node (e.g., size in Figure 5) is marked (e.g., with relation C), we simply put the relation r, current denotation d and child c’s denotation into the store of column 1: The execute operation Xi(d) processes columns i in reverse order. It suffices to define Xi(d) for a single column i. There are three cases: Extraction (d.ri = E) In the basic version, the denotation of a tree was always the set of consistent values of the root node. Extraction allows us to return the set of consistent values of a marked non-root node. Formally, extraction simply moves the i-th column to the front: Xi(d) = d[i, −(i, ø)]{α1 = ø}. For example, in Figure 4(a), before execution, the denotation of the DCS tree is hh{[(CA, OR), (OR)],... }; ø; (E, Qhstatei�w, ø)ii; after applying X1, we have hh{[(OR)], ... }; øii. Generalized Quantification (d.ri = Q) Generalized quantifiers are predicates on two sets, a restrictor A and a nuclear scope B. For example, In a DCS tree, the quantifier appears as the child of a Q relation, and the restrictor is the parent (see Figure 4(b) for an example). This information is retrieved from the store when the quantifier in column i is executed. In particu- using the exact same machinery as superlatives. Figlar, the restrictor is A = E (d.bi) and the nu- ure 4(g) shows that we can naturally account for clear scope is B = E (d[i, −(i, 0)]). We then superlative ambiguity based on where the scopeapply d.ci to these two sets (technically, denota- determining execute relation is placed. tions) and project away the first column: Xi(d) = 3 Semantic Parsing ((d.ci ./1,1 A) ./2,1 B) [−1]. We now turn to the task of mapping natural language For the example in Figure 4(b), the de- utterances to DCS trees. Our first question is: given notation of the DCS tree before execution is an utterance x, what trees z ∈ Z are permissible? To California cities), and it also allows us to underspecify L. In particular, our L will not include verbs or prepositions; rather, we rely on the predicates corresponding to those words to be triggered by traces. The augmentation function A takes a set of trees and optionally attaches E and Xi relations to the root (e.g., A(hcityi) = {hcityi , hcity; E:øi}). The filtering function F rules out improperly-typed trees such as hcity; 00:hstateii. To further reduce the search space, F imposes a few additional constraints, e.g., limiting the number of marked nodes to 2 and only allowing trace predicates between arity 1 predicates. Model We now present our discriminative semantic parsing model, which places a log-linear distribution over z ∈ ZL(x) given an utterance x. Formally, pθ(z  |x) ∝ eφ(x,z)Tθ, where θ and φ(x, z) are parameter and feature vectors, respectively. As a running example, consider x = city that is in California and z = hcity; 11:hloc; 21:hCAiii, where city triggers city and California triggers CA. To define the features, we technically need to augment each tree z ∈ ZL(x) with alignment information—namely, for each predicate in z, the span in x (if any) that triggered it. This extra information is already generated from the recursive definition in (13). The feature vector φ(x, z) is defined by sums of five simple indicator feature templates: (F1) a word triggers a predicate (e.g., [city, city]); (F2) a word is under a relation (e.g., [that, 11]); (F3) a word is under a trace predicate (e.g., [in, loc]); (F4) two predicates are linked via a relation in the left or right direction (e.g., [city,11, loc, RIGHT]); and (F5) a predicate has a child relation (e.g., [city, 11]). Learning Given a training dataset D containing (x, y) pairs, we define the regularized marginal log-likelihood objective O(θ) = E(x,y)ED log pθ(JzKw = y  |x, z ∈ ZL(x)) − λkθk22, which sums over all DCS trees z that evaluate to the target answer y. Our model is arc-factored, so we can sum over all DCS trees in ZL(x) using dynamic programming. However, in order to learn, we need to sum over {z ∈ ZL(x) : JzKw = y}, and unfortunately, the additional constraint JzKw = y does not factorize. We therefore resort to beam search. Specifically, we truncate each Ci,j to a maximum of K candidates sorted by decreasing score based on parameters θ. Let ˜ZL,θ(x) be this approximation of ZL(x). Our learning algorithm alternates between (i) using the current parameters θ to generate the K-best set ˜ZL,θ(x) for each training example x, and (ii) optimizing the parameters to put probability mass on the correct trees in these sets; sets containing no correct answers are skipped. Formally, let ˜O(θ, θ') be the objective function O(θ) with ZL(x) ˜ZL,θI(x). We optimize ˜O(θ,θ') by setting θ(0) = 0~ and iteratively solving θ(t+1) = argmaxθ ˜O(θ, θ(t)) using L-BFGS until t = T. In all experiments, we set λ = 0.01, T = 5, and K = 100. After training, given a new utterance x, our system outputs the most likely y, summing out the latent logical form z: argmaxy pθ(T)(y  |x, z ∈ ˜ZL,θ(T)).
4 Experiments. We tested our system on two standard datasets, GEO and JOBS. In each dataset, each sentence x is annotated with a Prolog logical form, which we use only to evaluate and get an answer y. This evaluation is done with respect to a world w. Recall that a world w maps each predicate p ∈ P to a set of tuples w(p). There are three types of predicates in P: generic (e.g., argmax), data (e.g., city), and value (e.g., CA). GEO has 48 non-value predicates and JOBS has 26. For GEO, w is the standard US geography database that comes with the dataset. For JOBS, if we use the standard Jobs database, close to half the y’s are empty, which makes it uninteresting. We therefore generated a random Jobs database instead as follows: we created 100 job IDs. For each data predicate p (e.g., language), we add each possible tuple (e.g., (job37, Java)) to w(p) independently with probability 0.8. We used the same training-test splits as Zettlemoyer and Collins (2005) (600+280 for GEO and 500+140 for JOBS). During development, we further held out a random 30% of the training sets for validation. Our lexical triggers L include the following: (i) predicates for a small set of ≈ 20 function words (e.g., (most, argmax)), (ii) (x, x) for each value predicate x in w (e.g., (Boston, Boston)), and (iii) predicates for each POS tag in {JJ, NN, NNS} (e.g., (JJ, size), (JJ, area), etc. ).3 Predicates corresponding to verbs and prepositions (e.g., traverse) are not included as overt lexical triggers, but rather in the trace predicates L(E). We also define an augmented lexicon L+ which includes a prototype word x for each predicate appearing in (iii) above (e.g., (large, size)), which cancels the predicates triggered by x’s POS tag. For GEO, there are 22 prototype words; for JOBS, there are 5. Specifying these triggers requires minimal domain-specific supervision. Results We first compare our system with Clarke et al. (2010) (henceforth, SEMRESP), which also learns a semantic parser from question-answer pairs. Table 2 shows that our system using lexical triggers L (henceforth, DCS) outperforms SEMRESP (78.9% over 73.2%). In fact, although neither DCS nor SEMRESP uses logical forms, DCS uses even less supervision than SEMRESP. SEMRESP requires a lexicon of 1.42 words per non-value predicate, WordNet features, and syntactic parse trees; DCS requires only words for the domain-independent predicates (overall, around 0.5 words per non-value predicate), POS tags, and very simple indicator features. In fact, DCS performs comparably to even the version of SEMRESP trained using logical forms. If we add prototype triggers (use L+), the resulting system (DCS+) outperforms both versions of SEMRESP by a significant margin (87.2% over 73.2% and 80.4%). Next, we compared our systems (DCS and DCS+) with the state-of-the-art semantic parsers on the full dataset for both GEO and JOBS (see Table 3). All other systems require logical forms as training data, whereas ours does not. Table 3 shows that even DCS, which does not use prototypes, is comparable to the best previous system (Kwiatkowski et al., 2010), and by adding a few prototypes, DCS+ offers a decisive edge (91.1% over 88.9% on GEO). Rather than using lexical triggers, several of the other systems use IBM word alignment models to produce an initial word-predicate mapping. This option is not available to us since we do not have annotated logical forms, so we must instead rely on lexical triggers to define the search space. Note that having lexical triggers is a much weaker requirement than having a CCG lexicon, and far easier to obtain than logical forms. Intuitions How is our system learning? Initially, the weights are zero, so the beam search is essentially unguided. We find that only for a small fraction of training examples do the K-best sets contain any trees yielding the correct answer (29% for DCS on GEO). However, training on just these examples is enough to improve the parameters, and this 29% increases to 66% and then to 95% over the next few iterations. This bootstrapping behavior occurs naturally: The “easy” examples are processed first, where easy is defined by the ability of the current model to generate the correct answer using any tree. with scope variation. Think of DCS as a higher-level Our system learns lexical associations between programming language tailored to natural language, words and predicates. For example, area (by virtue which results in programs (DCS trees) which are of being a noun) triggers many predicates: city, much simpler than the logically-equivalent lambda state, area, etc. Inspecting the final parameters calculus formulae. (DCS on GEO), we find that the feature [area, area] The idea of using CSPs to represent semantics is has a much higher weight than [area, city]. Trace inspired by Discourse Representation Theory (DRT) predicates can be inserted anywhere, but the fea- (Kamp and Reyle, 1993; Kamp et al., 2005), where tures favor some insertions depending on the words variables are discourse referents. The restriction to present (for example, [in, loc] has high weight). trees is similar to economical DRT (Bos, 2009). The errors that the system makes stem from mul- The other major focus of this work is program tiple sources, including errors in the POS tags (e.g., induction—inferring logical forms from their denostates is sometimes tagged as a verb, which triggers tations. There has been a fair amount of past work on no predicates), confusion of Washington state with this topic: Liang et al. (2010) induces combinatory Washington D.C., learning the wrong lexical asso- logic programs in a non-linguistic setting. Eisenciations due to data sparsity, and having an insuffi- stein et al. (2009) induces conjunctive formulae and ciently large K. uses them as features in another learning problem. 5 Discussion Piantadosi et al. (2008) induces first-order formuA major focus of this work is on our semantic rep- lae using CCG in a small domain assuming observed resentation, DCS, which offers a new perspective lexical semantics. The closest work to ours is Clarke on compositional semantics. To contrast, consider et al. (2010), which we discussed earlier. CCG (Steedman, 2000), in which semantic pars- The integration of natural language with denotaing is driven from the lexicon. The lexicon en- tions computed against a world (grounding) is becodes information about how each word can used in coming increasingly popular. Feedback from the context; for example, the lexical entry for borders world has been used to guide both syntactic parsing is S\NP/NP : Ay.Ax.border(x, y), which means (Schuler, 2003) and semantic parsing (Popescu et borders looks right for the first argument and left al., 2003; Clarke et al., 2010). Past work has also fofor the second. These rules are often too stringent, cused on aligning text to a world (Liang et al., 2009), and for complex utterances, especially in free word- using text in reinforcement learning (Branavan et al., order languages, either disharmonic combinators are 2009; Branavan et al., 2010), and many others. Our employed (Zettlemoyer and Collins, 2007) or words work pushes the grounded language agenda towards are given multiple lexical entries (Kwiatkowski et deeper representations of language—think grounded al., 2010). compositional semantics. In DCS, we start with lexical triggers, which are 6 Conclusion more basic than CCG lexical entries. A trigger for We built a system that interprets natural language borders specifies only that border can be used, but utterances much more accurately than existing sysnot how. The combination rules are encoded in the tems, despite using no annotated logical forms. Our features as soft preferences. This yields a more system is based on a new semantic representation, factorized and flexible representation that is easier DCS, which offers a simple and expressive alterto search through and parametrize using features. native to lambda calculus. Free from the burden It also allows us to easily add new lexical triggers of annotating logical forms, we hope to use our without becoming mired in the semantic formalism. techniques in developing even more accurate and Quantifiers and superlatives significantly compli- broader-coverage language understanding systems. cate scoping in lambda calculus, and often type rais- Acknowledgments We thank Luke Zettlemoyer ing needs to be employed. In DCS, the mark-execute and Tom Kwiatkowski for providing us with data construct provides a flexible framework for dealing and answering questions. 598