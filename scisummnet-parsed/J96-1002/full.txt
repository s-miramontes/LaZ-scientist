Renaissance Technologies. The concept of maximum entropy can be traced back along multiple threads to Biblical times. Only recently, however, have computers become powerful enough to permit the widescale application of this concept to real world problems in statistical estimation and pattern recognition. In this paper, we describe a method for statistical modeling based on maximum entropy. We present a maximum-likelihood approach for automatically constructing maximum entropy models and describe how to implement this approach efficiently, using as examples several problems in natural language processing.
1.. Statistical modeling addresses the problem of constructing a stochastic model to predict the behavior of a random process. In constructing this model, we typically have at our disposal a sample of output from the process. Given this sample, which represents an incomplete state of knowledge about the process, the modeling problem is to parlay this knowledge into a representation of the process. We can then use this representation to make predictions about the future behavior about the process. Baseball managers (who rank among the better paid statistical modelers) employ batting averages, compiled from a history of at-bats, to gauge the likelihood that a player will succeed in his next appearance at the plate. Thus informed, they manipulate their lineups accordingly. Wall Street speculators (who rank among the best paid statistical modelers) build models based on past stock price movements to predict tomorrow's fluctuations and alter their portfolios to capitalize on the predicted future. At the other end of the pay scale reside natural language researchers, who design language and acoustic models for use in speech recognition systems and related applications. The past few decades have witnessed significant progress toward increasing the predictive capacity of statistical models of natural language. In language modeling, for instance, Bahl et al. (1989) have used decision tree models and Della Pietra et al. (1994) have used automatically inferred link grammars to model long range correlations in language. In parsing, Black et al. (1992) have described how to extract grammatical rules from annotated text automatically and incorporate these rules into statistical models of grammar. In speech recognition, Lucassen and Mercer (1984) have introduced a technique for automatically discovering relevant features for the translation of word spelling to word pronunciation. These efforts, while varied in specifics, all confront two essential tasks of statistical modeling. The first task is to determine a set of statistics that captures the behavior of a random process. Given a set of statistics, the second task is to corral these facts into an accurate model of the process—a model capable of predicting the future output of the process. The first task is one of feature selection; the second is one of model selection. In the following pages we present a unified approach to these two tasks based on the maximum entropy philosophy. In Section 2 we give an overview of the maximum entropy philosophy and work through a motivating example. In Section 3 we describe the mathematical structure of maximum entropy models and give an efficient algorithm for estimating the parameters of such models. In Section 4 we discuss feature selection, and present an automatic method for discovering facts about a process from a sample of output from the process. We then present a series of refinements to the method to make it practical to implement. Finally, in Section 5 we describe the application of maximum entropy ideas to several tasks in stochastic language processing: bilingual sense disambiguation, word reordering, and sentence segmentation.
2.. We introduce the concept of maximum entropy through a simple example. Suppose we wish to model an expert translator's decisions concerning the proper French rendering of the English word in. Our model p of the expert's decisions assigns to each French word or phrase f an estimate, p(f ), of the probability that the expert would choose f as a translation of in. To guide us in developing p, we collect a large sample of instances of the expert's decisions. Our goal is to extract a set of facts about the decision-making process from the sample (the first task of modeling) that will aid us in constructing a model of this process (the second task). One obvious clue we might glean from the sample is the list of allowed translations. For example, we might discover that the expert translator always chooses among the following five French phrases: {dans, en, a, au cours de, pendant}. With this information in hand, we can impose our first constraint on our model p: This equation represents our first statistic of the process; we can now proceed to search for a suitable model that obeys this equation. Of course, there are an infinite number of models p for which this identity holds. One model satisfying the above equation is p(dans) = 1; in other words, the model always predicts dans. Another model obeying this constraint predicts pendant with a probability of 1/2, and a with a probability of 1/2. But both of these models offend our sensibilities: knowing only that the expert always chose from among these five French phrases, how can we justify either of these probability distributions? Each seems to be making rather bold assumptions, with no empirical justification. Put another way, these two models assume more than we actually know about the expert's decision-making process. All we know is that the expert chose exclusively from among these five French phrases; given this, the most intuitively appealing model is the following: This model, which allocates the total probability evenly among the five possible phrases, is the most uniform model subject to our knowledge. It is not, however, the most uniform overall; that model would grant an equal probability to every possible French phrase. We might hope to glean more clues about the expert's decisions from our sample. Suppose we notice that the expert chose either dims or en 30% of the time. We could apply this knowledge to update our model of the translation process by requiring that p satisfy two constraints: Once again there are many probability distributions consistent with these two constraints. In the absence of any other knowledge, a reasonable choice for p is again the most uniform—that is, the distribution which allocates its probability as evenly as possible, subject to the constraints: Say we inspect the data once more, and this time notice another interesting fact: in half the cases, the expert chose either dans or a. We can incorporate this information into our model as a third constraint: We can once again look for the most uniform p satisfying these constraints, but now the choice is not as obvious. As we have added complexity, we have encountered two difficulties at once. First, what exactly is meant by &quot;uniform,&quot; and how can we measure the uniformity of a model? Second, having determined a suitable answer to these questions, how do we go about finding the most uniform model subject to a set of constraints like those we have described? The maximum entropy method answers both of these questions, as we will demonstrate in the next few pages. Intuitively, the principle is simple: model all that is known and assume nothing about that which is unknown. In other words, given a collection of facts, choose a model consistent with all the facts, but otherwise as uniform as possible. This is precisely the approach we took in selecting our model p at each step in the above example. The maximum entropy concept has a long history. Adopting the least complex hypothesis possible is embodied in Occam's razor (&quot;Nunquam ponenda est pluralitas sine necesitate.&quot;) and even appears earlier, in the Bible and the writings of Herotodus (Jaynes 1990). Laplace might justly be considered the father of maximum entropy, having enunciated the underlying theme 200 years ago in his &quot;Principle of Insufficient Reason:&quot; when one has no information to distinguish between the probability of two events, the best strategy is to consider them equally likely (Guiasu and Shenitzer 1985). As E. T. Jaynes, a more recent pioneer of maximum entropy, put it (Jaynes 1990): ... the fact that a certain probability distribution maximizes entropy subject to certain constraints representing our incomplete information, is the fundamental property which justifies use of that distribution for inference; it agrees with everything that is known, but carefully avoids assuming anything that is not known. It is a transcription into mathematics of an ancient principle of wisdom ...
3.. We consider a random process that produces an output value y, a member of a finite set Y. For the translation example just considered, the process generates a translation of the word in, and the output y can be any word in the set {dans, en, a, au cours de, pendant}. In generating y, the process may be influenced by some contextual information x, a member of a finite set X. In the present example, this information could include the words in the English sentence surrounding in. Our task is to construct a stochastic model that accurately represents the behavior of the random process. Such a model is a method of estimating the conditional probability that, given a context x, the process will output y. We will denote by p(yjx) the probability that the model assigns to y in context x. With a slight abuse of notation, we will also use p(y1x) to denote the entire conditional probability distribution provided by the model, with the interpretation that y and x are placeholders rather than specific instantiations. The proper interpretation should be clear from the context. We will denote by P the set of all conditional probability distributions. Thus a model p(y1x) is, by definition, just an element of P. To study the process, we observe the behavior of the random process for some time, collecting a large number of samples (xi, Yl), (x2, y2),. , (xN, yN). In the example we have been considering, each sample would consist of a phrase x containing the words surrounding in, together with the translation y of in that the process produced. For now, we can imagine that these training samples have been generated by a human expert who was presented with a number of random phrases containing in and asked to choose a good translation for each. When we discuss real-world applications in Section 5, we will show how such samples can be automatically extracted from a bilingual corpus. We can summarize the training sample in terms of its empirical probability distribution /3, defined by number of times that (x, y) occurs in the sample Typically, a particular pair (x, y) will either not occur at all in the sample, or will occur at most a few times. Our goal is to construct a statistical model of the process that generated the training sample p(x,y). The building blocks of this model will be a set of statistics of the training sample. In the current example we have employed several such statistics: the frequency with which in translated to either dans or en was 3/10; the frequency with which it translated to either dans or au cours de was 1/2; and so on. These particular statistics were independent of the context, but we could also consider statistics that depend on the conditioning information x. For instance, we might notice that, in the training sample, if April is the word following in, then the translation of in is en with frequency 9/10. To express the fact that in translates as en when April is the following word, we can introduce the indicator function: The expected value off with respect to the empirical distribution /3(x, y) is exactly the statistic we are interested in. We denote this expected value by We can express any statistic of the sample as the expected value of an appropriate binary-valued indicator function f. We call such function a feature function or feature for short. (As with probability distributions, we will sometimes abuse notation and use f (x, y) to denote both the value of f at a particular pair (x, y) as well as the entire function f.) When we discover a statistic that we feel is useful, we can acknowledge its importance by requiring that our model accord with it. We do this by constraining the expected value that the model assigns to the corresponding feature function f. The expected value off with respect to the model p(ylx) is where /77(x) is the empirical distribution of x in the training sample. We constrain this expected value to be the same as the expected value of f in the training sample. That is, we require We call the requirement (3) a constraint equation or simply a constraint. By restricting attention to those models p(y1x) for which (3) holds, we are eliminating from consideration those models that do not agree with the training sample on how often the output of the process should exhibit the feature f. To sum up so far, we now have a means of representing statistical phenomena inherent in a sample of data (namely, 13(f)), and also a means of requiring that our model of the process exhibit these phenomena (namely, p(f) =1)(f)). One final note about features and constraints bears repeating: although the words &quot;feature&quot; and &quot;constraint&quot; are often used interchangeably in discussions of maximum entropy, we will be vigilant in distinguishing the two and urge the reader to do likewise. A feature is a binary-valued function of (x, y); a constraint is an equation between the expected value of the feature function in the model and its expected value in the training data. Suppose that we are given n feature functions f;, which determine statistics we feel are important in modeling the process. We would like our model to accord with these statistics. That is, we would like p to lie in the subset C of P defined by Figure 1 provides a geometric interpretation of this setup. Here P is the space of all (unconditional) probability distributions on three points, sometimes called a simplex. If we impose no constraints (depicted in (a)), then all probability models are allowable. Imposing one linear constraint CI restricts us to those p E P that lie on the region defined by CI, as shown in (b). A second linear constraint could determine p exactly, if the two constraints are satisfiable; this is the case in (c), where the intersection of CI and C2 is non-empty. Alternatively, a second linear constraint could be inconsistent with the first—for instance, the first might require that the probability of the first point is 1/3 and the second that the probability of the third point is 3/4—this is shown in (d). In the present setting, however, the linear constraints are extracted from the training sample and cannot, by construction, be inconsistent. Furthermore, the linear constraints in our applications will not even come close to determining p E P uniquely as they do in (c); instead, the set C C1 n C n n C of allowable models will be infinite. Among the models p E C, the maximum entropy philosophy dictates that we select the most uniform distribution. But now we face a question left open in Section 2: what does &quot;uniform&quot; mean? A mathematical measure of the uniformity of a conditional distribution p(ylx) is provided by the conditional entropyl Four different scenarios in constrained optimization. P represents the space of all probability distributions. In (a), no constraints are applied, and all p E P are allowable. In (b), the constraint C1 narrows the set of allowable models to those that lie on the line defined by the linear constraint. In (c), two consistent constraints C1 and C2 define a single model p E C1 n C2. In (d), the two constraints are inconsistent (i.e., C1 11 C3 = 0); no p E P can satisfy them both. The entropy is bounded from below by zero, the entropy of a model with no uncertainty at all, and from above by log Y, the entropy of the uniform distribution over all possible lyi values of y. With this definition in hand, we are ready to present the principle of maximum entropy. To select a model from a set C of allowed probability distributions, choose the model p„ E C with maximum entropy H(p): It can be shown that p, is always well-defined; that is, there is always a unique model p„ with maximum entropy in any constrained set C. The maximum entropy principle presents us with a problem in constrained optimization: find the p„ E C that maximizes H(p). In simple cases, we can find the solution to this problem analytically. This was true for the example presented in Section 2 when we imposed the first two constraints on p. Unfortunately, the solution to the general problem of maximum entropy cannot be written explicitly, and we need a more indirect approach. (The reader is invited to try to calculate the solution for the same example when the third constraint is imposed.) To address the general problem, we apply the method of Lagrange multipliers from the theory of constrained optimization. The relevant steps are outlined here; the reader is referred to Della Pietra et al. (1995) for a more thorough discussion of constrained optimization as applied to maximum entropy. We call W(A) the dual function. The functions pA and (A) may be calculated explicitly using simple calculus. We find At first glance it is not clear what these machinations achieve. However, a fundamental principle in the theory of Lagrange multipliers, called generically the KuhnTucker theorem, asserts that under suitable assumptions, the primal and dual problems are, in fact, closely related. This is the case in the present situation. Although a detailed account of this relationship is beyond the scope of this paper, it is easy to state the final result: Suppose that A* is the solution of the dual problem. Then px. is the solution of the primal problem; that is pA. In other words, The maximum entropy model subject to the constraints C has the parametric form' pk, of (10), where the parameter values A* can be determined by maximizing the dual function W(A). The most important practical consequence of this result is that any algorithm for finding the maximum A* of W(A) can be used to find the maximum p. of H(p) for p E C. The log-likelihood Lp(p) of the empirical distribution p as predicted by a model p is defined by3 It is easy to check that the dual function lIi(A) of the previous section is, in fact, just the log-likelihood for the exponential model pA; that is With this interpretation, the result of the previous section can be rephrased as: The model p E C with maximum entropy is the model in the parametric family pA(y1x) that maximizes the likelihood of the training sample /3. This result provides an added justification for the maximum entropy principle: If the notion of selecting a model p* on the basis of maximum entropy isn't compelling enough, it so happens that this same p is also the model that can best account for the training sample, from among all models of the same parametric form (10). Table 1 summarizes the primal-dual framework we have established. 2 It might be that the dual function W(A) does not achieve its maximum at any finite A*. In this case, the maximum entropy model will not have the form pA for any A. However, it will be the limit of models of this form, as indicated by the following result, whose proof we omit: The duality of maximum entropy and maximum likelihood is an example of the more general phenomenon of duality in constrained optimization. problem argmaxpEc H(p) argmaxx W (A) description maximum entropy maximum likelihood type of search constrained optimization unconstrained optimization search domain p E C real-valued vectors {Al, A2 • • •} solution A* Kuhn-Tucker theorem: p. = p),* For all but the most simple problems, the A* that maximize xi' (A) cannot be found analytically. Instead, we must resort to numerical methods. From the perspective of numerical optimization, the function 4f (A) is well behaved, since it is smooth and convex-11 in A. Consequently, a variety of numerical methods can be used to calculate A*. One simple method is coordinate-wise ascent, in which A* is computed by iteratively maximizing 41(A) one coordinate at a time. When applied to the maximum entropy problem, this technique yields the popular Brown algorithm (Brown 1959). Other general purpose methods that can be used to maximize T(A) include gradient ascent and conjugate gradient. An optimization method specifically tailored to the maximum entropy problem is the iterative scaling algorithm of Darroch and Ratcliff (1972). We present here a version of this algorithm specifically designed for the problem at hand; a proof of the monotonicity and convergence of the algorithm is given in Della Pietra et al. (1995). The algorithm is applicable whenever the feature functions f,(x,y) are nonnegative: This is, of course, true for the binary-valued feature functions we are considering here. The algorithm generalizes the Darroch-Ratcliff procedure, which requires, in addition to the nonnegativity, that the feature functions satisfy Ei f,(x, y) = 1 for all x, y. Input: Feature functions fi,f2, ...fn; empirical distribution 19(x, y) Output: Optimal parameter values A*,; optimal model N. where The key step in the algorithm is step (2a), the computation of the increments A A, that solve (16). If f# (x, y) is constant (f* (x, y) = M for all x, y, say) then AA, is given explicitly as If f# (x, y) is not constant, then AA, must be computed numerically. A simple and effective way of doing this is by Newton's method. This method computes the solution a* of an equation g(a*) = 0 iteratively by the recurrence with an appropriate choice for ao and suitable attention paid to the domain of g.
4.. Earlier we divided the statistical modeling problem into two steps: finding appropriate facts about the data, and incorporating these facts into the model. Up to this point we have proceeded by assuming that the first task was somehow performed for us. Even in the simple example of Section 2, we did not explicitly state how we selected those particular constraints. That is, why is the fact that dans or a was chosen by the expert translator 50% of the time any more important than countless other facts contained in the data? In fact, the principle of maximum entropy does not directly concern itself with the issue of feature selection, it merely provides a recipe for combining constraints into a model. But the feature selection problem is critical, since the universe of possible constraints is typically in the thousands or even millions. In this section we introduce a method for automatically selecting the features to be included in a maximum entropy model, and then offer a series of refinements to ease the computational burden. We begin by specifying a large collection Y of candidate features. We do not require a priori that these features are actually relevant or useful. Instead, we let the pool be as large as practically possible. Only a small subset of this collection of features will eventually be employed in our final model. If we had a training sample of infinite size, we could determine the &quot;true&quot; expected value for a candidate feature f E ,T simply by computing the fraction of events in the sample for which f (x, y) = 1. In real-life applications, however, we are provided with only a small sample of N events, which cannot be trusted to represent the process fully and accurately. Specifically, we cannot expect that for every feature f EF, the estimate of /3(f) we derive from this sample will be close to its value in the limit as n grows large. Employing a larger (or even just a different) sample of data from the same process might result in different estimates of P(f) for many candidate features. We would like to include in the model only a subset S of the full set of candidate features F. We will call S the set of active features. The choice of S must capture as much information about the random process as possible, yet only include features whose expected values can be reliably estimated. A nested sequence of subsets C(Si) D C(S2) D C(S3) ... of P corresponding to increasingly large sets of features Si C 52 C $3. To find S, we adopt an incremental approach to feature selection, similar to the strategy used for growing decision trees (Bahl et al. 1989). The idea is to build up S by successively adding features. The choice of feature to add at each step is determined by the training data. Let us denote the set of models determined by the feature set S as C(S). &quot;Adding&quot; a feature f is shorthand for requiring that the set of allowable models all satisfy the equality f9(f) = p(f). Only some members of C(S) will satisfy this equality; the ones that do we denote by C(S U f). Thus, each time a candidate feature is added to S, another linear constraint is imposed on the space C(S) of models allowed by the features in S. As a result, C(S) shrinks; the model 13* in C with the greatest entropy reflects ever-increasing knowledge and thus, hopefully, becomes a more accurate representation of the process. This narrowing of the space of permissible models was represented in Figure 1 by a series of intersecting lines (hyperplanes, in general) in a probability simplex. Perhaps more intuitively, we could represent it by a series of nested subsets of P, as in Figure 2. The basic incremental growth procedure may be outlined as follows. Every stage of the process is characterized by a set of active features S. These determine a space of models By adding feature f to S, we obtain a new set of active features S U f. Following (19), this set of features determines a set of models C(S '1)E.,- fp E P I p(f) = /3(f) for all fESU (21) The optimal model in this space of models is feature f E .F which maximizes the gain AL(S,h; that is, we select the candidate feature which, when adjoined to the set of active features S, produces the greatest increase in likelihood of the training sample. This strategy is implemented in the algorithm below. Compute the model psuf using Algorithm 1 Compute the gain in the log-likelihood from adding this feature using (23) One issue left unaddressed by this algorithm is the termination condition. Obviously, we would like a condition which applies exactly when all the &quot;useful&quot; features have been selected. One reasonable stopping criterion is to subject each proposed feature to cross-validation on a sample of data withheld from the initial data set. If the feature does not lead to an increase in likelihood of the withheld sample of data, the feature is discarded. We will have more to say about the stopping criterion in Section 5.3. Algorithm 2 is not a practical method for incremental feature selection. For each candidate feature f E .T. considered in step 2, we must compute the maximum entropy model p a task that is computationally costly even with the efficient iterative scaling algorithm 'introduced earlier. We therefore introduce a modification to the algorithm, making it greedy but much more feasible. We replace the computation of the gain AL(S,f ) of a feature f with an approximation, which we will denote by -,AL(S,f). Recall that a model ps has a set of parameters A, one for each feature in S. The model p contains this set of parameters, plus a single new parameter a, , corresponding to I-.4 Given this structure, we might hope that the optimal values for A do not change as the feature f is adjoined to S. Were this the case, imposing an additional constraint would require only optimizing the single parameter a to maximize the likelihood. Unfortunately, when a new constraint is imposed, the optimal values of all parameters change. However, to make the feature-ranking computation tractable, we make the approximation that the addition of a feature f affects only a, leaving the A-values associated with other features unchanged. That is, when determining the gain off over the model Ps' we pretend that the best model containing features S U f has the form The only parameter distinguishing models of the form (24) is a. Among these models, we are interested in the one that maximizes the approximate gain We will denote the gain of this model by and the optimal model by suf argmax Gs j (a) 19S,1 Despite the rather unwieldy notation, the idea is simple. Computing the approximate gain in likelihood from adding feature f to ps has been reduced to a simple onedimensional optimization problem over the single parameter a, which can be solved by any popular line-search technique, such as Newton's method. This yields a great savings in computational complexity over computing the exact gain, an n-dimensional The likelihood L(p) is a convex function of its parameters. If we start from a one-constraint model whose optimal parameter value is A = Ao and consider the increase in Lp(p) from adjoining a second constraint with the parameter a, the exact answer requires a search over (A, a). We can simplify this task by holding A =- Ao constant and performing a line search over the possible values of the new parameter a. In (a), the darkened line represents the search space we restrict attention to. In (b), we show the reduced problem: a line search over a. optimization problem requiring more sophisticated methods such as conjugate gradient. But the savings comes at a price: for any particular feature f, we are probably underestimating its gain, and there is a reasonable chance that we will select a feature f whose approximate gain AL(S, f) was highest and pass over the feature f with maximal gain AL (S, f). A graphical representation of this approximation is provided in Figure 3. Here the log-likelihood is represented as an arbitrary convex function over two parameters: A corresponds to the &quot;old&quot; parameter, and a to the &quot;new&quot; parameter. Holding A fixed and adjusting a to maximize the log-likelihood involves a search over the darkened line, rather than a search over the entire space of (A, a). The actual algorithms, along with the appropriate mathematical framework, are presented in the appendix.
5.. In the next few pages we discuss several applications of maximum entropy modeling within Candide, a fully automatic French-to-English machine translation system under development at IBM. Over the past few years, we have used Candide as a test bed for exploring the efficacy of various techniques in modeling problems arising in machine translation. We begin in Section 5.1 with a review of the general theory of statistical translation, describing in some detail the models employed in Candide. In Section 5.2 we describe how we have applied maximum entropy modeling to predict the French translation of an English word in context. In Section 5.3 we describe maximum entropy models that predict differences between French word order and English word order. In Section 5.4 we describe a maximum entropy model that predicts how to divide a French sentence into short segments that can be translated sequentially. Alignment of a French-English sentence pair. The subscripts give the position of each word in its sentence. Here al -= 1, a2 = 2, a3 = a4 = 3, a5 = 4, and a6 = 5. When presented with a French sentence F, Candide's task is to find the English sentence E which is most likely given F: Candide estimates p(E)—the probability that a string E of English words is a wellformed English sentence—using a parametric model of the English language, commonly referred to as a language model. The system estimates p(FIE)—the probability that a French sentence F is a translation of E—using a parametric model of the process of English-to-French translation known as a translation model. These two models, plus a search strategy for finding the E that maximizes (30) for some F, comprise the engine of the translation system. We now briefly describe the translation model for the probability P(FIE); a more thorough account is provided in Brown et al. (1991). We imagine that an English sentence E generates a French sentence F in two steps. First, each word in E independently generates zero or more French words. These words are then ordered to give a French sentence F. We denote the ith word of E by e, and the jth word of F by yi. (We employ yi rather than the more intuitive fi to avoid confusion with the feature function notation.) We denote the number of words in the sentence E by 1E1 and the number of words in the sentence F by IF 1. The generative process yields not only the French sentence F but also an association of the words of F with the words of E. We call this association an alignment, and denote it by A. An alignment A is parametrized by a sequence of IFI numbers al, with 1 < a, < IE l. For every word position j in F, aj is the word position in E of the English word that generates yl. Figure 4 depicts a typical alignment. The probability p(FIE) that F is the translation of E is expressed as the sum over all possible alignments A between E and F of the probability of F and A given E: The sum in equation (31) is computationally unwieldy; it involves a sum over all Ft Fl possible alignments between the words in the two sentences. We sometimes make the simplifying assumption that there exists one extremely probable alignment A, called the &quot;Viterbi alignment,&quot; for which where n(e) denotes the number of French words aligned with e,. In this expression We call the model described by equations (31) and (33) the basic translation model. We take the probabilities p(nle) and p(yle) as the fundamental parameters of the model, and parametrize the distortion probability in terms of simpler distributions. Brown et al. (1991) describe a method of estimating these parameters to maximize the likelihood of a large bilingual corpus of English and French sentences. Their method is based on the Estimation-Maximization (EM) algorithm, a well-known iterative technique for maximum likelihood training of a model involving hidden statistics. For the basic translation model, the hidden information is the alignment A between E and F. We employed the EM algorithm to estimate the parameters of the basic translation model so as to maximize the likelihood of a bilingual corpus obtained from the proceedings of the Canadian Parliament. For historical reasons, these proceedings are sometimes called &quot;Hansards.&quot; Our Hansard corpus contains 3.6 million EnglishFrench sentence pairs, for a total of a little under 100 million words in each language. Table 2 shows our parameter estimates for the translation probabilities p(ylin). The basic translation model has worked admirably: given only the bilingual corpus, with no additional knowledge of the languages or any relation between them, it has uncovered some highly plausible translations. Nevertheless, the basic translation model has one major shortcoming: it does not take the English context into account. That is, the model does not account for surrounding English words when predicting the appropriate French rendering of an English word. As we pointed out in Section 3, this is not how successful translation works. The best French translation of in is a function of the surrounding English words: if a month's time are the subsequent words, pendant might be more likely, but if the fiscal year 1992 are what follows, then dans is more likely. The basic model is blind to context, always assigning a probability of 0.3004 to dans and 0.0044 to pendant. This can yield errors when Candide is called upon to translate a French sentence. Examples of two such errors are shown in Figure 5. In the first example, the system has chosen an English sentence in which the French word superieures has been rendered as superior when greater or higher is a preferable translation. With no knowledge of context, an expert translator is also quite likely to select superior as the English word generating superieures. But an expert privy to the fact that 50% was among the next few words might be more inclined to select greater or higher. Similarly, in the second example, the incorrect rendering of II as He might have been avoided had the translation model used the fact that the word following it is appears. In the hope of rectifying these errors, we consider the problem of context-sensitive modeling of word translation. We envision, in practice, a separate maximum entropy model, p e(y1x), for each English word e, where pe(Y1x) represents the probability that an expert translator would choose y as the French rendering of e, given the surrounding English context x. This is just a slightly recast version of a longstanding problem in computational linguistics, namely, sense disambiguation—the determination of a word's sense from its context. We begin with a training sample of English-French sentence pairs (E, F) randomly extracted from the Hansard corpus, such that E contains the English word in. For each sentence pair, we use the basic translation model to compute the Viterbi alignment A between E and F. Using this alignment, we then construct an (x, y) training event. The event consists of a context x containing the six words in E surrounding in and a future Several actual training events for the maximum entropy translation model for in, extracted from the transcribed proceedings of the Canadian Parliament. Translation e_3 e-2 e—i e±i e4.2 e+3 dans the committee stated a letter to work was required respect of the au cours de the fiscal year dans by the government the same postal de of diphtheria reported Canada , by not given notice the ordinary way y equal to the French word which is (according to the Viterbi alignment A) aligned with in. A few actual examples of such events for in are depicted in Table 3. Next we define the set of candidate features. For this application, we employ features that are indicator functions of simply described sets. Specifically, we consider functions f (x, y) that are one if y is some particular French word and the context x contains a given English word, and are zero otherwise. We employ the following notation to represent these features: Here fi = 1 when April follows in and en is the translation of in; f2 -= 1 when weeks is one of the three words following in and pendant is the translation. The set of features under consideration is vast, but may be expressed in abbreviated form in Table 4. In the table, the symbol 0 is a placeholder for a possible French word and the symbol is a placeholder for a possible English word. The feature fi mentioned above is thus derived from template 2 with 0 = en and 0 = April; the feature f2 is derived from template 5 with 0 = pendant and 0 = weeks. If there are IVE I total English words and IVA total French words, there are IVA template-1 features, and IVE I . IV.T features of templates 2, 3, 4, and 5. Template 1 features give rise to constraints that enforce equality between the probability of any French translation y of in according to the model and the probability of that translation in the empirical distribution. Examples of such constraints are Feature templates for word-translation modeling. lye is the size of the English vocabulary; IVFI the size of the French vocabulary. A maximum entropy model that uses only template 1 features predicts each French translation y with the probability p(y) determined by the empirical data. This is exactly the distribution employed by the basic translation model. Since template 1 features are independent of x, the maximum entropy model that employs only constraints derived from template 1 features takes no account of contextual information in assigning a probability to y. When we include constraints derived from template 2 features, we take our first step towards a context-dependent model. Rather than simply constraining the expected probability of a French word y to equal its empirical probability, these constraints require that the expected joint probability of the English word immediately following in and the French rendering of in be equal to its empirical probability An example of a template 2 constraint is p(y = pendant, e+1 = several) = p(y = pendant, e+i = several) A maximum entropy model that incorporates this constraint will predict the translations of in in a manner consistent with whether or not the following word is several. In particular, if in the empirical sample the presence of several led to a greater probability for pendant, this will be reflected in a maximum entropy model incorporating this constraint. We have thus taken our first step toward context-sensitive translation modeling. Templates 3, 4, and 5 consider, each in a different way, various parts of the context. For instance, template 5 constraints allow us to model how an expert translator is biased by the appearance of a word somewhere in the three words following the word being translated. If house appears within the next three words (e.g., the phrases in the house and in the red house), then dans might be a more likely translation. On the other hand, if year appears within the same window of words (as in in the year 1941 or in that fateful year), then au cours de might be more likely. Together, the five constraint templates allow the model to condition its assignment of probabilities on a window of six words around eo, the word in question. We constructed a maximum entropy model p,n(y1x) by the iterative model-growing method described in Section 4. The automatic feature selection algorithm first selected a template 1 constraint for each of the translations of in seen in the sample (12 in Maximum entropy model to predict French translation of in. Features shown here were the first features selected not from template 1. [verb marker] denotes a morphological marker inserted to indicate the presence of a verb as the next word. all), thus constraining the model's expected probability of each of these translations to their empirical probabilities. The next few constraints selected by the algorithm are shown in Table 5. The first column gives the identity of the feature whose expected value is constrained; the second column gives AL(S, f ), the approximate increase in the model's log-likelihood on the data as a result of imposing this constraint; the third column gives L(p), the log-likelihood after adjoining the feature and recomputing the model. Let us consider the fifth row in the table. This constraint requires that the model's expected probability of dans, if one of the three words to the right of in is the word speech, is equal to that in the empirical sample. Before imposing this constraint on the model during the iterative model-growing process, the log-likelihood of the current model on the empirical sample was —2.8703 bits. The feature selection algorithm described in Section 4 calculated that if this constraint were imposed on the model, the log-likelihood would rise by approximately 0.019059 bits; since this value was higher than for any other constraint considered, the constraint was selected. After applying iterative scaling to recompute the parameters of the new model, the likelihood of the empirical sample rose to —2.8525 bits, an increase of 0.0178 bits. Table 6 lists the first few selected features for the model for translating the English word run. The &quot;Hansard flavor&quot;—the rather specific domain of parliamentary discourse related to Canadian affairs—is easy to detect in many of the features in this table. It is not hard to incorporate the maximum entropy word translation models into a translation model p(FIE) for a French sentence given an English sentence. We merely replace the simple context-independent models p(ye) used in the basic translation model (33) with the more general context-dependent models pe(y1x): where xa, denotes the context of the English word eaj. Figure 6 illustrates how using this improved translation model in the Candide system led to improved translations for the two sample sentences given earlier. Though an ideal machine translation system could devour input sentences of unrestricted length, a typical stochastic system must cut the French sentences into polite lengths before digesting them. If the processing time is exponential in the length of the input passage (as is the case with the Candide system), then failing to split the French sentences into reasonably-sized segments would result in an exponential slowdown in translation. Thus, a common task in machine translation is to find safe positions at which Example of an unsafe segmentation. A word in the translated sentence (e3) is aligned to words (y3 and y4) in two different segments of the input sentence. to split input sentences in order to speed the translation process. &quot;Safe&quot; is a vague term; one might, for instance, reasonably define a safe segmentation as one which results in coherent blocks of words. For our purposes, however, a safe segmentation is dependent on the Viterbi alignment A between the input French sentence F and its English translation E. We define a rift as a position j in F such that for all k <j, ak <a1 and for all k > j, ak > al. In other words, the words to the left of the French word yi are generated by words to the left of the English word eal, and the words to the right of yi are generated by words to the right of ea,. In the alignment of figure 4, for example, there are rifts at positions j = 1, 2, 4, 5 in the French sentence. One visual method of determining whether a rift occurs after the French word j is to try to trace a line from the last letter of yj up to the last letter of eai; if the line can be drawn without intersecting any alignment lines, position f is a rift. Using our definition of rifts, we can redefine a safe segmentation as one in which the segment boundaries are located only at rifts. Figure 7 illustrates an unsafe segmentation, in which a segment boundary (denoted by the 11 symbol) lies between a and mange, where there is no rift. Figure 8, on the other hand, illustrates a safe segmentation. The reader will notice that a safe segmentation does not necessarily result in semantically coherent segments: mes and devoirs are certainly part of one logical unit, yet are separated in this safe segmentation. Once such a safe segmentation has been applied to the French sentence, we can make the assumption while searching for the appropriate English translation that no word in the translated English sentence will have to account for French words located in multiple segments. Disallowing interExample of a safe segmentation. segment alignments dramatically reduces the scale of the computation involved in generating a translation, particularly for large sentences. We can consider each segment sequentially while generating the translation, working from left to right in the French sentence. We now describe a maximum entropy model that assigns to each location in a French sentence a score that is a measure of the safety in cutting the sentence at that location. We begin as in the word translation problem, with a training sample of English-French sentence pairs (E, F) randomly extracted from the Hansard corpus. For each sentence pair we use the basic translation model to compute the Viterbi alignment A between E and F. We also use a stochastic part-of-speech tagger as described in Merialdo (1990) to label each word in F with its part of speech. For each position j in F we then construct a (x, y) training event. The value y is rift if a rift belongs at position j and is no-rift otherwise. The context information x is reminiscent of that employed in the word translation application described earlier. It includes a six-word window of French words: three to the left of yi and three to the right of yl. It also includes the part-of-speech tags for these words, and the classes of these words as derived from a mutual-information clustering scheme described in Brown et al. (1990). The complete (x, y) pair is illustrated in Figure 9. In creating p(riftlx), we are (at least in principle) modeling the decisions of an expert French segmenter. We have a sample of his work in the training sample j3(x, y), and we measure the worth of a model by the log-likelihood Li3(p). During the iterative model-growing procedure, the algorithm selects constraints on the basis of how much they increase this objective function. As the algorithm proceeds, more and more constraints are imposed on the model p, bringing it into ever-stricter compliance with the empirical data p&quot; (x,y). This is useful to a point; insofar as the empirical data embodies the expert knowledge of the French segmenter, we would like to incorporate this knowledge into a model. But the data contains only so much expert knowledge; the algorithm should terminate when it has extracted this knowledge. Otherwise, the model p(y Ix) will begin to fit itself to quirks in the empirical data. A standard approach in statistical modeling, to avoid the problem of overfitting the training data, is to employ cross-validation techniques. Separate the training data P(x, y) into a training portion, Pr, and a withheld portion, Ph. Use only pr in the modelgrowing process; that is, select features based on how much they increase the likelihood L;), (p). As the algorithm progresses, Lip, (p) thus increases monotonically. As long as each new constraint imposed allows p to better account for the random process that generated both Pr and P h, the quantity Lph (p) also increases. At the point when overfitting begins, however, the new constraints no longer help p model the random process, but instead require p to model the noise in the sample Pr itself. At this point, Lp, (p) continues to rise, but Li,, (p) no longer does. It is at this point that the algorithm should terminate. Figure 10 illustrates the change in log-likelihood of training data 11-„ (p) and withheld data Lph(p). Had the algorithm terminated when the log-likelihood of the withheld data stopped increasing, the final model p would contain slightly less than 40 features. We have employed this segmenting model as a component in a French-English machine translation system in the following manner: The model assigns to each position in the French sentence a score, p(rif t I x), which is a measure of how appropriate a split would be at that location. A dynamic programming algorithm then selects, given the &quot;appropriateness&quot; score at each position and the requirement that no segment may contain more than 10 words, an optimal (or, at least, reasonable) splitting of the sentence. Figure 11 shows the system's segmentation of four sentences selected at random from the Hansard data. We remind the reader to keep in mind when evaluating Figure 11 that the segmenter's task is not to produce logically coherent blocks of words, but to divide the sentence into blocks which can be translated sequentially from left to right. Translating a French sentence into English involves not only selecting appropriate English renderings of the words in the French sentence, but also selecting an ordering for the English words. This order is often very different from the French word order. One way Candide captures word-order differences in the two languages is to allow for alignments with crossing lines. In addition, Candide performs, during a preprocessing stage, a reordering step that shuffles the words in the input French sentence into an order more closely resembling English word order. One component of this word reordering step deals with French phrases which have the NOUN de NOUN form. For some NOUN de NOUN phrases, the best English translation is nearly word for word: conflit d'interet, for example, is almost always rendered as conflict of interest. For other phrases, however, the best translation is obtained by interchanging the two nouns and dropping the de. The French phrase taux d'interet, for example, is best rendered as interest rate. Table 7 gives several examples of NOUN de NOUN phrases together with their most appropriate English translations. In this section we describe a maximum entropy model that, given a French NOUN de NOUN phrase, estimates the probability that the best English translation involves an interchange of the two nouns. We begin with a sample of English-French sentence pairs (E, F) randomly extracted from the Hansard corpus, such that F contains a NOUN de NOUN phrase. For each sentence pair we use the basic translation model to compute the Viterbi alignment A between the words in E and F. Using A we construct an (x, y) training event as follows: We let the context x be the pair of French nouns (NouNL, NouNR). We let y be no-interchange if the English translation is a word-forword translation of the French phrase and y = interchange if the order of the nouns in the English and French phrases are interchanged. We define candidate features based upon the template features shown in Table 8. In this table, the symbol 0 is a placeholder for either interchange or no-interchange and the symbols 01 and 02 are placeholders for possible French words. If there are IVA total French words, there are 21V.F1 possible features of templates 1 and 2 and 21v,i2 features of template 3. Template 1 features consider only the left noun. We expect these features to be relevant when the decision of whether to interchange the nouns is influenced by the identity of the left noun. For example, including the template 1 feature gives the model sensitivity to the fact that the nouns in French NOUN de NOUN phrases beginning with systeme (such as systeme de surveillance and systeme de quota) are more likely to be interchanged in the English translation. Similarly, including the template 1 feature gives the model sensitivity to the fact that French NOUN de NOUN phrases beginning with mois, such as mois de mai (month of May) are more likely to be translated word for word. Template 3 features are useful in dealing with translating NOUN de NOUN phrases in which the interchange decision is influenced by both nouns. For example, NOUN de NOUN phrases ending in interet are sometimes translated word for word, as in conflit d'interet (conflict of interest) and are sometimes interchanged, as in taux d'interet (interest rate). We used the feature-selection algorithm of section 4 to construct a maximum entropy model from candidate features derived from templates 1, 2, and 3. The model was grown on 10,000 training events randomly selected from the Hansard corpus. The final model contained 358 constraints. To test the model, we constructed a NOUN de NOUN word-reordering module which interchanges the order of the nouns if p( interchange lx) > 0.5 and keeps the order the same otherwise. Table 9 compares performance on a suite of test data against a baseline NOUN de NOUN reordering module that never swaps the word order. Predictions of the NOUN de NOUN interchange model on phrases selected from a corpus unseen during the training process. Table 12 shows some randomly-chosen NOUN de NOUN phrases extracted from this test suite along with p(interchange1x), the probability assigned by the model to inversion. On the right are phrases such as saison d'hiver for which the model strongly predicted an inversion. On the left are phrases the model strongly prefers not to interchange, such as somme d'argent, abus de privilege and chambre de commerce. Perhaps most intriguing are those phrases that lie in the middle, such as faux d'inflation, which can translate either to inflation rate or rate of inflation.
6.. We began by introducing the building blocks of maximum entropy modeling—realvalued features and constraints built from these features. We then discussed the maximum entropy principle. This principle instructs us to choose, among all the models consistent with the constraints, the model with the greatest entropy. We observed that this model was a member of an exponential family with one adjustable parameter for each constraint. The optimal values of these parameters are obtained by maximizing the likelihood of the training data. Thus two different philosophical approaches— maximum entropy and maximum likelihood—yield the same result: the model with the greatest entropy consistent with the constraints is the same as the exponential model which best predicts the sample of data. We next discussed algorithms for constructing maximum entropy models, concentrating our attention on the two main problems facing would-be modelers: selecting a set of features to include in a model, and computing the parameters of a model containing these features. The general feature-selection process is too slow in practice, and we presented several techniques for making the algorithm feasible. In the second part of this paper we described several applications of our algorithms, concerning modeling tasks arising in Candide, an automatic machine translation system under development at IBM. These applications demonstrate the efficacy of maximum entropy techniques for performing context-sensitive modeling.
Acknowledgments. The authors wish to thank Harry Printz and John Lafferty for suggestions and comments on a preliminary draft of this paper, and Jerome Bellegarda for providing expert French knowledge.