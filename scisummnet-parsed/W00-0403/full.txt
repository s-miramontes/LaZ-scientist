1 Introduction. On October 12, 1999, a relatively small number of news sources mentioned in passing that Pakistani Defense Minister Gen. Pervaiz Musharraf was away visiting Sri Lanka. However, all world agencies would be actively reporting on the major events that were to happen in Pakistan in the following days: Prime Minister Nawaz Sharif announced that in Gen. Musharrafs absence, the Defense Minister had been -sacked and replaced by General Zia Addin. Large numbers of messages from various sources started to inundate the newswire: about the army's occupation of the capital, the Prime Minister's ouster and his subsequent placement under house arrest, Gen. Musharraf s return to his country, his ascendancy to power, and the imposition of military control over Pakistan. The paragraph above summarizes a large amount of news from different sources. While it was not automatically generated, one can imagine the use of such automatically generated summaries. In this paper we will describe how multi-document summaries are built and evaluated. The process of identifying all articles on an emerging event is called Topic Detection and Tracking (TDT). A large body of research in TDT has been created over the past two years [Allan et al., 98]. We will present an extension of our own research on TDT [Radev et al., 1999] to cover summarization of multidocument clusters. Our entry in the official TDT evaluation, called CIDR [Radev et al., 1999], uses modified TF*IDF to produce clusters of news articles on the same event. We developed a new technique for multi-document summarization (or MDS), called centroid-based summarization (CBS) which uses as input the centroids of the clusters produced by C1DR to identify which sentences are central to the topic of the cluster, rather than the individual articles. We have implemented CBS in a system, named MEAD. The main contributions of this paper are: the development of a centroid-based multi-document summarizer, the use of cluster-based sentence utility (CBSU) and cross-sentence informational subsumption (CSIS) for evaluation of single and multi-document summaries, two user studies that support our findings, and an evaluation of MEAD. An event cluster, produced by a TDT system, consists of chronologically ordered news articles from multiple sources, which describe an event as it develops over time. Event clusters range from2 to 10 documents from which MEAD produces summaries in the form of sentence extracts. A key feature of MEAD is its use of cluster centroids, which consist of words which are central not only to one article in a cluster, but to all the articles. MEAD is significantly different from previous work on multi-document summarization [Radev & McKeown, 1998; Carbonell and Goldstein, 1998; Mani and Bloedorn, 1999; McKeown et al., 1999], which use techniques such as graph matching, maximal marginal relevance, or language generation. Finally, evaluation of multi-document summaries is a difficult problem. There is not yet a widely accepted evaluation scheme. We propose a utility-based evaluation scheme, which can be used to evaluate both single-document and multi-document summaries.
2 Informational content of sentences. Cluster-based sentence utility (CBSU, or utility) refers to the degree of relevance (from 0 to 10) of a ' particular sentence to the general topic of the entire cluster (for a dis cussion of what is a topic, see [Allan et al. 1998]). A utility of 0 means that the sentence is not relevant to the cluster and a 10 marks an essential sentence. A related notion to CBSU is cross-sentence informational subsumption (CSIS, or subsumption), which reflects that certain sentences repeat some of the information present in other sentences and may, therefore, be omitted during summarization. If the information content of sentence a (denoted as i(a)) is contained within sentence b, then a becomes informationally redundant and the content of b is said to subsume that of a: In the example below, (2) subsumes (1) because the crucial information in (1) is also included in (2) which presents additional content: &quot;the court&quot;, &quot;last August&quot;, and &quot;sentenced him to life&quot;. The cluster shown in Figure I shows subsumption links across two articles about recent terrorist activities in Algeria (ALG 18853 and ALG 18854). An arrow from sentence A to sentence B indicates that the information content of A is subsumed by the information content of B. Sentences 2, 4, and 5 from the first article repeat the information from sentence The full text of these articles is shown in the Appendix. 2 in the second article, while sentence 9 from the former article is later repeated in sentences 3 and 4 of the latter article. Sentences subsuming each other are said to belong to the same equivalence class. An equivalence class may contain more than two sentences within the same or different articles. In the following example, although sentences (3) and (4) are not exact paraphrases of each other, they can be substituted for each other without crucial loss of information and therefore belong to the same equivalence class, i.e. i(3) c 1(4) and i(4) c i(3). In the user study section we will take a look at the way humans perceive CSIS and equivalence class. Thursday that 18 decapitated bodies have been found by the authorities. Maximal marginal relevance (or MMR) is a technique similar to CSIS and was introduced in [Carbonell and Goldstein, 1998]. In that paper, MMR is used to produce summaries of single documents that avoid redundancy. The authors mention that their preliminary results indicate that multiple documents on the same topic also contain redundancy but they fall short of using MMR for multi-document summarization. Their metric is used as an enhancement to a query-based summary whereas CSIS is designed for query-independent (a.k.a., generic) summaries. We now describe the corpus used for the evaluation of MEAD, and later in this section we present MEAD's algorithm. AFP, UPI AFP, UPI AP, AFP AP, AFP, UPI AP, PRI, VOA AP, NYT Algerian terrorists threaten Belgium The FBI puts Osama bin Laden on the most wanted list Explosion in a Moscow apartment building (September 9, 1999) Explosion in a Moscow apartment building (September 13, 1999) General strike in Denmark Toxic spill in Spain For our experiments, we prepared a snail corpus consisting of a total of 558 sentences in 27 documents, organized in 6 clusters (Table 1), all extracted by CIDR. Four of the clusters are from Usenet newsgroups. The remaining two clusters are from the official TDT corpus2. Among the factors for our selection of clusters are: coverage of as many news sources as possible, coverage of both TDT and non-TDT data, coverage of different types of news (e.g., terrorism, internal affairs, and environment), and diversity in cluster sizes (in our case, from 2 to 10 articles). The test corpus is used in the evaluation in such a way that each cluster is summarized at 9 different compression rates, thus giving nine times as many sample points as one would expect from the size of the corpus. Table 2 shows a sample centroid, produced by CIDR [Radev et al., 1999] from cluster A. The &quot;count&quot; column indicates the average number of occurrences of a word *across the entire cluster. The IDF values were computed from the TDT corpus. A centroid, in this context, is a pseudo-document which consists of words which have Count*IDF scores above a predefined threshold in the documents that constitute the cluster. CIDR computes Count*IDF in an iterative fashion, updating its values as more articles are inserted in a given cluster. We hypothesize that sentences that contain the words from the centroid are more indicative of the topic of the cluster. 2 The selection of Cluster E is due to an idea by the participants in the Novelty Detection Workshop, led by James Allan. MEAD decides which sentences to include in the extract by ranking them according to a set of parameters. The input to MEAD is a cluster of articles (e.g., extracted by CIDR) and a value for the compression rate r. For example, if the cluster contains a total of 50 sentences (n = 50) and the value of r is 20%, the output of MEAD will contain 10 sentences. Sentences are laid in the same order as they appear in the original documents with documents ordered chronologically. We benefit here from the time stamps associated with each document. where i (/ n) is the sentence number within the cluster. INPUT: Cluster of d documents 3 with n sentences (compression rate = r) 3 Note that currently, MEAD requires that sentence boundaries be marked. The system performance S is one of the numbers6 described in the previous subsection. For {13), the value of S is 0.627 (which is lower than random). For {14}, S is 0.833, which is between R and J. In the example, only two of the six possible sentence selections, {14) and {24} are between R and J. Three others, {13}, (231, and {34) are below R. while {12} is better than J. To restrict system performance (mostly) between 0 and I, we use a mapping between R and J in such a way that when S = R, the normalized system performance, D, is equal to 0 and when S = J, D becomes I. The corresponding linear function7 is: Figure 2 shows the mapping •between system performance S on the left (a) and normalized system performance D on the right (b). A small part of the 0I segment is mapped to the entire 0-1 segment; therefore the difference between two systems, performing at e.g., 0.785 and 0.812 can be significant! Example: the normalized system performance for the {14) system then becomes (0.833 - 0.732) / (0.841 — 0.732) or 0.927. Since the score is close to 1, the {14) system is almost as good as the interjudge agreement. The normalized system performance for the {24} system is similarly (0.837 — 0.732) / (0.841 7 The formula is valid when J > R (that is, the judges agree among each other better than randomly). — 0.732) or 0.963. Of the two systems, {24} outperforms {14). To use CSIS in the evaluation, we introduce a new parameter, E, which tells us how much to penalize a system that includes redundant information. In the example from Table 7 (arrows indicate subsumption), a summarizer with r = 20% needs to pick 2 out of 12 sentences. Suppose that it picks 1/1 and 2/1 (in bold). If E = 1, it should get full credit of 20 utility points. If E = 0, it should get no credit for the second sentence as it is subsumed by the first sentence. By varying E between 0 and I, the evaluation may favor or ignore subsumption.
3 articles). We ran two user experiments. First, six judges were each given six clusters and asked to ascribe an importance score from 0 to 10 to each sentence within a particular cluster. Next, five judges had to indicate for each sentence which other sentence(s), if any, it subsumes 8. Using the techniques described in Section 0, we computed the cross-judge agreement (J) for the 6 clusters for various r (Figure 3). Overall, interjudge agreement was quite high. An interesting drop in interjudge agreement occurs for 20-30% summaries. The drop most likely results from the fact that 10% summaries are typically easier to produce because the few most important sentences in a cluster are easier to identify. 8 We should note that both annotation tasks were quite time consuming and frustrating for the users who took anywhere from 6 to 10 hours each to complete their part. In the second experiment, we asked users to indicate all cases when within a cluster, a sentence is subsumed by another. The judges' data on the first seven sentences of cluster A are shown in Table 8. The &quot;-F score&quot; indicates the number of judges who agree on the most frequent subsumption. The t score&quot; indicates that the consensus was no subsumption. We found relatively low interjudge agreement on the cases in which at least one judge indicated evidence of subsumption. Overall, out of 558 sentences, there was full agreement (5 judges) on 292 sentences (Table 9). Unfortunately, h 291 of these 292 sentences the agreement was that there is no subsumption. When the bar of agreement was lowered to four judges, 23 out of 406 agreements are on sentences with subsumption. Overall, out of 80 In conclusion, we found very high interjudge agreement in the first experiment and moderately low agreement in the second experiment. We concede that the time necessary to do a proper job at the second task is partly to blame. Since the baseline of random sentence selection is already included in the evaluation formulae, we used the Lead-based method (selecting the positionally first (n*r/c) sentences from each cluster where c = number of clusters) as the baseline to evaluate our system. In Table 10 we show the normalized performance (D) of MEAD, for the six clusters at nine compression rates. MEAD performed better than Lead in 29 (in bold) out of 54 cases. Note that for the largest cluster, Cluster D, MEAD outperformed Lead at all compression rates. showed how MEAD's sentence scoring weights can - be modified to produce summaries significantly better than the alternatives. We also looked at a property of multi-document clusters, namely cross-sentence information subsumption (which is related to the MMR metric proposed in [Carbonell and Goldstein, 1998]) and showed how it can be used in evaluating multidocument summaries. All our findings are backed by the analysis of two experiments that we performed with human subjects. We found that the interjudge agreement on sentence utility is very high while the agreement on crosssentence subsumption is moderately low, ahhough promising. In the future, we would like to test our multidocument summarizer on a larger corpus and improve the summarization algorithm. We would also like to explore how the techniques we proposed here can be used for multiligual multidocument summarization. We then modified the MEAD algorithm to include lead information as well as centroids (see Section 0). In this case, MEAD+Lead performed better than the Lead baseline in 41 cases. We are in the process of running experiments with other SCORE formulas. It may seem that utility-based evaluation requires too much effort and is prone to low interjudge agreement. We believe that our results show that interjudge agreement is quite high. As far as the amount of effort required, we believe that the larger effort on the part of the judges is more or less compensated with the ability to evaluate summaries off-line and at variable compression rates. Alternative evaluations don't make such evaluations possible. We should concede that a utility-based approach is probably not feasible for query-based summaries as these are typically done only on-line. We discussed the possibility of a sentence contributing negatively to the utility of another sentence due to redundancy. We should also point out that sentences can also reinforce one another positively. For example, if a sentence mentioning a new entity is included in a summary, one might also want to include a sentence that puts the entity in the context of the reit of the article or cluster.
6 Contributions and future work. We presented a new multi-document summarizer, MEAD. It summarizes clusters of news articles automatically grouped by a topic detection system. MEAD uses information from the centroids of the clusters to select sentences that are most likely to be relevant to the cluster topic. We used a new utility-based technique, CBSU, for the evaluation of MEAD and of summarizers in general. We found that MEAD produces summaries that are similar in quality to the ones produced by humans. We also compared MEAD's performance to an alternative method, multi-document lead, and
7 Acknowledgments. We would like to thank Inderjeet Mani, Wlodek Zadrozny, Rie Kubota Ando, Joyce Chai, and Nanda Kambhatla for their valuable feedback. We would also like to thank Carl Sable, Min-Yen Kan, Dave Evans, Adam Budzikowski, and Veronika Horvath for their help with the evaluation.