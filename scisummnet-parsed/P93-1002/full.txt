1 Introduction. In this paper, we describe an algorithm for aligning sentences with their translations in a bilingual corpus. Aligned bilingual corpora have proved useful in many tasks, including machine translation (Brown et al., 1990; Sadler, 1989), sense disambiguation (Brown et al., 1991a; Dagan et al., 1991; Gale et al., 1992), and bilingual lexicography (Klavans and Tzoukermann, 1990; Warwick and Russell, 1990). The task is difficult because sentences frequently do not align one-to-one. Sometimes sentences align many-to-one, and often there are deletions in •The author wishes to thank Peter Brown, Stephen DellaPietra, Vincent DellaPietra, and Robert Mercer for their suggestions, support, and relentless taunting. The author also wishes to thank Jan Hajic and Meredith Goldsmith as well as the aforementioned for checking the alignments produced by the implementation. one of the supposedly parallel corpora of a bilingual corpus. These deletions can be substantial; in the Canadian Hansard corpus, there are many deletions of several thousand sentences and one deletion of over 90,000 sentences. Previous work includes (Brown et al., 1991b) and (Gale and Church, 1991). In Brown, alignment is based solely on the number of words in each sentence; the actual identities of words are ignored. The general idea is that the closer in length two sentences are, the more likely they align. To perform the search for the best alignment, dynamic programming (Bellman, 1957) is used. Because dynamic programming requires time quadratic in the length of the text aligned, it is not practical to align a large corpus as a single unit. The computation required is drastically reduced if the bilingual corpus can be subdivided into smaller chunks. Brown uses anchors to perform this subdivision. An anchor is a piece of text likely to be present at the same location in both of the parallel corpora of a bilingual corpus. Dynamic programming is used to align anchors, and then dynamic programming is used again to align the text between anchors. The Gale algorithm is similar to the Brown algorithm except that instead of basing alignment on the number of words in sentences, alignment is based on the number of characters in sentences. Dynamic programming is also used to search for the best alignment. Large corpora are assumed to be already subdivided into smaller chunks. While these algorithms have achieved remarkably good performance, there is definite room for improvement. These algorithms are not robust with respect to non-literal translations and small deletions; they can easily misalign small passages because they ignore word identities. For example, the type of passage depicted in Figure 1 occurs in the Hansard corpus. With length-based alignment algorithms, these passages may well be misaligned by an even number of sentences if one of the corpora contains a deletion. In addition, with lengthbased algorithms it is difficult to automatically recover from large deletions. In Brown, anchors are used to deal with this issue, but the selection of anchors requires manual inspection of the corpus to be aligned. Gale does not discuss this issue. Alignment algorithms that use lexical information offer a potential for higher accuracy. Previous work includes (Kay, 1991) and (Catizone et al., 1989). However, to date lexically-based algorithms have not proved efficient enough to be suitable for large corpora. In this paper, we describe a fast algorithm for sentence alignment that uses lexical information. The algorithm constructs a simple statistical word-to-word translation model on the fly during sentence alignment. We find the alignment that maximizes the probability of generating the corpus with this translation model. The search strategy used is dynamic programming with thresholding. Because of thresholding, the search is linear in the length of the corpus so that a corpus need not be subdivided into smaller chunks. The search strategy is robust with respect to large deletions; lexical information allows us to confidently identify the beginning and end of deletions.
2 The Alignment Model. We use an example to introduce our framework for alignment. Consider the bilingual corpus (C, Y) displayed in Figure 2. Assume that we have constructed a model for English-to-French translaassuming that successive sentences translate independently of each other. This value should be relatively large, since F1 is a good translation of El and (F2, F3) is a good translation of E2. Another possible alignment A2 is one where E1 maps to nothing and E2 maps to F1, F2, and F3. We get This value should be fairly low, since the alignment does not map the English sentences to their translations. Hence, if our translation model is accurate we will have In general, the more sentences that are mapped to their translations in an alignment A, the higher the value of P(Y , AV). We can extend this idea to produce an alignment algorithm given a translation model. In particular, we take the alignment of a corpus (C, .T) to be the alignment A that maximizes P(..r , Ale). The more accurate the translation model, the more accurate the resulting alignment will be. However, because the parameters are all of the form P (FAL') where E is a sentence, the above framework is not amenable to the situation where a French sentence corresponds to no English sentences. Hence, we use a slightly different framework. We view a bilingual corpus as a sequence of sentence beads (Brown et al., 1991b), where a sentence bead corresponds to an irreducible group of sentences that align with each other. For example, the correct alignment of the bilingual corpus in Figure 2 consists of the sentence bead [Ei. ; Fd followed by the sentence bead [E2; F2, F3]. We can represent an alignment A of a corpus as a sequence of sentence beads GE71); Fin , {Epz ; Fpz i , . . .) , where the EP i and FP i can be zero, one, or more sentences long. Under this paradigm, instead of expressing the translation model as a conditional distribution 14 That is what the consumers are interested in and that is what the party is interested in. E2 Hon. members opposite scoff at the freeze suggested by this party; to them it is laughable. French (.7') Voila ce qui interesse le consommateur et voila ce que interesse notre parti. Les deputes d'en face se moquent du gel que a propose notre parti. Pour eux, c'est une mesure risible. P(FplE) we express the translation model as a distribution P([Ep; Fp]) over sentence beads. The alignment problem becomes discovering the alignment A that maximizes the joint distribution P(E, Y, A) . Assuming that successive sentence beads are generated independently, we get where A = ([Epi; Fpii; ; ; . ;[EpL; FpL])\ is consistent with E and .T and where p(L) is the probability that a corpus contains L sentence beads. For our translation model, we desire the simplest model that incorporates lexical information effectively. We describe our model in terms of a series of increasingly complex models. In this section, we only consider the generation of sentence beads containing a single English sentence E = el • • • en and single French sentence F = Ii • • fm. As a starting point, consider a model that assumes that all individual words are independent. We take where p(n) is the probability that an English sentence is n words long, p(m) is the probability that a French sentence is m words long, p(ei) is the frequency of the word ei in English, and p(f2) is the frequency of the word h in French. To capture the dependence between individual English words and individual French words, we generate English and French words in pairs in addition to singly. For two words e and f that are mutual translations, instead of having the two terms p(e) and p(f) in the above equation we would like a single term p(e, f) that is substantially larger than p(e)p(f). To this end, we introduce the concept of a word bead. A word bead is either a single English word, a single French word, or a single English word and a single French word. We refer to these as 1:0, 0:1, and 1:1 word beads, respectively. Instead of generating a pair of sentences word by word, we generate sentences bead by bead, using the 1:1 word beads to capture the dependence between English and French words. As a first cut, consider the following &quot;model&quot;: where B = {b1,...,b1} is a multiset of word beads, p(1) is the probability that an English sentence and a French sentence contain 1 word beads, and p(b) denotes the frequency of the word bead bi. This simple model captures lexical dependencies between English and French sentences. However, this &quot;model&quot; does not satisfy the constraint that EB P*(B) = 1; because beadings B are unordered multisets, the sum is substantially less than one. To force this model to sum to one, we simply normalize by a constant so that we retain the qualitative aspects of the model. We take While a beading B describes an unordered multiset of English and French words, sentences are in actuality ordered sequences of words. We need to model word ordering, and ideally the probability of a sentence bead should depend on the ordering of its component words. For example, the sentence John de Fido should have a higher probability of aligning with the sentence Jean a mange Fido than with the sentence Fido a mange Jean. However, modeling word order under translation is notoriously difficult (Brown ei al., 1993), and it is unclear how much improvement in accuracy a good model of word order would provide. Hence, we model word order using a uniform distribution; we take where the sum ranges over beadings B consistent with the sentence bead. We use an analogous equation for 1:2 sentence beads. where B ranges over beadings consistent with [E; F] and 1(B) denotes the number of beads in B. Recall that n is the length of the English sentence and in is the length of the French sentence. 2.3 The Complete Translation Model In this section, we extend the translation model to other types of sentence beads. For simplicity, we only consider sentence beads consisting of one English sentence, one French sentence, one English sentence and one French sentence, two English sentences and one French sentence, and one English sentence and two French sentences. We refer to these as 1:0, 0:1, 1:1, 2:1, and 1:2 sentence beads, respectively. For 1:1 sentence beads, we take where B ranges over beadings consistent with [E; F] and where p1:1 is the probability of generating a 1:1 sentence bead. To model 1:0 sentence beads, we use a similar equation except that we only use 1:0 word beads, and we do not need to sum over beadings since there is only one word beading consistent with a 1:0 sentence bead. We take Notice that n = I. We use an analogous equation for 0:1 sentence beads. For 2:1 sentence beads, we take Due to space limitations, we cannot describe the implementation in full detail. We present its most significant characteristics in this section; for a more complete discussion please refer to (Chen, 1993). We chose to model sentence length using a Poisson distribution, i.e., we took for some Aim, and analogously for the other types of sentence beads. At first, we tried to estimate each A parameter independently, but we found that after training one or two A would be unnaturally small or large in order to specifically model very short or very long sentences. To prevent this phenomenon, we tied the A values for the different types of sentence beads together. We took To model the parameters p(L) representing the probability that the bilingual corpus is L sentence beads in length, we assumed a uniform distribution.' This allows us to ignore this term, since length will not influence the probability of an alignment. We felt this was reasonable becau,se it is unclear what a priori information we have on the length of a corpus. In modeling the frequency of word beads, notice that there are five distinct distributions we need to model: the distribution of 1:0 word beads in 1:0 sentence beads, the distribution of 0:1 word beads in 0:1 sentence beads, and the distribution of all word beads in 1:1, 2:1, and 1:2 sentence beads. To reduce the number of independent parameters we need to estimate, we tied these distributions together. We assumed that the distribution of word beads in 1:1, 2:1, and 1:2 sentence beads are identical. We took the distribution of word beads in I To be precise, we assumed a uniform distribution over some arbitrarily large finite range, as one cannot have a uniform distribution over a countably infinite set. 1:0 and 0:1 sentence beads to be identical as well except restricted to the relevant subset of word beads and normalized appropriately, i.e., we took where pe refers to the distribution of word beads in 1:0 sentence beads, pi refers to the distribution of word beads in 0:1 sentence beads, Pb refers to the distribution of word beads in 1:1, 2:1, and 1:2 sentence beads, and Be and B1 refer to the sets of 1:0 and 0:1 word beads in the vocabulary, respectively. The probability of generating a 0:1 or 1:0 sentence bead can be calculated efficiently using the equation given in Section 2.3. To evaluate the probabilities of the other sentence beads requires a sum over an exponential number of word beadings. We make the gross approximation that this sum is roughly equal to the maximum term in the sum. For example, with 1:1 sentence beads we have Even with this approximation, the calculation of PaE; FD is still intractable since it requires a search for the most probable beading. We use a greedy heuristic to perform this search; we are not guaranteed to find the most probable beading. We begin with every word in its own bead. We then find the 0:1 bead and 1:0 bead that, when replaced with a 1:1 word bead, results in the greatest increase in probability. We repeat this process until we can no longer find a 0:1 and 1:0 bead pair that when replaced would increase the probability of the beading. We estimate parameters by using a variation of the Viterbi version of the expectation-maximization (EM) algorithm (Dempster et al., 1977). The Viterbi version is used to reduce computational complexity. We use an incremental variation of the algorithm to reduce the number of passes through the corpus required. In the EM algorithm, an expectation phase, where counts on the corpus are taken using the current estimates of the parameters, is alternated with a maximization phase, where parameters are re-estimated based on the counts just taken. Improved parameters lead to improved counts which lead to even more accurate parameters. In the incremental version of the EM algorithm we use, instead of re-estimating parameters after each complete pass through the corpus, we re-estimate parameters after each sentence. By re-estimating parameters continually as we take counts on the corpus, we can align later sections of the corpus more reliably based on alignments of earlier sections. We can align a corpus with only a single pass, simultaneously producing alignments and updating the model as we proceed. More specifically, we initialize parameters by taking counts on a small body of previously aligned data. To estimate word bead frequencies, we maintain a count c(b) for each word bead that records the number of times the word bead b occurs in the most probable word beading of a sentence bead. We take We initialize the counts c(b) to 1 for 0:1 and 1:0 word beads, so that these beads can occur in beadings with nonzero probability. To enable 1:1 word beads to occur in beadings with nonzero probability, we initialize their counts to a small value whenever we see the corresponding 0:1 and 1:0 word beads occur in the most probable word beading of a sentence bead. To estimate the sentence length parameters A, we divide the number of word beads in the most probable beading of the initial training data by the total number of sentences. This gives us an estimate for A1,0 , and the other A parameters can be calculated using equation (1). We have found that one hundred sentence pairs are sufficient to train the model to a state where it can align adequately. At this point, we can process unaligned text and use the alignments we produce to further train the model. We update parameters based on the newly aligned text in the same way that we update parameters based on the initial training data.2 To align a corpus in a single pass the model must be fairly accurate before starting or else the beginning of the corpus will be poorly aligned. Hence, after bootstrapping the model on one hundred sentence pairs, we train the algorithm on a chunk of the unaligned target bilingual corpus, typically 20,000 sentence pairs, before making one pass through the entire corpus to produce the actual alignment. It is natural to use dynamic programming to search for the best alignment; one can find the most probable of an exponential number of alignments using quadratic time and memory. Alignment can be viewed as a &quot;shortest distance&quot; problem, where the &quot;distance&quot; associated with a sentence bead is the negative logarithm of its probability. The probability of an alignment is inversely related to the sum of the distances associated with its component sentence beads. Given the size of existing bilingual corpora and the computation necessary to evaluate the probability of a sentence bead, a quadratic algorithm is still too profligate. However, most alignments are one-to-one, so we can reap great benefits through intelligent thresholding. By considering only a subset of all possible alignments, we reduce the computation to a linear one. Dynamic programming consists of incrementally finding the best alignment of longer and longer prefixes of the bilingual corpus. We prune all alignment prefixes that have a substantially lower probability than the most probable alignment prefix of the same length. Deletions are automatically handled within the standard dynamic programming framework. However, because of thresholding, we must handle large deletions using a separate mechanism. Because lexical information is used, correct alignments receive vastly greater probabilities than incorrect alignments. Consequently, thresholding is generally very aggressive and our search beam in the dynamic programming array is narrow. However, when there is a large deletion in one of the parallel corpora, consistent lexical correspondences disappear so no one alignment has a much higher probability than the others and our search beam becomes wide. When the search beam reaches a certain width, we take this to indicate the beginning of a deletion. To identify the end of a deletion, we search linearly through both corpora simultaneously. All occurrences of words whose frequency is below a certain value are recorded in a hash table. Whenever we notice the occurrence of a rare word in one corpus and its translation in the other, we take this as a candidate location for the end of the deletion. For each candidate location, we examine the forty sentences following the occurrence of the rare word in each of the two parallel corpora. We use dynamic programming to find the probability of the best alignment of these two blocks of sentences. If this probability is sufficiently high we take the candidate location to be the end of the deletion. Because it is extremely unlikely that there are two very similar sets of forty sentences in a corpus, this deletion identification algorithm is robust. In addition, because we key off of rare words in considering ending points, deletion identification requires time linear in the length of the deletion.
4 Results. Using this algorithm, we have aligned three large English/French corpora. We have aligned a corpus of 3,000,000 sentences (of both English and French) of the Canadian Hansards, a corpus of 1,000,000 sentences of newer Hansard proceedings, and a corpus of 2,000,000 sentences of proceedings from the European Economic Community. In each case, we first bootstrapped the translation model by training on 100 previously aligned sentence pairs. We then trained the model further on 20,000 sentences of the target corpus. Note that these 20,000 sentences were not previously aligned. Because of the very low error rates involved, instead of direct sampling we decided to estimate the error of the old Hansard corpus through comparison with the alignment found by Brown of the same corpus. We manually inspected over 500 locations where the two alignments differed to estimate our error rate on the alignments disagreed upon. Taking the error rate of the Brown alignment to be 0.6%, we estimated the overall error rate of our alignment to be 0.4%. In addition, in the Brown alignment approximately 10% of the corpus was discarded because of indications that it would be difficult to align. Their error rate of 0.6% holds on the remaining sentences. Our error rate of 0.4% holds on the entire corpus. Gale reports an approximate error rate of 2% on a different body of Hansard data with no discarding, and an error rate of 0.4% if 20% of the sentences can be discarded. Hence, with our algorithm we can achieve at least as high accuracy as the Brown and Gale algorithms without discarding any data. This is especially significant since, presumably, the sentences discarded by the Brown and Gale algorithms are those sentences most difficult to align. In addition, the errors made by our algorithm are generally of a fairly trivial nature. We randomly sampled 300 alignments from the newer Hansard corpus. The two errors we found are displayed in Figures 3 and 4. In the first error, Ei was aligned with F1 and E2 was aligned with F2. The correct alignment maps El and E2 to F1 and F2 to nothing. In the second error, E1 was aligned with F1 and F2 was aligned to nothing. Both of these errors could have been avoided with improved sentence boundary detection. Because length-based alignment algorithms ignore lexical information, their errors can be of a more spectacular nature. The rate of alignment ranged from 2,000 to 5,000 sentences of both English and French per hour on an IBM RS/6000 53011 workstation. The alignment algorithm lends itself well to parallelization; we can use the deletion identification mechanism to automatically identify locations where we can subdivide a bilingual corpus. While it required on the order of 500 machine-hours to align the newer Hansard corpus, it took only 1.5 days of real time to complete the job on fifteen machines.
5 Discussion. We have described an accurate, robust, and fast algorithm for sentence alignment. The algorithm can handle large deletions in text, it is language independent, and it is parallelizable. It requires a minimum of human intervention; for each language pair 100 sentences need to be aligned by hand to bootstrap the translation model. The use of lexical information requires a great computational cost. Even with numerous approximations, this algorithm is tens of times slower than the Brown and Gale algorithms. This is acceptable given that alignment is a one-time cost and given available computing power. It is unclear, though, how much further it is worthwhile to proceed. The natural next step in sentence alignment is to account for word ordering in the translation model, e.g., the models described in (Brown et al., 1993) could be used. However, substantially greater computing power is required before these approaches can become practical, and there is not much room for further improvements in accuracy.