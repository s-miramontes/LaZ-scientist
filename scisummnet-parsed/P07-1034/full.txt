1 Introduction. Many natural language processing (NLP) problems such as part-of-speech (POS) tagging, named entity (NE) recognition, relation extraction, and semantic role labeling, are currently solved by supervised learning from manually labeled data. A bottleneck problem with this supervised learning approach is the lack of annotated data. As a special case, we often face the situation where we have a sufficient amount of labeled data in one domain, but have little or no labeled data in another related domain which we are interested in. We thus face the domain adaptation problem. Following (Blitzer et al., 2006), we call the first the source domain, and the second the target domain. The domain adaptation problem is commonly encountered in NLP. For example, in POS tagging, the source domain may be tagged WSJ articles, and the target domain may be scientific literature that contains scientific terminology. In NE recognition, the source domain may be annotated news articles, and the target domain may be personal blogs. Another example is personalized spam filtering, where we may have many labeled spam and ham emails from publicly available sources, but we need to adapt the learned spam filter to an individual user’s inbox because the user has her own, and presumably very different, distribution of emails and notion of spams. Despite the importance of domain adaptation in NLP, currently there are no standard methods for solving this problem. An immediate possible solution is semi-supervised learning, where we simply treat the target instances as unlabeled data but do not distinguish the two domains. However, given that the source data and the target data are from different distributions, we should expect to do better by exploiting the domain difference. Recently there have been some studies addressing domain adaptation from different perspectives (Roark and Bacchiani, 2003; Chelba and Acero, 2004; Florian et al., 2004; Daum´e III and Marcu, 2006; Blitzer et al., 2006). However, there have not been many studies that focus on the difference between the instance distributions in the two domains. A detailed discussion on related work is given in Section 5. In this paper, we study the domain adaptation problem from the instance weighting perspective. In general, the domain adaptation problem arises when the source instances and the target instances are from two different, but related distributions. We formally analyze and characterize the domain adaptation problem from this distributional view. Such an analysis reveals that there are two distinct needs for adaptation, corresponding to the different distributions of instances and the different classification functions in the source and the target domains. Based on this analysis, we propose a general instance weighting method for domain adaptation, which can be regarded as a generalization of an existing approach to semi-supervised learning. The proposed method implements several adaptation heuristics with a unified objective function: (1) removing misleading training instances in the source domain; (2) assigning more weights to labeled target instances than labeled source instances; (3) augmenting training instances with target instances with predicted labels. We evaluated the proposed method with three adaptation problems in NLP, including POS tagging, NE type classification, and spam filtering. The results show that regular semi-supervised and supervised learning methods do not perform as well as our new method, which explicitly captures domain difference. Our results also show that incorporating and exploiting more information from the target domain is much more useful for improving performance than excluding misleading training examples from the source domain. The rest of the paper is organized as follows. In Section 2, we formally analyze the domain adaptation problem and distinguish two types of adaptation. In Section 3, we then propose a general instance weighting framework for domain adaptation. In Section 4, we present the experiment results. Finally, we compare our framework with related work in Section 5 before we conclude in Section 6.
2 Domain Adaptation. In this section, we define and analyze domain adaptation from a theoretical point of view. We show that the need for domain adaptation arises from two factors, and the solutions are different for each factor. We restrict our attention to those NLP tasks that can be cast into multiclass classification problems, and we only consider discriminative models for classification. Since both are common practice in NLP, our analysis is applicable to many NLP tasks. Let X be a feature space we choose to represent the observed instances, and let Y be the set of class labels. In the standard supervised learning setting, we are given a set of labeled instances {(xi, yi)}� i��, where xi ∈ X, yi ∈ Y, and (xi, yi) are drawn from an unknown joint distribution p(x, y). Our goal is to recover this unknown distribution so that we can predict unlabeled instances drawn from the same distribution. In discriminative models, we are only concerned with p(y|x). Following the maximum likelihood estimation framework, we start with a parameterized model family p(y|x; θ), and then find the best model parameter θ* that maximizes the expected log likelihood of the data: Since we do not know the distribution p(x, y), we maximize the empirical log likelihood instead: Note that since we use the empirical distribution p(x, y) to approximate p(x, y), the estimated θ* is dependent on p(x, y). In general, as long as we have sufficient labeled data, this approximation is fine because the unlabeled instances we want to classify are from the same p(x, y). Let us now turn to the case of domain adaptation where the unlabeled instances we want to classify are from a different distribution than the labeled instances. Let ps(x, y) and pt(x, y) be the true underlying distributions for the source and the target domains, respectively. Our general idea is to use ps(x, y) to approximate pt(x, y) so that we can exploit the labeled examples in the source domain. If we factor p(x, y) into p(x, y) = p(y|x)p(x), we can see that pt(x, y) can deviate from ps(x, y) in two different ways, corresponding to two different kinds of domain adaptation: Case 1 (Labeling Adaptation): pt(y|x) deviates from ps(y|x) to a certain extent. In this case, it is clear that our estimation of ps(y|x) from the labeled source domain instances will not be a good estimation of pt(y|x), and therefore domain adaptation is needed. We refer to this kind of adaptation as function/labeling adaptation. Case 2 (Instance Adaptation): pt(y|x) is mostly similar to ps(y|x), but pt(x) deviates from ps(x). In this case, it may appear that our estimated ps(y|x) can still be used in the target domain. However, as we have pointed out, the estimation of ps(y|x) depends on the empirical distribution �ps(x, y), which deviates from pt(x, y) due to the deviation of ps(x) from pt(x). In general, the estimation of ps(y|x) would be more influenced by the instances with high ps(x, y) (i.e., high J5s(x)). If pt(x) is very different from ps(x), then we should expect pt(x, y) to be very different from ps(x, y), and therefore different from J5s(x, y). We thus cannot expect the estimated ps(y|x) to work well on the regions where pt(x, y) is high, but ps(x, y) is low. Therefore, in this case, we still need domain adaptation, which we refer to as instance adaptation. Because the need for domain adaptation arises from two different factors, we need different solutions for each factor. If pt(y|x) deviates from ps(y|x) to some extent, we have one of the following choices: It may be the case that if we change the representation of the instances, i.e., if we choose a feature space X0 different from X, we can bridge the gap between the two distributions ps(y|x) and pt(y|x). For example, consider domain adaptive NE recognition where the source domain contains clean newswire data, while the target domain contains broadcast news data that has been transcribed by automatic speech recognition and lacks capitalization. Suppose we use a naive NE tagger that only looks at the word itself. If we consider capitalization, then the instance Bush is represented differently from the instance bush. In the source domain, ps(y = Person|x = Bush) is high while ps(y = Person|x = bush) is low, but in the target domain, pt(y = Person|x = bush) is high. If we ignore the capitalization information, then in both domains p(y = Person|x = bush) will be high provided that the source domain contains much fewer instances of bush than Bush. Adaptation through prior: When we use a parameterized model p(y|x; θ) to approximate p(y|x) and estimate θ based on the source domain data, we can place some prior on the model parameter θ so that the estimated distribution p(y|x; B) will be closer to pt(y|x). Consider again the NE tagging example. If we use capitalization as a feature, in the source domain where capitalization information is available, this feature will be given a large weight in the learned model because it is very useful. If we place a prior on the weight for this feature so that a large weight will be penalized, then we can prevent the learned model from relying too much on this domain specific feature. Instance pruning: If we know the instances x for which pt(y|x) is different from ps(y|x), we can actively remove these instances from the training data because they are “misleading”. For all the three solutions given above, we need either some prior knowledge about the target domain, or some labeled target domain instances; from only the unlabeled target domain instances, we would not know where and why pt(y|x) differs from ps(y|x). In the case where pt(y|x) is similar to ps(y|x), but pt(x) deviates from ps(x), we may use the (unlabeled) target domain instances to bias the estimate of ps(x) toward a better approximation of pt(x), and thus achieve domain adaptation. We explain the idea below. Our goal is to obtain a good estimate of θt that is optimized according to the target domain distribution pt(x, y). The exact objective function is thus Our idea of domain adaptation is to exploit the labeled instances in the source domain to help obtain B� t . Let Ds = {(xsi, ysi )}Ns i=1 denote the set of labeled instances we have from the source domain. Assume that we have a (small) set of labeled and a (large) set of unlabeled instances from the target domain, denoted by Dt,l = {(xt,l k=1 , respectively. We now show three ways to approximate the objective function above, corresponding to using three different sets of instances to approximate the instance space X. Using Ds: Using ps(y|x) to approximate pt(y|x), we obtain Here we use only the labeled instances in Ds but we adjust the weight of each instance by pt(x) ps(x). The major difficulty is how to accurately estimate pt(x) Note that this is the standard supervised learning method using only the small amount of labeled target instances. The major weakness of this approximation is that when Nt,l is very small, the estimation is not accurate. The challenge here is that pt(y|xt,u k ; B) is unknown to us, thus we need to estimate it. One possibility is to approximate it with a model B� learned from Ds and Dt,l. For example, we can set pt(y|x, B) = p(y|x; B). Alternatively, we can also set pt(y|x, B) to 1 if y = arg maxy0 p(y'|x; B) and 0 otherwise.
3 A Framework of Instance Weighting for Domain Adaptation. The theoretical analysis we give in Section 2 suggests that one way to solve the domain adaptation problem is through instance weighting. We propose a framework that incorporates instance pruning in Section 2.2 and the three approximations in Section 2.3. Before we show the formal framework, we first introduce some weighting parameters and explain the intuitions behind these parameters. First, for each (xsi , ysi ) E Ds, we introduce a parameter αi to indicate how likely pt(ys i |xsi) is close to ps(ysi |xsi ). Large αi means the two probabilities are close, and therefore we can trust the labeled instance (xsi , ysi ) for the purpose of learning a classifier for the target domain. Small αi means these two probabilities are very different, and therefore we should probably discard the instance (xsi , ysi ) in the learning process. Second, again for each (xsi, ysi ) E Ds, we introduce another parameter Qi that ideally is equal to pt(xs i ) ps(xs i ). From the approximation in Section 2.3 that uses only Ds, it is clear that such a parameter is useful. Next, for each xt,u i E Dt,u, and for each possible label y E Y, we introduce a parameter -yi(y) that indicates how likely we would like to assign y as a tentative label to xt,u iand include (xt,u i , y) as a training example. Finally, we introduce three global parameters As, At,l and At,u that are not instance-specific but are associated with Ds, Dt,l and Dt,u, respectively. These three parameters allow us to control the contribution of each of the three approximation methods in Section 2.3 when we linearly combine them together. We now formally define our instance weighting framework. Given Ds, Dt,l and Dt,u, to learn a classifier for the target domain, we find a parameter B that optimizes the following objective function: last term, log p(θ), is the log of a Gaussian prior distribution of θ, commonly used to regularize the complexity of the model. In general, we do not know the optimal values of these parameters for the target domain. Nevertheless, the intuitions behind these parameters serve as guidelines for us to design heuristics to set these parameters. In the rest of this section, we introduce several heuristics that we used in our experiments to set these parameters. Following the intuition that if pt(y|x) differs much from ps(y|x), then (x, y) should be discarded from the training set, we use the following heuristic to set αs. First, with standard supervised learning, we train a model 0t,l from Dt,l. We consider p(y|x; �θt,l) to be a crude approximation of pt(y|x). Then, we classify {xsi jNs i�1using �θt,l. The top k instances that are incorrectly predicted by �θt,l (ranked by their prediction confidence) are discarded. In another word, αsi of the top k instances for which ysi =� arg maxy p(y|xsi ; �θt,l) are set to 0, and αi of all the ces are set to 1. other source instan Accurately setting involves accurately estimating and pt(x) from the empirical distributions. For many NLP classification tasks, we do not have a good parametric model for p(x). We thus need to resort to non-parametric density estimation methods. However, for many NLP tasks, x resides in a high dimensional space, which makes it hard to apply standard non-parametri c density estimation meth268 ods. We have not explored this direction, and in our experiments, we set to 1 for all source instan and control the balance among the three sets of instances. Using standard supervised learning, and are set proportionally to and that is, each instance is weighted the same whether it is in or in and is set to 0. Similarly, using standard bootstrapping, training set is also weighted the same as a source instance. In neither case are the target instances emphasize more than source instances. However, for domain adaptation, we want to focus more on the target domain instances. So intuitively, we want to make and somehow larger relative to As we will show in Section 4, this is indeed beneficial. In general, the framework provides great flexibility for implementing different adaptation strategies through these instan ce weighting parameters.
4 Experiments. highest prediction confidence. For these instances, we set = 1 for y = arg maxy, and = 0 for all other y. In another word, we select the top k confidently predicted instances, and include these instances together with their predicted labels in the training set. All other instances in are not considered. In our experi sidered this bootstrapping way of setting γ. We chose three different NLP tasks to evaluate our instan ce weighting method for domain adaptation. The first task is POS tagging, for which we used 6166 WSJ sentences from Sections 00 and 01 of Penn Treebank as the source domain data, and 2730 PubMed sentences from the Oncology section of the PennBioIE corpus as the target domain data. The second task is entity type classification. The setup is very similar to Daum´e III and Marcu (2006). We assume that the entity boundaries have been correctly identified, and we want to classify the types of the entities. We used ACE 2005 training data for this task. For the source domain, we used the newswire collection, which contains 11256 examples, and for the target domains, we used the weblog (WL) collection (5164 examples) and the conversational telephone speech (CTS) collection (4868 examples). The third task is personalized spam filtering. We used the ECML/PKDD 2006 discovery challenge data set. The source domain contains 4000 spam and ham emails from publicly available sources, and the target domains are three individual users’ inboxes, each containing 2500 emails. For each task, we consider two experiment settings. In the first setting, we assume there are a small number of labeled target instances available. For POS tagging, we used an additional 300 Oncology sentences as labeled target instances. For NE typing, we used 500 labeled target instances and 2000 unlabeled target instances for each target domain. For spam filtering, we used 200 labeled target instances and 1800 unlabeled target instances. In the second setting, we assume there is no labeled target instance. We thus used all available target instances for testing in all three tasks. We used logistic regression as our model of p(ylx; 0) because it is a robust learning algorithm and widely used. We now describe three sets of experiments, corresponding to three heuristic ways of setting a, At,l and At,,,. In the first set of experiments, we gradually remove “misleading” labeled instances from the source domain, using the small number of labeled target instances we have. We follow the heuristic we described in Section 3.1, which sets the a for the top k misclassified source instances to 0, and the a for all the other source instances to 1. We also set At,l and At,l to 0 in order to focus only on the effect of removing “misleading” instances. We compare with a baseline method which uses all source instances with equal weight but no target instances. The results are shown in Table 1. From the table, we can see that in most experiments, removing these predicted “misleading” examples improved the performance over the baseline. In some experiments (Oncology, CTS, u00, u01), the largest improvement was achieved when all misclassified source instances were removed. In the case of weblog NE type classification, however, removing the source instances hurt the performance. A possible reason for this is that the set of labeled target instances we use is a biased sample from the target domain, and therefore the model trained on these instances is not always a good predictor of “misleading” source instances. The second set of experiments is to add the labeled target domain instances into the training set. This corresponds to setting At,l to some non-zero value, but still keeping At,,, as 0. If we ignore the domain difference, then each labeled target instance is weighted the same as a labeled source instance (Au,l �s= Cu,l ), which is what happens in regular suCs pervised learning. However, based on our theoretical analysis, we can expect the labeled target instances to be more representative of the target domain than the source instances. We can therefore assign higher weights for the target instances, by adjusting the ratio between At,l and A, In our experiments, we set �t,l Cs , where a ranges from 2 to 20. The results are shown in Table 2. As shown from the table, adding some labeled target instances can greatly improve the performance for all tasks. And in almost all cases, weighting the target instances more than the source instances performed better than weighting them equally. We also tested another setting where we first removed the “misleading” source examples as we showed in Section 4.2, and then added the labeled target instances. The results are shown in the last row of Table 2. However, although both removing “misleading” source instances and adding labeled target instances work well individually, when combined, the performance in most cases is not as good as when no source instances are removed. We hypothesize that this is because after we added some labeled target instances with large weights, we already gained a good balance between the source data and the target data. Further removing source instances would push the emphasis more on the set of labeled target instances, which is only a biased sample of the whole target domain. The POS data set and the CTS data set have previously been used for testing other adaptation methods (Daum´e III and Marcu, 2006; Blitzer et al., 2006), though the setup there is different from ours. Our performance using instance weighting is comparable to their best performance (slightly worse for POS and better for CTS). In the third set of experiments, we assume that we do not have any labeled target instances. We tried two bootstrapping methods. The first is a standard bootstrapping method, in which we gradually added the most confidently predicted unlabeled target instances with their predicted labels to the training set. Since we believe that the target instances should in general be given more weight because they better represent the target domain than the source instances, in the second method, we gave the added target instances more weight in the objective function. In particular, we set At,,, = as such that the total contribution of the added target instances is equal to that of all the labeled source instances. We call this second method the balanced bootstrapping method. Table 3 shows the results. As we can see, while bootstrapping can generally improve the performance over the baseline where no unlabeled data is used, the balanced bootstrapping method performed slightly better than the standard bootstrapping method. This again shows that weighting the target instances more is a right direction to go for domain adaptation.
5 Related Work. There have been several studies in NLP that address domain adaptation, and most of them need labeled data from both the source domain and the target domain. Here we highlight a few representative ones. For generative syntactic parsing, Roark and Bacchiani (2003) have used the source domain data to construct a Dirichlet prior for MAP estimation of the PCFG for the target domain. Chelba and Acero (2004) use the parameters of the maximum entropy model learned from the source domain as the means of a Gaussian prior when training a new model on the target data. Florian et al. (2004) first train a NE tagger on the source domain, and then use the tagger’s predictions as features for training and testing on the target domain. The only work we are aware of that directly modmore weights are put on the target instances in the objective function than in standard bootstrapping. els the different distributions in the source and the target domains is by Daum´e III and Marcu (2006). They assume a “truly source domain” distribution, a “truly target domain” distribution, and a “general domain” distribution. The source (target) domain data is generated from a mixture of the “truly source (target) domain” distribution and the “general domain” distribution. In contrast, we do not assume such a mixture model. None of the above methods would work if there were no labeled target instances. Indeed, all the above methods do not make use of the unlabeled instances in the target domain. In contrast, our instance weighting framework allows unlabeled target instances to contribute to the model estimation. Blitzer et al. (2006) propose a domain adaptation method that uses the unlabeled target instances to infer a good feature representation, which can be regarded as weighting the features. In contrast, we weight the instances. The idea of using ����� ����� to weight instances has been studied in statistics (Shimodaira, 2000), but has not been applied to NLP tasks.
6 Conclusions and Future Work. Domain adaptation is a very important problem with applications to many NLP tasks. In this paper, we formally analyze the domain adaptation problem and propose a general instance weighting framework for domain adaptation. The framework is flexible to support many different strategies for adaptation. In particular, it can support adaptation with some target domain labeled instances as well as that without any labeled target instances. Experiment results on three NLP tasks show that while regular semi-supervised learning methods and supervised learning methods can be applied to domain adaptation without considering domain difference, they do not perform as well as our new method, which explicitly captures domain difference. Our results also show that incorporating and exploiting more information from the target domain is much more useful than excluding misleading training examples from the source domain. The framework opens up many interesting future research directions, especially those related to how to more accurately set/estimate those weighting parameters.
Acknowledgments. This work was in part supported by the National Science Foundation under award numbers 0425852 and 0428472. We thank the anonymous reviewers for their valuable comments.