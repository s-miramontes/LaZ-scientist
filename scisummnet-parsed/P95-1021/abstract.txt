designed to share some of the advantages of TAG while overcoming some its limitations. two composition operations called subsertion and sister-adjunction. The most distinctive feaof that, unlike TAG, there is complete uniformity in the way that the relate lexical items: subsertion always corresponds to complementation and sister-adjunction to modi- Furthermore, unlike TAG, provide a uniform analysis for whmovement in English and Kashmiri, despite the fact that the wh element in Kashmiri appears in sentence-second position, and not sentence-initial position as in English. We define a new grammar formalism, called D-Tree arises from work on Tree- Adjoining Grammars (TAG) (Joshi et al., 1975). A salient feature of TAG is the extended domain of locality it provides. Each elementary structure can be associated with a lexical item (as in Lexicalized (LTAG) (Joshi & 1991)). Properties related to the lexical item (such as subcategorization, agreement, certain types of word order variation) can be expressed within the elementary struc- (Kroch, 1987; Frank, 1992). In addition, remain tractable, yet their generative capacity is sufficient to account for certain syntactic phenomena that, it has been argued, lie beyond Context-Free Grammars (CFG) (Shieber, 1985). TAG, however, has two limitations which provide the motivation for this The first problem (discussed in Section that the of substitution and adjunction do not map cleanly onto the relations of complementation and modification. A second problem (discussed in Section 1.2) has to do with the of provide analyses for certain syntactic phenomena. In developing DTG we have tried to overcome these problems while remaining faithto what we see as the key advantages of particular, its enlarged domain of locality). In Section 1.3 we introduce some of the key features of explain how they are intended to address problems that we have identified with 1.1 Derivations and Dependencies operations of substitution and adjunction relate two lexical items. It is therefore natural to interpret these operations as establishing a direct linguistic relation between the two lexical items, namely a relation of complementation (predicateargument relation) or of modification. In purely CFG-based approaches, these relations are only implicit. However, they represent important linguistic intuition, they provide a uniform interface to semantics, and they are, as Schabes & Shieber (1994) argue, important in order to support statistical parameters in stochastic frameworks and appropriate constraints in many frameworks, complementation and modification are in fact made & Kaplan, 1982) provides a separate functional (f-) structure, and dependency grammars (see e.g. Mel'euk (1988)) use these notions as the principal basis for syntactic representation. We will follow the dependency literature in referring to complementation and modification as syntactic dependency. As observed by Rambow and Joshi (1992), for TAG, the importance of the dependency structure means that not only the derived phrase-structure tree is of interest, but also the operations by which we obtained it from elementary structures. This information is encoded in the derivation tree (Vijay-Shanker, 1987). However, as Vijay-Shanker (1992) observes, the operations are not used uniformly: while substitution is used only to add a (nominal) complement, adjunction is used both for modification and (clausal) complementation. Clausal complementation could not be handled uniformly by substitution because of the existence of syntactic such as in English. Furthermore, there is an inconsistency in 151 the directionality of the operations used for complementation in TAG@: nominal complements are substituted into their governing verb's tree, while the governing verb's tree is adjoined into its own clausal complement. The fact that adjunction and substitution are used in a linguistically heterogeneous manner means that (standard) TAG derivation trees do not provide a good representation of the dependencies between the words of the sentence, i.e., of the predicate-argument and modification structure. adore SUBJ COMP Figure 1: Derivation trees for (1): original definition (left); Schabes & Shieber definition (right) For instance, English sentence (1) gets the derivation structure shown on the left in Figure 1'. spicy hotdogs he claims Mary seems to adore When comparing this derivation structure to the dependency structure in Figure 2, the following problems become apparent. First, both adjectives deon in the derivation structure is daughter of addition, deon does its nominal argument, on the derivation strucis daughter of direction does express the actual dependency), and also daughter of neither is an argument of the other). claim SUBOMP he seem I COMP adore Mary hotdog </LOD spicy small Figure 2: Dependency tree for (1) Schabes & Shieber (1994) solve the first problem 'For clarity, we depart from standard TAG notational practice and annotate nodes with lexemes and arcs with grammatical function. by distinguishing between the adjunction of modifiers and of clausal complements. This gives us the derivation structure shown on the right in Figure 1. While this might provide a satisfactory treatment of modification at the derivation level, there are now three types of operations (two adjunctions and substitution) for two types of dependencies (arguments and modifiers), and the directionality problem for embedded clauses remains unsolved. defining have attempted to resolve these problems with the use of a single operation (that we call subsertion) for handling all complementation and a second operation (called sisteradjunction) for modification. Before discussion these operations further we consider a second problem with TAG that has implications for the design of these new composition operations (in particular, subsertion). 1.2 Problematic Constructions for TAG be used to provide suitable analyses for certain syntactic phenomena, including longdistance scrambling in German (Becker et al., 1991), Romance Clitics (Bleam, 1994), wh-extraction out of complex picture-NPs (Kroch, 1987), and Kashmiri wh-extraction (presented here). The problem in describing these phenomena with TAG arises from the fact (observed by Vijay-Shanker (1992)) that adjoining is an overly restricted way of combining structu- We illustrate the problem by considering Kashon Bhatt (1994). extraction in Kashmiri proceeds as in English, except that the wh-word ends up in sentence-second position, with a topic from the matrix clause in sentence-initial position. This is illustrated in (2a) for a simple clause and in (2b) for a complex clause. (2) rameshan kyaa dyutnay tse RameshERG whatNom gave youoAr What did you give Ramesh? b. rameshan kyaa, chu baasaan what is believeNPertthat kor 'ERG do What does Ramesh believe that I did? Since the moved element does not appear in sentence-initial position, the TAG analysis of English wit-extraction of Kroch (1987; 1989) (in which the matrix clause is adjoined into the embedded clause) cannot be transferred, and in fact no linguistically plausible TAG analysis appears to be available. In the past, variants of TAG have been developed to extend the range of possible analyses. In Multi-Component TAG (MCTAG) (Joshi, 1987), trees are grouped into sets which must be adjoined to- (multicomponent adjunction). However, MCexpressive power since, while syntactic relations are invariably subject to c-command or dominance constraints, there is no way to state that Mary OBJ hotdog claim SUBJ spicyhe I MOD small adore COMP COMP Mary OBJ seem hotdog claim MOD SUBJ spicy small he COMP seamSUBJ 152 two trees from a set must be in a dominance relain the derived tree. Domination et al., 1991) are multicomponent systems that allow for the expression of dominance constraints. However, MCTAG-DL share a further problem with MCTAG: the derivation structures cannot be given a linguistically meaningful interpretation. Thus, they fail to address the first prowe discussed (in Section 1.3 The DTG Approach Vijay-Shanker (1992) points out that use of adjunction for clausal complementation in TAG corresponds, at the level of dependency structure, to substitution at the foot node' of the adjoined tree. However, adjunction (rather than substitution) is used since, in general, the structure that is substituted may only form part of the clausal complement: the remaining substructure of the clausal complement appears above the root of the adjoined tree. Unfortunately, as seen in the examples given in Section 1.2, there are cases where satisfactory analyses cannot be obtained with adjunction. In particular, using adjunction in this way cannot handle cases in which parts of the clausal complement are required to be placed within the structure of the adjoined tree. of subsertion is designed to overcome this limitation. Subsertion can be viewed as a generalization of adjunction in which components of the clausal complement (the subserted structure) which are not substituted can be interspersed within the structure that is the site of the subsertion. Following earlier work (Becker et al., Vijay-Shanker, 1992), a mechanism involving the use of domination links (d-edges) that ensure that parts of the subserted structure that are not substituted dominate those parts that are. Furthermore, there is a need to constrain the way in which the non-substituted components can be interspersed'. This is done by either using appropriate feature constraints at nodes or by means of subsertion-insertion constraints (see Section 2). We end this section by briefly commenting on the of sister-adjunction. In TAG, modification is performed with adjunction of modifier trees that have a highly constrained form. In particular, the foot nodes of these trees are always daughters of the root and either the leftmost or rightmost frontier nodes. The effect of adjoining a these cases the foot node is an argument node of the lexical anchor. 'This was also observed by Rambow (1994a), where integrity constraint (first defined for an of TAG (Becker etal., 1991)) is defined for a MCTAG-DL version called V-TAG. However, this was found to be insufficient for treating both long-distance scrambling and long-distance topicalization in German. V-TAG retains adjoining (to handle topicalization) for this reason. tree of this form corresponds (almost) exactly to the addition of a new (leftmost or rightmost) subtree below the nede that was the site of the adjunction. this reason, we have equipped an operation (sister-adjunction) that does exactly this and more. From the definition of Section 2 it can be seen that the essential aspects of Schabes & Shieber (1994) treatment for modification, including multiple modifications of a phrase, be captured by using this defining Section 2, we discuss, in Section 3, DTG analyses for the English and Kashmiri data presented in this section. Section 4 briefly algorithms. 2 Definition of D-Tree Grammars d-tree is a tree with two types of domination edges (d-edges) and immediate domination edges (i-edges). D-edges and i-edges express domination and immediate domination relations between nodes. These relations are never rescinded when dtrees are composed. Thus, nodes separated by an i-edge will remain in a mother-daughter relationship throughout the derivation, whereas nodes separated by an d-edge can be equated or have a path of any length inserted between them during a derivation. D-edges and i-edges are not distributed arbitrarily in d-trees. For each internal node, either all of its daughters are linked by i-edges or it has a single daughter that is linked to it by a d-edge. Each node is labelled with a terminal symbol, a nonterminal or the empty string. containing n can be decomposed into n + 1 containing only i-edges. D-trees can be composed using two operations: subsertion and sister-adjunction. When a d-tree is subserted into another d-tree component of a is substituted at a frontier nonterminal node (a node) and all components of a that are above the substituted component are inserted into d-edges above the substituted node or placed above the root node. For example, consider the d-trees a and shown in Figure 3. Note that components are shown as triangles. In the composed d-tree 7 the component a(5) is substituted at a substitution node in /3. The components, a(1), a(2), and a(4) of a above a(5) drift up the path in which runs from the substitution node. These are then into in # or above the root of #. In general, when a component some d-tree a is inserted into a d-edge betnodes and two new d-edges are created, the first of which relates and the root node of the second of which relates the frontier 'Santorini and Mahootian (1995) provide additional evidence against the standard TAG approach to modification from code switching data, which can be accounted for by using sister-adjunction. 153 Figure 3: Subsertion node of a(i) that dominates the substituted comto is possible for components above the substituted node to drift arbitrarily far up the d-tree and distribute themselves within domination edges, or above the root, in any way that is compatible with the domination relationships present in the d-tree. a mechanism called constraints control what can appear within d-edges (see below). The second composition operation involving dtrees is called sister-adjunction. When a d-tree a is at a node ri in a d-tree the comd-tree from the addition to fl of a as a new leftmost or rightmost sub-d-tree below that sister-adjunction involves the addition of exactly one new immediate domination edge and that several sister-adjunctions can occur at the same constraints where d-trees can be sister-adjoined and whether they will be rightor left-sister-adjoined (see below). DTG a four tuple G = , VT S, D) the usual nonterminal and termialphabets, a distinguished nonterand a finite set of DTG said to be each d-tree in the grammar has at least one terminal node. The d-trees of a grammar two additional annotations: subsertion-insertion constraints and sister-adjoining constraints. These will be described below, but first we define simultaneously and subsertion-adjoining trees (SAtrees), which are partial derivation structures that can be interpreted as representing dependency in