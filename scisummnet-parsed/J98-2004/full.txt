. Best-first parsing methods for natural language try to parse efficiently by considering the most likely constituents first. Some figure of merit is needed by which to compare the likelihood of constituents, and the choice of this figure has a substantial impact on the efficiency of the parser. While several parsers described in the literature have used such techniques, there is little published data on their efficacy, much less attempts to judge their relative merits. We propose and evaluate several figures of merit for best-first parsing, and we identify an easily computable figure of merit that provides excellent performance on various measures and two different grammars.
1.. Chart parsing is a commonly used algorithm for parsing natural language texts. The chart is a data structure that contains all of the constituents for which subtrees have been found, that is, constituents for which a derivation has been found and which may therefore appear in some complete parse of the sentence. The agenda is a structure that stores a list of constituents for which a derivation has been found but which have not yet been combined with other constituents. Initially, the agenda contains the terminal symbols from the sentence to be parsed. A constituent is removed from the agenda and added to the chart, and the system considers how this constituent can be used to extend its current structural hypothesis by combining with other constituents in the chart according to the grammar rules. (We will often refer to these expansions of rules as &quot;edges&quot;) In general this can lead to the creation of new, more encompassing constituents, which themselves are then added to the agenda. When one constituent has been processed, a new one is chosen to be removed from the agenda, and so on. Traditionally, the agenda is represented as a stack, so that the last item added to the agenda is the next one removed. Chart parsing is described extensively in the literature; for one such discussion see 'Section 1.4 of Charniak (1993). Best-first probabilistic chart parsing is a variation of chart parsing that attempts to find the most likely parses first, by adding constituents to the chart in order of the likelihood that they will appear in a correct parse, rather than simply popping constituents off of a stack. Some probabilistic figure of merit is assigned to the constituents on the agenda, and the constituent maximizing this value is the next to be added to the chart. In this paper we consider probabilities primarily based on probabilistic contextfree grammars, though in principle, other, more complicated schemes could be used. The purpose of this work is to compare how well several figures of merit select Constituent Nj'A in a sentence ton. constituents to be moved from the agenda to the chart. Ideally, we would like to use as our figure of merit the conditional probability of that constituent, given the entire sentence, in order to choose a constituent that not only appears likely in isolation, but is most likely given the sentence as a whole; that is, we would like to pick the constituent that maximizes the following quantity: where to, is the sequence of the n tags, or parts of speech, in the sentence (numbered to,. • • tn-1), and Nip( is a nonterminal of type i covering terms tj tk_i. (See Figure 1.) In our experiments, we use only tag sequences (as given in the test data) for parsing. More accurate probability estimates should be attainable using lexical information in future experiments, as more detail usually leads to better statistics, but lexicalized figures of merit are beyond the scope of the research described here. Note that our &quot;ideal&quot; figure is simply a heuristic, since there is no guarantee that a constituent that scores well on this measure will appear in the correct parse of a sentence. For example, there may be a very large number of low-probability derivations of N' 1c, which are combined here to give a high value, but a parse of the 1, sentence can only include one of these derivations, making it unlikely that 1\141,k appears in the most probable parse of the sentence. On the other hand, there is no reason to believe that such cases are common in practice. We cannot calculate p(Nk I to,), since in order to do so, we would need to completely parse the sentence. In this paper, we examine the performance of several proposed figures of merit that approximate it in one way or another, using two different grammars. We identify a figure of merit that gives superior results on all of our performance measures and on both grammars. Section 2 of this paper describes the method we used to determine the effectiveness of figures of merit, that is, to compare how well they choose constituents to be moved from the agenda to the chart. Section 2.1 explains the experiment, Section 2.2 describes the measures we used to compare the performance of the figures of merit, and Section 2.3 describes a model we used to represent the performance of a traditional parser using a simple stack as an agenda. In Section 3, we describe and compare three simple and easily computable figures of merit based on inside probability. Sections 3.1 through 3.3 describe each figure in detail, and Section 3.4 presents the results of an experiment comparing these three figures. Sections 4 and 5 have a similar structure to Section 3, with Section 4 evaluating two figures of merit using statistics on the left-side context of the constituent, and Section 5 evaluating three additional figures of merit using statistics on the context on both sides of the constituent. Section 6 contains a table summarizing the results from Sections 3, 4, and 5. In Section 7, we use another grammar in the experiment, to verify that our results are not an artifact of the grammar used for parsing. Section 8 describes previous work in this area, and Section 9 presents our conclusions and recommendations. There are also three appendices to this paper. Appendix A gives our method for computing inside probability estimates while maintaining parser speed. Appendix B explains how we obtained our boundary statistics used in Section 5. Appendix C presents data comparing the parsing accuracy obtained by each of our parsers as the number of edges they create increases.
2.. We used as our first grammar a probabilistic context-free grammar learned from the Brown corpus (see Francis and Kiera [1982] for a description of the Brown Corpus, and Carroll and Charniak [1992a, 199213], and Charniak and Carroll [1994] for grammar and training details). This grammar contains about 5,000 rules using 32 terminal and nonterminal symbols. We parsed 500 sentences of length 3 to 30 (including punctuation) from the Penn Treebank Wall Street Journal corpus (Marcus, Santorini, and Marcinkiewicz 1993) using a best-first parsing method and various estimates for p(I\/;), to,n ) as the figure of merit. For each figure of merit, we compared the performance of best-first parsing using that figure of merit to exhaustive parsing. By exhaustive parsing, we mean continuing to parse until there are no more constituents available to be added to the chart. We parse exhaustively to determine the total probability of a sentence, that is, the sum of the probabilities of all parses found for that sentence. We then computed several quantities for best-first parsing with each figure of merit at the point where the best-first parsing method has found parses contributing at least 95% of the probability mass of the sentence. The 95% figure is simply a convenience; see Appendix C for a discussion of speed versus accuracy. We compared the figures of merit using the following measures: includes only words within the constituent. The statistics converged to their final values quickly. The edge-count percentages were generally within .01 of their final values after processing only 200 sentences, so the results were quite stable by the end of our 500-sentence test corpus. We gathered statistics for each sentence length from 3 to 30. Sentence length was limited to a maximum of 30 because of the huge number of edges that are generated in doing a full parse of long sentences; using this grammar, sentences in this length range have produced up to 130,000 edges. As a basis for comparison, we measured the CPU time for a non-best-first version of the parser to completely parse all 500 sentences. The CPU time needed by this version of the parser was 4,882 seconds. For a best-first version of the parser to be useful, it must be able to find the most probable parse (or a reasonably good parse, depending on the application) in less than this amount of time. Here, for the best-first parsers, we will use for convenience the time needed to get 95% of the sentence's total probability mass.
3.. It seems reasonable to base a figure of merit on the inside probability 0 of the constituent. Inside probability is defined as the probability of the words or tags in the constituent given that the constituent is dominated by a particular nonterminal symbol; see Figure 2. This seems to be a reasonable basis for comparing constituent probabilities, and has the additional advantage that it is easy to compute during chart parsing. Appendix A gives details of our on-line computation of 0. The inside probability of the constituent Nip( is defined as: where Ni represents the ith nonterminal symbol. a includes the entire context of the constituent. In terms of our earlier discussion, our &quot;ideal&quot; figure of merit can be rewritten as: We apply the usual independence assumption that given a nonterminal, the tag sequence it generates depends only on that nonterminal, giving: The first term in the numerator is just the definition of the outside probability a of the constituent. Outside probability a of a constituent Nip< is defined as the probability of that constituent and the rest of the words in the sentence (or rest of the tags in the tag sequence, in our case); see Figure 3. In this equation, we can see that a(Nihk) and p(to,n) represent the influence of the surrounding words. Thus using 13 alone assumes that a and p(to,n) can be ignored. We will refer to this figure of merit as straight 0. One side effect of omitting the a and p(to,n) terms in the straight j3 figure above is that inside probability alone tends to prefer shorter constituents to longer ones, as the inside probability of a longer constituent involves the product of more probabilities. This can result in a &quot;thrashing&quot; effect as noted in Chitrao and Grishman (1990), where the system parses short constituents, even very low-probability ones, while avoiding combining them into longer constituents. To avoid thrashing, some technique is used to normalize the inside probability for use as a figure of merit. One approach is to take the geometric mean of the inside probability, to obtain a per-word inside probability. (In the &quot;ideal&quot; model, the p(to,n) term acts as a normalizing factor.) The per-word inside probability of the constituent Nip( is calculated as: k-0(N.11,k). We will refer to this figure as normalized 13. An alternative way to rewrite the &quot;ideal&quot; figure of merit is as follows: Once again applying the usual independence assumption that given a nonterminal, the tag sequence it generates depends only on that nonterminal, we can rewrite the figure of merit as follows: To derive an estimate of this quantity for practical use as a figure of merit, we make some additional independence assumptions. We assume that p(Kk I tod, tk,n) 19(1\111,k), that is, that the probability of a nonterminal is independent of the tags before and after it in the sentence. We also use a trigram model for the tags themselves, giving We can calculate 13(Nk) as usual. The p(N1) term is estimated from our PCFG and the training data from which the grammar was learned. We estimate p(N9 as the sum of the counts for all rules having N' as their left-hand side, divided by the sum of the counts for all rules.1 The p(ti,k I ti-2,t1_1) term is just the probability of the tag sequence t1. tk_i according to a trigram model. (Technically, this is not a trigram model but a tritag model, since we are considering sequences of tags, not words.) Our tritag probabilities p(ta I ta-2, ta_i ) were learned from the training data used for the grammar, using Nonzero-length edges for 95% of the probability mass for the 0 estimates. the deleted interpolation method for smoothing. Our figure of merit uses: We refer to this figure of merit as the trigram estimate. The results for the three figures of merit introduced in the last section according to the measurements given in Section 2.2 are shown in Table 1 (the time to fully parse using the &quot;stack&quot; model is included for easy reference). Figure 4 expands the %non-0 E data to show the percent of nonzero-length edges needed to get 95% of the probability mass for each sentence length. Straight 13 performs quite poorly on this measure. In order to find 95% of the probability mass for a sentence, a parser using this figure of merit typically needs to do over 90% of the work. On the other hand, normalized 13 and the trigram estimate both result in substantial savings of work. However, while these two models produce Average CPU time for 95% of the probability mass for the 0 estimates. near-equivalent performance for short sentences, for longer sentences, with length greater than about 15 words, the trigram estimate gains a clear advantage. In fact, the performance of normalized 13 appears to level off in this range, while the amount of work done using the trigram estimate shows a continuing downward trend. Figure 5 shows the average CPU time to get 95% of the probability mass for each estimate and each sentence length. Each estimate averaged below 1 second on sentences of fewer than 7 words. (The y-axis has been restricted so that the normalized 0 and trigram estimates can be better compared). Note that while straight 0 does perform better than the &quot;stack&quot; model in CPU time, the two models approach equivalent performance as sentence length increases, which is what would be expected from the edge count measures. The other two models provide a real time savings over the &quot;stack&quot; model, as can be seen from Figure 5 and from the total CPU times given earlier. Through most of the length range, the CPU time needed by the normalized 0 and the trigram estimate is quite close, but at the upper end of the range we can see better performance by the trigram estimate. (This improvement comes later than in the edge count statistics because of the small additional amount of overhead work needed to use the trigram estimate.)
4.. Earlier, we showed that our ideal figure of merit can be written as: However, the a term, representing outside probability, cannot be calculated directly during a parse, since we need the full parse of the sentence to compute it. In some of our figures of merit, we use the quantity p(Mhk, 44), which is closely related to outside probability. We call this quantity the left outside probability, and denote it aL (see Figure 6). The following recursive formula can be used to compute aL. Let Elk be the set of all edges, or rule expansions, in which the nonterminal 1\1k appears. For each edge e in E' we compute the product of cti, of the nonterminal appearing on the left-hand pc, side (lhs) of the rule, the probability of the rule itself, and 13 of each nonterminal Ks appearing to the left of NI hk in the rule. Then aL(Nk) is the sum of these products: Given a complete parse of the sentence, the formula above gives an exact value for aL. During parsing, the set Elk is not complete, and so the formula gives an approximation of aL. This formula can be infinitely recursive, depending on the properties of the grammar. A method for calculating aL more efficiently can be derived from the calculations given in Jelinek and Lafferty (1991). A simple extension to the normalized 0 model allows us to estimate the perword probability of all tags in the sentence through the end of the constituent under consideration. This allows us to take advantage of information already obtained in a left-right parse. We calculate this quantity as follows: 1VaL(1\li,k)0(Nli,k). We are again taking the geometric mean to avoid thrashing by compensating for the aL13 quantity's preference for shorter constituents, as explained in the previous section. We refer to this figure of merit as normalized at.13. We also derived an estimate of the ideal figure of merit that takes advantage of statistics on the first j — 1 tags of the sentence as well as ti,k. This estimate represents the probability of the constituent in the context of the preceding tags. We again make the independence assumption that p(t),k I NjA, to,i, ti) 13(NJ,k)* Additionally, we assume that p(Mk,to,i) and p(to,k) are independent of p(tk,n), giving: The denominator, p(to,k), is once again calculated from a tritag model. The p(Nihk,to,i) term is just au defined above in the discussion of the normalized al,13 model. Thus this figure of merit can be written as: We will refer to this as the prefix estimate. The results for the figures of merit introduced in the previous section according to the measurements given in Section 2.2 are shown in Table 2. the geometric-mean-based models with sentence length can be seen clearly. Second, when we consider only the two conditional-probability models, we can see that the additional information obtained from context in the prefix estimate gives a substantial improvement in this measure as compared to the trigram estimate. However, the CPU time needed to compute the aL term exceeds the time saved by processing fewer edges. Note that using this estimate, the parser took over 26,000 seconds to get 95% of the probability mass, while the &quot;stack&quot; model can exhaustively parse the test data in less than 5,000 seconds. Figure 8 shows the average CPU time for each sentence length. While chart parsing and calculations of 13 can be done in 0(n3) time (see Appendix A), we have been unable to find an algorithm to compute the aL terms faster than 0(n5). When a constituent is removed from the agenda, it only affects the 1 values of its ancestors in the parse trees; however, al., values are propagated to all of the constituent's siblings to the right and all of its descendants. Recomputing the aL terms when a constituent is removed from the agenda can be done in 0(n3) time, and since there are 0(n2) possible constituents, the total time needed to compute the at, terms in this manner is 0(n5).
5.. Although the aL-based models seem impractical, the edge-count and constituent-count statistics show that contextual information is useful. We can derive an estimate similar to the prefix estimate but containing a much simpler model of the context as follows: Once again applying the usual independence assumption that given a nonterminal, the tag sequence it generates depends only on that nonterminal, we can rewrite the figure of merit as follows: As usual, we use a trigram model for the tags, giving p(thk I to,prk,n) p(thk tj_2, Now, we assume that p(Mhk I kJ, tk,n) r-z•, p(Mhk I tj_i), that is, that the probability of a nonterminal is dependent on the tag immediately before it in the sentence (see Figure 9). Then we have: We can calculate /3(Nk) and the tritag probabilities as usual. The p(Ivihk I probabilities are estimated from our training data by parsing the training data and counting the occurrences of the nonterminal and the tag weighted by their probability in the parse. (Further details are provided in Appendix B.) We will refer to this figure as the left boundary trigram estimate. We can derive a similar estimate using context on both sides of the constituent as follows: Once again applying the usual independence assumption that given a nonterminal, the tag sequence it generates depends only on that nonterminal and also assuming that the probability of t depends only on the previous tags, we can rewrite the figure of merit as follows: Now we add some new independence assumptions. We assume that the probability of the nonterminal depends only on the immediately preceding tag, and that the probability of the tag immediately following the nonterminal depends only on the nonterminal (see Figure 10), giving: We can calculate 0(1\711,k) and the tritag probabilities as usual. The p(1\1`bk I tj_i) and p(tk Nihk) probabilities are estimated from our training data by parsing the training data and counting the occurrences of the nonterminal and the tag weighted by their probability in the parse. Again, see Appendix B for details of how these estimates were obtained. We will refer to this figure as the boundary trigram estimate. We also wished to examine whether contextual information by itself is sufficient as a figure of merit. We can derive an estimate based only on easily computable contextual information as follows: Most of the independence assumptions we make are the same as in the boundary trigram estimate. We assume that the probability of the nonterminal depends only on the previous tag, that the probability of the immediately following tag depends only on the nonterminal, and that the probability of the tags following that depend only on the previous tags. However, we make one independence assumption that differs from all of our previous estimates. Rather than assuming that the probability of the tags within the constituent depends on the nonterminal, giving an inside probability term, we assume that the probability of these tags depends only on the previous tags. Then we have which is simply the product of the two boundary statistics described in the previous section. We refer to this estimate as boundary statistics only. for which we use 1- . Then at run time we only use the trigram probabilities for tO,k• Nonzero-length edges for 95% of the probability mass for the boundary estimates.
5.4 Results. The results for the figures of merit introduced in the previous section according to the measurements given in Section 2.2 are shown in Table 3. Figure 11 shows a graph of %non-0 E for each sentence length for the boundary models and the trigram and prefix estimates. This graph shows that the contextual information gained from using oL in the prefix estimate is almost completely included in just the previous tag, as illustrated by the left boundary trigram estimate. Adding right contextual information in the boundary trigram estimate gives us the best performance on this measure of any of our figures of merit. We can consider the left boundary trigram estimate to be an approximation of the prefix estimate, where the effect of the left context is approximated by the effect of the single tag to the left. Similarly, the boundary trigram estimate is an approximation to an estimate involving the full context, i.e., an estimate involving the outside probability a. However, the parser cannot compute the outside probability of a constituent during a parse, and so in order to use context on both sides of the constituent, we need to use something like our boundary statistics. Our results suggest that a single tag before or after the constituent can be used as a reasonable approximation to the full context on Average CPU time for 95% of the probability mass for the boundary estimates. that side of the constituent. Figure 12 shows the average CPU time for each sentence length. Since the boundary trigram estimate has none of the overhead associated with the prefix estimate, it is the best performer in terms of CPU time as well. We can also see that using just the boundary statistics, which can be precomputed and require no extra processing during parsing, still results in a substantial improvement over the non-best-first &quot;stack&quot; model. As another method of comparison between the two best-performing estimates, the context-dependent boundary trigram model and the context-independent trigram model, we compared the number of edges needed to find the first parse for averagelength sentences. The average length of a sentence in our test data is about 22 words. Figure 13 shows the percentage of sentences of length 18 through 26 for which a parse could be found within 2,500 edges. For this experiment, we used a separate test set from the Wall Street Journal corpus, containing approximately 570 sentences in the desired length range. This measure also shows a real advantage of the boundary trigram estimate over the trigram estimate.
6.. Table 4 summarizes the results obtained for each figure of merit. To verify that our results are not an artifact of the particular grammar we chose for testing, we also tested using a treebank grammar introduced in Charniak (1996). This % of the 18- to 26-word sentences finding a parse in a fixed number of edges. grammar was trained in a straightforward way by reading the grammar directly (with minor modifications) from a portion of the Penn Treebank Wall Street Journal data comprised of about 300,000 words. The boundary statistics were counted directly from the training data as well. The treebank grammar is much larger and more ambiguous than our original grammar, containing about 16,000 rules and 78 terminal and nonterminal symbols, and it was impractical to parse sentences to exhaustion using our existing hardware, so the figures based on 95% of the probability mass could not be computed. We were able to use this grammar to compare the number of edges needed to find the first parse using the trigram and boundary trigram estimates. % of the 18- to 26-word sentences finding a parse in a fixed number of edges for a treebank grammar. Figure 14 shows the percentage of sentences of length 18 through 26 for which a parse could be found within 20,000 edges. Again, we used a test set of approximately 570 sentences of the appropriate length from the Wall Street Journal corpus. Although the x-axis covers a much wider range than in Figure 13, the relationship between the two estimates is quite similar.
8.. In an earlier version of this paper (Caraballo and Charniak 1996), we presented the results for several of these models using our original grammar. The treebank grammar was introduced in Charniak (1996), and the parser in, that paper is a best-first parser using the boundary trigram figure of merit. The literature shows many implementations of best-first parsing, but none of the previous work shares our goal of explicitly comparing figures of merit. Bobrow (1990) and Chitrao and Grishman (1990) introduced statistical agendabased parsing techniques. Chitrao and Grishman implemented a best-first probabilistic parser and noted the parser's tendency to prefer shorter constituents. They proposed a heuristic solution of penalizing shorter constituents by a fixed amount per word. Miller and Fox (1994) compare the performance of parsers using three different types of grammars, and show that a probabilistic context-free grammar using inside probability (unnormalized) as a figure of merit outperforms both a context-free grammar and a context-dependent grammar. Kochman and Kupin (1991) propose a figure of merit closely related to our prefix estimate. They do not actually incorporate this figure into a best-first parser. Magerman and Marcus (1991) use the geometric mean to compute a figure of merit that is independent of constituent length. Magerman and Weir (1992) use a similar model with a different parsing algorithm.
9.. We have presented and evaluated several figures of merit for best-first parsing. The best performer according to all of our measures was the parser using the boundary trigram estimate as a figure of merit, and this result holds for two different grammars. This figure has the additional advantage that it can be easily incorporated into existing best-first parsers using a figure of merit based on inside probability. (As mentioned earlier, the efficient online computation of # is described in Appendix A.) We strongly recommend this figure of merit as the basis for best-first statistical parsers. The measurements presented here almost certainly underestimate the true benefits of this model. We restricted sentence length to a maximum of 30 words, in order to keep the number of edges in the exhaustive parse to a practical size; however, since the percentage of edges needed by the best-first parse decreases with increasing sentence length, we assume that the improvement would be even more dramatic for sentences longer than 30 words.
Appendix A: Efficient On-Line Computation of. We compute estimates of the inside probability for each proposed constituent incrementally as new constituents are added to the chart. Initially, # is set to 1 for each terminal symbol, since our input is given as a stream of tags, which are our terminals. When a new proposed constituent is added to the agenda, its [3 estimate is set to its current inside probability according to the constituents already in the chart. However, as more constituents are added to the chart, we may find a new way to build up a proposed constituent, i.e., additional evidence for that proposed constituent, so we need to update the 13 for the proposed constituent (and also for affected constituents already in the chart, since these may in turn affect other proposed constituents). These updates can be quite expensive in terms of CPU time. However, many of the updates are quite small, and do not affect the relative ordering of the proposed constituents on the agenda. Instead of propagating every change to 0, then, we only want to propagate those changes that we expect to have an effect on this ordering. What we have done is to have each constituent store not only its # value, but also an increment. Increases to the inside probability are added not to # itself, but to this increment, until the increment exceeds some threshold. Experimentally we have found that we can avoid propagating increments until they exceed 1% of the current value of with very little effect on the parser's selection of constituents from the agenda. This thresholding on the propagation of # allows us to update the values on line while still keeping the performance of the parser as 0(n3) empirically.
Appendix B: Estimation of Boundary Statistics. Our figures of merit incorporating boundary statistics use the figures p(Mk ti_i) to represent the effect of the left context and p(to to represent the effect of the right context. For our experiments with the first grammar, which was learned from training data taken from the Brown corpus, we estimated these statistics from the same training data. First, we parsed the training data according to our grammar. (It was necessary to do this, rather than using the hand-annotated parses of the training data, because our grammar does not use the same set of nonterminals as the corpus; see Carroll and Charniak [1992a, 1992b] and Charniak and Carroll [1994] for details.) Since we use the tags as our input, the probability of a nonterminal appearing with a particular previous tag is the same as the probability of that nonterminal appearing in any sentence containing that tag. We can then count the probability-weighted occurrences of a nonterminal given the previous tag as follows: That is, for each sentence that contains the previous tag tj_i, we increment our count by the probability of the nonterminal Nk occurring immediately following ti_i in that sentence. Since we have a complete parse, the inside and outside probabilities and the sentence probability can be easily computed. We can also obtain the count C(ti_i) simply by counting the number of sentences in which that tag appears in position j - 1. We then obtain the conditional probability for the left boundary statistic as follows: The right boundary statistic is computed in the corresponding way. For the experiment using the treebank grammar, these statistics were obtained by counting directly from the Wall Street Journal treebank corpus, just as the grammar rules and trigram statistics were.
Appendix C: Speed vs.. As an additional verification of our results, we gathered data on speed versus accuracy. For this experiment, we used the probabilistic context-free grammar learned from the Brown corpus and the average-length test sentences described in Section 5.4. For each figure of merit, we computed the average precision and recall of the best parse found as compared to the number of edges created. We computed unlabeled precision and recall only, since our grammar uses a different set of nonterminals from those used in the test data. Precision is defined as the percentage of the constituents proposed by our parser that are actually correct according to the treebank. For each edge count, we measured the precision of the best parse of each sentence found within that number of edges. Figure 15 is a graph of the average precision for the 0 figures of merit from Section 3, plotted against edge counts. The fluctuations at the low edge counts are due to the small amount of data at this level. At a low edge count, very few sentences have actually been parsed, and since these sentences tend to be short and simple, the parses are likely to be correct. The sentences that could not be parsed do not contribute to the measurement of precision. As more sentences are parsed, precision settles at about 47%, the highest precision attainable by our particular test grammar, and remains there as edge counts increase. Recall of the best parse found in a fixed number of edges for the estimates. Recall of the best parse found in a fixed number of edges for the boundary estimates. Caraballo and Charniak Figures of Merit This level of precision is independent of the figure of merit used, so measurement of precision does not help evaluate our figures of merit. A much more useful measure is recall. Recall is defined as the percentage of constituents in the treebank test data that are found by our parser. Again, we measured the recall of the best parse of each sentence found within each number of edges. Figure 16 shows the results for the figures of merit from Section 3. Straight beta clearly shows little or no improvement over the &quot;stack&quot; parser using no figure of merit at all. The other figures of merit increase quickly to about 64%, the maximum recall attainable with our test grammar. The &quot;stack&quot; parser and the one using straight beta, on the other hand, do not reach this maximum level until about 50,000 edges. We have no explanation for the relatively poor performance of the parser using the trigram estimate compared to the other best-first parsers, as shown in Figures 16, 17, and 18. Figure 17 shows the recall values for the aL0 figures of merit from Section 4, and Figure 18 shows recall for the boundary figures of merit from Section 5. Since precision is not a useful measure, we have not included precision data for these figures of merit. These data confirm that the parser using the boundary trigram figure of merit performs better than any of the others. Recall using this figure of merit is consistently higher than any of the others at low edge counts, and it reaches the maximum value in fewer than 2,000 edges, with the nearest competitors approaching the maximum at about 3,000 edges.
Acknowledgments. The authors are very grateful to Heidi Fox for obtaining the speed vs. accuracy data discussed in Appendix C. We also wish to thank the anonymous reviewers for their comments and suggestions. This research was supported in part by NSF grant IRI-9319516 and by ONR grant N0014-96-1-0549.