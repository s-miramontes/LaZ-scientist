1 Introduction. Word senses are more beneficial than simple word forms for a variety of tasks including Information Retrieval, Machine Translation and others (Pantel and Lin, 2002). However, word senses are usually represented as a fixed-list of definitions of a manually constructed lexical database. Several deficiencies are caused by this representation, e.g. lexical databases miss main domain-specific senses (Pantel and Lin, 2002), they often contain general definitions and suffer from the lack of explicit semantic or contextual links between concepts (Agirre et al., 2001). More importantly, the definitions of hand-crafted lexical databases often do not reflect the exact meaning of a target word in a given context (V´eronis, 2004). Unsupervised Word Sense Induction (WSI) aims to overcome these limitations of handconstructed lexicons by learning the senses of a target word directly from text without relying on any hand-crafted resources. The primary aim of SemEval-2010 WSI task is to allow comparison of unsupervised word sense induction and disambiguation systems.
Sameer S. Pradhan BBN Technologies Cambridge, USA. The target word dataset consists of 100 words, 50 nouns and 50 verbs. For each target word, participants were provided with a training set in order to learn the senses of that word. In the next step, participating systems were asked to disambiguate unseen instances of the same words using their learned senses. The answers of the systems were then sent to organisers for evaluation.
2 Task description. Figure 1 provides an overview of the task. As can be observed, the task consisted of three separate phases. In the first phase, training phase, participating systems were provided with a training dataset that consisted of a set of target word (noun/verb) instances (sentences/paragraphs). Participants were then asked to use this training dataset to induce the senses of the target word. No other resources were allowed with the exception of NLP components for morphology and syntax. In the second phase, testing phase, participating systems were provided with a testing dataset that consisted of a set of target word (noun/verb) instances (sentences/paragraphs). Participants were then asked to tag (disambiguate) each testing instance with the senses induced during the training phase. In the third and final phase, the tagged test instances were received by the organisers in order to evaluate the answers of the systems in a supervised and an unsupervised framework. Table 1 shows the total number of target word instances in the training and testing set, as well as the average number of senses in the gold standard. The main difference of the SemEval-2010 as compared to the SemEval-2007 sense induction task is that the training and testing data are treated separately, i.e the testing data are only used for sense tagging, while the training data are only used for sense induction. Treating the testing data as new unseen instances ensures a realistic evaluation that allows to evaluate the clustering models of each participating system. The evaluation framework of SemEval-2010 WSI task considered two types of evaluation. In the first one, unsupervised evaluation, systems’ answers were evaluated according to: (1) VMeasure (Rosenberg and Hirschberg, 2007), and (2) paired F-Score (Artiles et al., 2009). Neither of these measures were used in the SemEval2007 WSI task. Manandhar & Klapaftis (2009) provide more details on the choice of this evaluation setting and its differences with the previous evaluation. The second type of evaluation, supervised evaluation, follows the supervised evaluation of the SemEval-2007 WSI task (Agirre and Soroa, 2007). In this evaluation, induced senses are mapped to gold standard senses using a mapping corpus, and systems are then evaluated in a standard WSD task. The target word dataset consisted of 100 words, i.e. 50 nouns and 50 verbs. The training dataset for each target noun or verb was created by following a web-based semi-automatic method, similar to the method for the construction of Topic Signatures (Agirre et al., 2001). Specifically, for each WordNet (Fellbaum, 1998) sense of a target word, we created a query of the following form: The <Target Word> consisted of the target word stem. The <Relative Set> consisted of a disjunctive set of word lemmas that were related to the target word sense for which the query was created. The relations considered were WordNet’s hypernyms, hyponyms, synonyms, meronyms and holonyms. Each query was manually checked by one of the organisers to remove ambiguous words. The following example shows the query created for the first1 and second2 WordNet sense of the target noun failure. The created queries were issued to Yahoo! search API3 and for each query a maximum of 1000 pages were downloaded. For each page we extracted fragments of text that occurred in <p> </p> html tags and contained the target word stem. In the final stage, each extracted fragment of text was POS-tagged using the Genia tagger (Tsuruoka and Tsujii, 2005) and was only retained, if the POS of the target word in the extracted text matched the POS of the target word in our dataset. The testing dataset consisted of instances of the same target words from the training dataset. This dataset is part of OntoNotes (Hovy et al., 2006). We used the sense-tagged dataset in which sentences containing target word instances are tagged with OntoNotes (Hovy et al., 2006) senses. The texts come from various news sources including CNN, ABC and others.
3 Evaluation framework. For the purposes of this section we provide an example (Table 3) in which a target word has 181 instances and 3 GS senses. A system has generated a clustering solution with 4 clusters covering all instances. Table 3 shows the number of common instances between clusters and GS senses. This section presents the measures of unsupervised evaluation, i.e V-Measure (Rosenberg and Hirschberg, 2007) and (2) paired F-Score (Artiles et al., 2009). Let w be a target word with N instances (data points) in the testing dataset. Let K = {Cj|j = 1... n} be a set of automatically generated clusters grouping these instances, and S = {Gi|i = 1... m} the set of gold standard classes containing the desirable groupings of w instances. V-Measure (Rosenberg and Hirschberg, 2007) assesses the quality of a clustering solution by explicitly measuring its homogeneity and its completeness. Homogeneity refers to the degree that each cluster consists of data points primarily belonging to a single GS class, while completeness refers to the degree that each GS class consists of data points primarily assigned to a single cluster (Rosenberg and Hirschberg, 2007). Let h be homogeneity and c completeness. V-Measure is the harmonic mean of h and c, i.e. V M = 2·h·c h+c . Homogeneity. The homogeneity, h, of a clustering solution is defined in Formula 1, where H(S|K) is the conditional entropy of the class distribution given the proposed clustering and H(S) is the class entropy. When H(S|K) is 0, the solution is perfectly homogeneous, because each cluster only contains data points that belong to a single class. However in an imperfect situation, H(S|K) depends on the size of the dataset and the distribution of class sizes. Hence, instead of taking the raw conditional entropy, V-Measure normalises it by the maximum reduction in entropy the clustering information could provide, i.e. H(S). When there is only a single class (H(S) = 0), any clustering would produce a perfectly homogeneous solution. Completeness. Symmetrically to homogeneity, the completeness, c, of a clustering solution is defined in Formula 4, where H(K|S) is the conditional entropy of the cluster distribution given the class distribution and H(K) is the clustering entropy. When H(K|S) is 0, the solution is perfectly complete, because all data points of a class belong to the same cluster. For the clustering example in Table 3, homogeneity is equal to 0.404, completeness is equal to 0.37 and V-Measure is equal to 0.386. In this evaluation, the clustering problem is transformed into a classification problem. For each cluster Ci we generate (|Ci|� instance pairs, where 2 |Ci |is the total number of instances that belong to cluster Ci. Similarly, for each GS class Gi we generate (|Gi|� instance pairs, where |Gi |is the total 2 number of instances that belong to GS class Gi. Let F(K) be the set of instance pairs that exist in the automatically induced clusters and F(S) be the set of instance pairs that exist in the gold standard. Precision can be defined as the number of common instance pairs between the two sets to the total number of pairs in the clustering solution (Equation 7), while recall can be defined as the number of common instance pairs between the two sets to the total number of pairs in the gold standard (Equation 8). Finally, precision and recall are combined to produce the harmonic mean stance pairs for C1 , �70� for C2, �71� for C3 and �5� for C4, resulting in a total of 5505 instance 2 2 pairs. In the same vein, we can generate �36 total, the GS classes contain 5820 instance pairs. There are 3435 common instance pairs, hence precision is equal to 62.39%, recall is equal to 59.09% and paired F-Score is equal to 60.69%. In this evaluation, the testing dataset is split into a mapping and an evaluation corpus. The first one is used to map the automatically induced clusters to GS senses, while the second is used to evaluate methods in a WSD setting. This evaluation follows the supervised evaluation of SemEval-2007 WSI task (Agirre and Soroa, 2007), with the difference that the reported results are an average of 5 random splits. This repeated random sampling was performed to avoid the problems of the SemEval-2007 WSI challenge, in which different splits were providing different system rankings. Let us consider the example in Table 3 and assume that this matrix has been created by using the mapping corpus. Table 3 shows that C1 is more likely to be associated with G3, C2 is more likely to be associated with G2, C3 is more likely to be associated with G3 and C4 is more likely to be associated with G1. This information can be utilised to map the clusters to GS senses. Particularly, the matrix shown in Table 3 is normalised to produce a matrix M, in which each entry depicts the estimated conditional probability P(Gi|Cj). Given an instance I of tw from the evaluation corpus, a row cluster vector IC is created, in which each entry k corresponds to the score assigned to Ck to be the winning cluster for instance I. The product of IC and M provides a row sense vector, IG, in which the highest scoring entry a denotes that Ga is the winning sense. For example, if we produce the row cluster vector [C1 = 0.8,C2 = 0.1, C3 = 0.1, C4=0.0],and multiply it with the normalised matrix of Table 3, then we would get a row sense vector in which G3 would be the winning sense with a score equal to 0.43.
4 Evaluation results. In this section, we present the results of the 26 systems along with two baselines. The first baseline, Most Frequent Sense (MFS), groups all testing instances of a target word into one cluster. The second baseline, Random, randomly assigns an instance to one out of four clusters. The number of clusters of Random was chosen to be roughly equal to the average number of senses in the GS. This baseline is executed five times and the results are averaged. Table 4 shows the V-Measure (VM) performance of the 26 systems participating in the task. The last column shows the number of induced clusters of each system in the test set.The MFS baseline has a V-Measure equal to 0, since by definition its completeness is 1 and homogeneity is 0. All systems outperform this baseline, apart from one, whose V-Measure is equal to 0. Regarding the Random baseline, we observe that 17 perform better, which indicates that they have learned useful information better than chance. Table 4 also shows that V-Measure tends to favour systems producing a higher number of clusters than the number of GS senses, although VMeasure does not increase monotonically with the number of clusters increasing. For that reason, we introduced the second unsupervised evaluation measure (paired F-Score) that penalises systems when they produce: (1) a higher number of clusters (low recall) or (2) a lower number of clusters (low precision), than the GS number of senses. Table 5 shows the performance of systems using the second unsupervised evaluation measure. In this evaluation, we observe that most of the systems perform better than Random. Despite that, none of the systems outperform the MFS baseline. It seems that systems generating a smaller number of clusters than the GS number of senses are biased towards the MFS, hence they are not able to perform better. On the other hand, systems generating a higher number of clusters are penalised by this measure. Systems generating a number of clusters roughly the same as the GS tend to conflate the GS senses lot more than the MFS. Table 6 shows the results of this evaluation for a 80-20 test set split, i.e. 80% for mapping and 20% for evaluation. The last columns shows the average number of GS senses identified by each system in the five splits of the evaluation datasets. Overall, 14 systems outperform the MFS, while 17 of them perform better than Random. The ranking of systems in nouns and verbs is different. For instance, the highest ranked system in nouns is UoY, while in verbs Duluth-Mix-Narrow-Gap. It seems that depending on the part-of-speech of the target word, different algorithms, features and parameters’ tuning have different impact. The supervised evaluation changes the distribution of clusters by mapping each cluster to a weighted vector of senses. Hence, it can potentially favour systems generating a high number of homogeneous clusters. For that reason, we applied a second testing set split, where 60% of the testing corpus was used for mapping and 40% for evaluation. Reducing the size of the mapping corpus allows us to observe, whether the above statement is correct, since systems with a high number of clusters would suffer from unreliable mapping. Table 7 shows the results of the second supervised evaluation. The ranking of participants did not change significantly, i.e. we observe only different rankings among systems belonging to the same participant. Despite that, Table 7 also shows that the reduction of the mapping corpus has a different impact on systems generating a larger number of clusters than the GS number of senses. For instance, UoY that generates 11.54 clusters outperformed the MFS by 3.77% in the 80-20 split and by 3.71% in the 60-40 split. The reduction of the mapping corpus had a minimal impact on its performance. In contrast, KSU KDD that generates 17.5 clusters was below the MFS by 6.49% in the 80-20 split and by 7.83% in the 60-40 split. The reduction of the mapping corpus had a larger impact in this case. This result indicates that the performance in this evaluation also depends on the distribution of instances within the clusters. Systems generating a skewed distribution, in which a small number of homogeneous clusters tag the majority of instances and a larger number of clusters tag only a few instances, are likely to have a better performance than systems that produce a more uniform distribution.
5 Conclusion. We presented the description, evaluation framework and assessment of systems participating in the SemEval-2010 sense induction task. The evaluation has shown that the current state-of-the-art lacks unbiased measures that objectively evaluate clustering. The results of systems have shown that their performance in the unsupervised and supervised evaluation settings depends on cluster granularity along with the distribution of instances within the clusters. Our future work will focus on the assessment of sense induction on a task-oriented basis as well as on clustering evaluation.
Acknowledgements. We gratefully acknowledge the support of the EU FP7 INDECT project, Grant No. 218086, the National Science Foundation Grant NSF-0715078, Consistent Criteria for Word Sense Disambiguation, and the GALE program of the Defense Advanced Research Projects Agency, Contract No. HR0011-06-C-0022, a subcontract from the BBNAGILE Team.