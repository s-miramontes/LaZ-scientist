1 Introduction. A growing body of recent work in information extraction has addressed the problem of relation extraction (RE), identifying relationships between entities stated in text, such as LivesIn(Person, Location) or EmployedBy(Person, Company). Supervised learning has been shown to be effective for RE (Zelenko et al., 2003; Culotta and Sorensen, 2004; Bunescu and Mooney, 2006); however, annotating large corpora with examples of the relations to be extracted is expensive and tedious. In this paper, we introduce a supervised learning approach to RE that requires only a handful of training examples and uses the web as a corpus. Given a few pairs of well-known entities that clearly exhibit or do not exhibit a particular relation, such as CorpAcquired(Google, YouTube) and not(CorpAcquired(Yahoo, Microsoft)), a search engine is used to find sentences on the web that mention both of the entities in each of the pairs. Although not all of the sentences for positive pairs will state the desired relationship, many of them will. Presumably, none of the sentences for negative pairs state the targeted relation. Multiple instance learning (MIL) is a machine learning framework that exploits this sort of weak supervision, in which a positive bag is a set of instances which is guaranteed to contain at least one positive example, and a negative bag is a set of instances all of which are negative. MIL was originally introduced to solve a problem in biochemistry (Dietterich et al., 1997); however, it has since been applied to problems in other areas such as classifying image regions in computer vision (Zhang et al., 2002), and text categorization (Andrews et al., 2003; Ray and Craven, 2005). We have extended an existing approach to relation extraction using support vector machines and string kernels (Bunescu and Mooney, 2006) to handle this weaker form of MIL supervision. This approach can sometimes be misled by textual features correlated with the specific entities in the few training pairs provided. Therefore, we also describe a method for weighting features in order to focus on those correlated with the target relation rather than with the individual entities. We present experimental results demonstrating that our approach is able to accurately extract relations from the web by learning from such weak supervision.
2 Problem Description. We address the task of learning a relation extraction system targeted to a fixed binary relationship R. The only supervision given to the learning algorithm is a small set of pairs of named entities that are known to belong (positive) or not belong (negative) to the given relationship. Table 1 shows four positive and two negative example pairs for the corporate acquisition relationship. For each pair, a bag of sentences containing the two arguments can be extracted from a corpus of text documents. The corpus is assumed to be sufficiently large and diverse such that, if the pair is positive, it is highly likely that the corresponding bag contains at least one sentence that explicitly asserts the relationship R between the two arguments. In Section 6 we describe a method for extracting bags of relevant sentences from the web. Using a limited set of entity pairs (e.g. those in Table 1) and their associated bags as training data, the aim is to induce a relation extraction system that can reliably decide whether two entities mentioned in the same sentence exhibit the target relationship or not. In particular, when tested on the example sentences from Figure 1, the system should classify S1, S3,and S4 as positive, and S2 and S5 as negative. +/S1: Search engine giant Google has bought videosharing website YouTube in a controversial $1.6 billion deal. −/S2: The companies will merge Google’s search expertise with YouTube’s video expertise, pushing what executives believe is a hot emerging market of video offered over the Internet. +/S3: Google has acquired social media company, YouTube for $1.65 billion in a stock-for-stock transaction as announced by Google Inc. on October 9, 2006. +/S4: Drug giant Pfizer Inc. has reached an agreement to buy the private biotechnology firm Rinat Neuroscience Corp., the companies announced Thursday. −/S5: He has also received consulting fees from Alpharma, Eli Lilly and Company, Pfizer, Wyeth Pharmaceuticals, Rinat Neuroscience, Elan Pharmaceuticals, and Forest Laboratories. As formulated above, the learning task can be seen as an instance of multiple instance learning. However, there are important properties that set it apart from problems previously considered in MIL. The most distinguishing characteristic is that the number of bags is very small, while the average size of the bags is very large.
3 Multiple Instance Learning. Since its introduction by Dietterich (1997), an extensive and quite diverse set of methods have been proposed for solving the MIL problem. For the task of relation extraction, we consider only MIL methods where the decision function can be expressed in terms of kernels computed between bag instances. This choice was motivated by the comparatively high accuracy obtained by kernel-based SVMs when applied to various natural language tasks, and in particular to relation extraction. Through the use of kernels, SVMs (Vapnik, 1998; Sch¨olkopf and Smola, 2002) can work efficiently with instances that implicitly belong to a high dimensional feature space. When used for classification, the decision function computed by the learning algorithm is equivalent to a hyperplane in this feature space. Overfitting is avoided in the SVM formulation by requiring that positive and negative training instances be maximally separated by the decision hyperplane. Gartner et al. (2002) adapted SVMs to the MIL setting using various multi-instance kernels. Two of these – the normalized set kernel, and the statistic kernel – have been experimentally compared to other methods by Ray and Craven (2005), with competitive results. Alternatively, a simple approach to MIL is to transform it into a standard supervised learning problem by labeling all instances from positive bags as positive. An interesting outcome of the study conducted by Ray and Craven (2005) was that, despite the class noise in the resulting positive examples, such a simple approach often obtains competitive results when compared against other more sophisticated MIL methods. We believe that an MIL method based on multiinstance kernels is not appropriate for training datasets that contain just a few, very large bags. In a multi-instance kernel approach, only bags (and not instances) are considered as training examples, which means that the number of support vectors is going to be upper bounded by the number of training bags. Taking the bags from Table 1 as a sample training set, the decision function is going to be specified by at most seven parameters: the coefficients for at most six support vectors, plus an optional bias parameter. A hypothesis space characterized by such a small number of parameters is likely to have insufficient capacity. Based on these observations, we decided to transform the MIL problem into a standard supervised problem as described above. The use of this approach is further motivated by its simplicity and its observed competitive performance on very diverse datasets (Ray and Craven, 2005). Let X be the set of bags used for training, Xp C X the set of positive bags, and Xn C X the set of negative bags. For any instance x E X from a bag X E X, let φ(x) be the (implicit) feature vector representation of x. Then the corresponding SVM optimization problem can be formulated as in Figure 2: minimize: The capacity control parameter C is normalized by the total number of instances L = Lp + Ln = EXEXp |X |+ EXEXn |X|, so that it remains independent of the size of the dataset. The additional non-negative parameter cp (cn = 1−cp) controls the relative influence that false negative vs. false positive errors have on the value of the objective function. Because not all instances from positive bags are real positive instances, it makes sense to have false negative errors be penalized less than false positive errors (i.e. cp < 0.5). In the dual formulation of the optimization problem from Figure 2, bag instances appear only inside dot products of the form K(x1, x2) = φ(x1)φ(x2). The kernel K is instantiated to a subsequence kernel, as described in the next section.
4 Relation Extraction Kernel. The training bags consist of sentences extracted from online documents, using the methodology described in Section 6. Parsing web documents in order to obtain a syntactic analysis often gives unreliable results – the type of narrative can vary greatly from one web document to another, and sentences with grammatical errors are frequent. Therefore, for the initial experiments, we used a modified version of the subsequence kernel of Bunescu and Mooney (2006), which does not require syntactic information. This kernel computes the number of common subsequences of tokens between two sentences. The subsequences are constrained to be “anchored” at the two entity names, and there is a maximum number of tokens that can appear in a sequence. For example, a subsequence feature for the sentence S1 in Figure 1 is s� = “(e1) ... bought ... (e2) ... in ... billion ... deal”, where (e1) and (e2) are generic placeholders for the two entity names. The subsequence kernel induces a feature space where each dimension corresponds to a sequence of words. Any such sequence that matches a subsequence of words in a sentence example is down-weighted as a function of the total length of the gaps between every two consecutive words. More exactly, let s = w1w2 ... wk be a sequence of k words, and s� = w1 g1 w2 g2 . . . wk−1 gk−1 wk a matching subsequence in a relation example, where gi stands for any sequence of words between wi and wi+1. Then the sequence s will be represented in the relation example as a feature with weight computed as τ(s) = λgP). The parameter λ controls the magnitude of the gap penalty, where g(s) = Ei |gi |is the total gap. Many relations, like the ones that we explore in the experimental evaluation, cannot be expressed without using at least one content word. We therefore modified the kernel computation to optionally ignore subsequence patterns formed exclusively of stop words and punctuation signs. In Section 5.1, FrameNet terminology (Baker et al., 1998), these we introduce a new weighting scheme, wherein a correspond to instantiated frame elements. For exweight is assigned to every token. Correspondingly, ample, the corporate acquisition frame can be seen every sequence feature will have an additional mul- as a subtype of the “Getting” frame in FrameNet. tiplicative weight, computed as the product of the The core elements in this frame are the Recipiweights of all the tokens in the sequence. The aim ent (e.g. Google) and the Theme (e.g. YouTube), of this new weighting scheme, as detailed in the next which for the acquisition relationship coincide with section, is to eliminate the bias caused by the special the two arguments. They do not contribute any structure of the relation extraction MIL problem. bias, since they are replaced with the generic tags 5 Two Types of Bias (e1) and (e2) in all sentences from the bag. There As already hinted at the end of Section 2, there is are however other frame elements – peripheral, or one important property that distinguishes the cur- extra-thematic – that can be instantiated with the rent MIL setting for relation extraction from other same value in many sentences. In Figure 1, for inMIL problems: the training dataset contains very stance, sentence 53 contains two non-core frame elefew bags, and each bag can be very large. Con- ments: the Means element (e.g “in a stock-for-stock sequently, an application of the learning model de- transaction”) and the Time element (e.g. “on Ocscribed in Sections 3 & 4 is bound to be affected by tober 9, 2006”). Words from these elements, like the following two types of bias: “stock”, or “October”, are likely to occur very often ■ [Type I Bias] By definition, all sentences inside in the Google-YouTube bag, and because the traina bag are constrained to contain the same two ar- ing dataset contains only a few other bags, subseguments. Words that are semantically correlated quence patterns containing these words will be given with either of the two arguments are likely to oc- too much weight in the learned model. This is probcur in many sentences. For example, consider the lematic, since these words can appear in many other sentences 51 and 52 from the bag associated with frames, and thus the learned model is likely to make “Google” and “YouTube” (as shown in Figure 1). errors. Instead, we would like the model to foThey both contain the words “search” – highly cor- cus on words that trigger the target relationship (in related with “Google”, and “video” – highly corre- FrameNet, these are the lexical units associated with lated with “YouTube”, and it is likely that a signifi- the target frame). cant percentage of sentences in this bag contain one 5.1 A Solution for Type I Bias of the two words (or both). The two entities can be In order to account for how strongly the words in a mentioned in the same sentence for reasons other sequence are correlated with either of the individual than the target relation R, and these noisy training arguments of the relation, we modify the formula for sentences are likely to contain words that are corre- the sequence weight T(s) by factoring in a weight lated with the two entities, without any relationship T(w) for each word in the sequence, as illustrated in to R. A learning model where the features are based Equation 1. on words, or word sequences, is going to give too 11 T(s) � A���s) · T(w) (1) much weight to words or combinations of words that wEs are correlated with either of individual arguments. Given a predefined set of weights T(w), it is straightThis overweighting will adversely affect extraction forward to update the recursive computation of performance through an increased number of errors. the subsequence kernel so that it reflects the new A method for eliminating this type of bias is intro- weighting scheme. duced in Section 5.1. If all the word weights are set to 1, then the new ■ [Type II Bias] While Type I bias is due to words kernel is equivalent to the old one. What we want, that are correlated with the arguments of a relation however, is a set of weights where words that are instance, the Type II bias is caused by words that correlated with either of the two arguments are given are specific to the relation instance itself. Using lower weights. For any word, the decrease in weight 579 should reflect the degree of correlation between that word and the two arguments. Before showing the formula used for computing the word weights, we first introduce some notation: The quantity P(wjX.a1 V X.a2) • C(X) represents the expected number of sentences in which w would occur, if the only causes were X.a1 or X.a2, independent of each other. We want to discard this quantity from the total number of occurrences C(X, w), so that the effect of correlations with X.a1 or X.a2 is eliminated. We still need to compute P(wjX.a1 V X.a2). Because in the definition of P(wjX.a1 V X.a2), the arguments X.a1 and X.a2 were considered independent causes, P(wjX.a1 V X.a2) can be computed with the noisy-or operator (Pearl, 1986): The quantity P(wja) represents the probability that the word w appears in a sentence due only to the presence of a, and it could be estimated using counts on a sufficiently large corpus. For our experimental evaluation, we used the following approximation: given an argument a, a set of sentences containing a are extracted from web documents (details in Section 6). Then P(wja) is simply approximated with the ratio of the number of sentences containing w over the total number of sentences, i.e. P(wja) = C(w, a)/C(a). Because this may be an overestimate (w may appear in a sentence containing a due to causes other than a), and also because of data sparsity, the quantity T(w) may sometimes result in a negative value – in these cases it is set to 0, which is equivalent to ignoring the word w in all subsequence patterns.
6 MIL Relation Extraction Datasets. For the purpose of evaluation, we created two datasets: one for corporate acquisitions, as shown in Table 2, and one for the person-birthplace relation, with the example pairs from Table 3. In both tables, the top part shows the training pairs, while the bottom part shows the test pairs. Given a pair of arguments (a1, a2), the corresponding bag of sentences is created as follows: ■ A query string “a1 * * * * * * * a2” containing seven wildcard symbols between the two arguments is submitted to Google. The preferences are set to search only for pages written in English, with Safesearch turned on. This type of query will match documents where an occurrence of a1 is separated from an occurrence of a2 by at most seven content words. This is an approximation of our actual information ber of sentences in the bag), and C(X, w) the number of sentences in the bag X that contain the word w. Let P(wjX) = C(X, w)/C(X). • Let P(wjX.a1 V X.a2) be the probability that the word w appears in a sentence due only to the presence of X.a1 or X.a2, assuming X.a1 and X.a2 are independent causes for w. The word weights are computed as follows: C(X, w) − P(wjX.a1 V X.a2) • C(X) 580 need: “return all documents containing a1 and a2 in itive bags in the person-birthplace dataset are sigthe same sentence”. nificantly sparser in real positive instances than the ■ The returned documents (limited by Google to positive bags in the corporate acquisition dataset. the first 1000) are downloaded, and then the text The subsequence kernel described in Section 4 is extracted using the HTML parser from the Java was used as a custom kernel for the LibSVM2 Java Swing package. Whenever possible, the appropriate package. When run with the default parameters, HTML tags (e.g. BR, DD, P, etc.) are used as hard the results were extremely poor – too much weight end-of-sentence indicators. The text is further seg- was given to the slack term in the objective funcmented into sentences with the OpenNLP1 package. tion. Minimizing the regularization term is essen■ Sentences that do not contain both arguments a1 tial in order to capture subsequence patterns shared and a2 are discarded. For every remaining sentence, among positive bags. Therefore LibSVM was modwe find the occurrences of a1 and a2 that are clos- ified to solve the optimization problem from Figest to each other, and create a relation example by ure 2, where the capacity parameter C is normalreplacing a1 with (e1) and a2 with (e2). All other ized by the size of the transformed dataset. In this occurrences of a1 and a2 are replaced with a null new formulation, C is set to its default value of 1.0 token ignored by the subsequence kernel. – changing it to other values did not result in signifiThe number of sentences in every bag is shown in cant improvement. The trade-off between false posthe last column of Tables 2 & 3. Because Google itive and false negative errors is controlled by the also counts pages that are deemed too similar in the parameter cp. When set to its default value of 0.5, first 1000, some of the bags can be relatively small. false-negative errors and false positive errors have As described in Section 5.1, the word-argument the same impact on the objective function. As excorrelations are modeled through the quantity pected, setting cp to a smaller value (0.1) resulted P(wla) = C(w, a)/C(a), estimated as the ratio be- in better performance. Tests with even lower values tween the number of sentences containing w and a, did not improve the results. and the number of sentences containing a. These We compare the following four systems: counts are computed over a bag of sentences con- ■ SSK–MIL: This corresponds to the MIL formutaining a, which is created by querying Google for lation from Section 3, with the original subsequence the argument a, and then by processing the results kernel described in Section 4. as described above. ■ SSK–T1: This is the SSK–MIL system aug7 Experimental Evaluation mented with word weights, so that the Type I bias Each dataset is split into two sets of bags: one is reduced, as described in Section 5.1. for training and one for testing. The test dataset ■ BW-MIL: This is a bag-of-words kernel, in was purposefully made difficult by including neg- which the relation examples are classified based on ative bags with arguments that during training were the unordered words contained in the sentence. This used in positive bags, and vice-versa. In order to baseline shows the performance of a standard textevaluate the relation extraction performance at the classification approach to the problem using a statesentence level, we manually annotated all instances of-the art algorithm (SVM). from the positive test bags. The last column in Ta- ■ SSK–SIL: This corresponds to the original subbles 2 & 3 shows, between parentheses, how many sequence kernel trained with traditional, single ininstances from the positive test bags are real pos- stance learning (SIL) supervision. For evaluation, itive instances. The corporate acquisition test set we train on the manually labeled instances from the has a total of 995 instances, out of which 156 are test bags. We use a combination of one positive bag positive. The person-birthplace test set has a total and one negative bag for training, while the other of 601 instances, and only 45 of them are positive. two bags are used for testing. The results are averExtrapolating from the test set distribution, the pos- aged over all four possible combinations. Note that the supervision provided to SSK–SIL requires significantly more annotation effort, therefore, given a sufficient amount of training examples, we expect this system to perform at least as well as its MIL counterpart. In Figure 3, precision is plotted against recall by varying a threshold on the value of the SVM decision function. To avoid clutter, we show only the graphs for the first three systems. In Table 4 we show the area under the precision recall curves of all four systems. Overall, the learned relation extractors are able to identify the relationship in novel sentences quite accurately and significantly out-perform a bag-of-words baseline. The new version of the subsequence kernel SSK–T1 is significantly more accurate in the MIL setting than the original subsequence kernel SSK–MIL, and is also competitive with SSK–SIL, which was trained using a reasonable amount of manually labeled sentence examples.
8 Future Work. An interesting potential application of our approach is a web relation-extraction system similar to Google Sets, in which the user provides only a handful of pairs of entities known to exhibit or not to exhibit a particular relation, and the system is used to find other pairs of entities exhibiting the same relation. Ideally, the user would only need to provide positive pairs. Sentences containing one of the relation arguments could be extracted from the web, and likely negative sentence examples automatically created by pairing this entity with other named entities mentioned in the sentence. In this scenario, the training set can contain both false positive and false negative noise. One useful side effect is that Type I bias is partially removed – some bias still remains due to combinations of at least two words, each correlated with a different argument of the relation. We are also investigating methods for reducing Type II bias, either by modifying the word weights, or by integrating an appropriate measure of word distribution across positive bags directly in the objective function for the MIL problem. Alternatively, implicit negative evidence can be extracted from sentences in positive bags by exploiting the fact that, besides the two relation arguments, a sentence from a positive bag may contain other entity mentions. Any pair of entities different from the relation pair is very likely to be a negative example for that relation. This is similar to the concept of negative neighborhoods introduced by Smith and Eisner (2005), and has the potential of eliminating both Type I and Type II bias.
9 Related Work. One of the earliest IE methods designed to work with a reduced amount of supervision is that of Hearst (1992), where a small set of seed patterns is used in a bootstrapping fashion to mine pairs of hypernym-hyponym nouns. Bootstrapping is actually orthogonal to our method, which could be used as the pattern learner in every bootstrapping iteration. A more recent IE system that works by bootstrapping relation extraction patterns from the web is KNOWITALL (Etzioni et al., 2005). For a given target relation, supervision in KNOWITALL is provided as a rule template containing words that describe the class of the arguments (e.g. “company”), and a small set of seed extraction patterns (e.g. “has acquired”). In our approach, the type of supervision is different – we ask only for pairs of entities known to exhibit the target relation or not. Also, KNOWITALL requires large numbers of search engine queries in order to collect and validate extraction patterns, therefore experiments can take weeks to complete. Comparatively, the approach presented in this paper requires only a small number of queries: one query per relation pair, and one query for each relation argument. Craven and Kumlien (1999) create a noisy training set for the subcellular-localization relation by mining Medline for sentences that contain tuples extracted from relevant medical databases. To our knowledge, this is the first approach that is using a “weakly” labeled dataset for relation extraction. The resulting bags however are very dense in positive examples, and they are also many and small – consequently, the two types of bias are not likely to have significant impact on their system’s performance.
10 Conclusion. We have presented a new approach to relation extraction that leverages the vast amount of information available on the web. The new RE system is trained using only a handful of entity pairs known to exhibit and not exhibit the target relationship. We have extended an existing relation extraction kernel to learn in this setting and to resolve problems caused by the minimal supervision provided. Experimental results demonstrate that the new approach can reliably extract relations from web documents.
Acknowledgments. We would like to thank the anonymous reviewers for their helpful suggestions. This work was supported by grant IIS-0325116 from the NSF, and a gift from Google Inc.