1 Introduction. Variants of PCFGs form the basis of several broadcoverage and high-precision parsers (Collins, 1999; Charniak, 1999; Klein and Manning, 2003). In those parsers, the strong conditional independence assumption made in vanilla treebank PCFGs is weakened by annotating non-terminal symbols with many ‘features’ (Goodman, 1997; Johnson, 1998). Examples of such features are head words of constituents, labels of ancestor and sibling nodes, and subcategorization frames of lexical heads. Effective features and their good combinations are normally explored using trial-and-error. This paper defines a generative model of parse trees that we call PCFG with latent annotations (PCFG-LA). This model is an extension of PCFG models in which non-terminal symbols are annotated with latent variables. The latent variables work just like the features attached to non-terminal symbols. A fine-grained PCFG is automatically induced from parsed corpora by training a PCFG-LA model using an EM-algorithm, which replaces the manual feature selection used in previous research. The main focus of this paper is to examine the effectiveness of the automatically trained models in parsing. Because exact inference with a PCFG-LA, i.e., selection of the most probable parse, is NP-hard, we are forced to use some approximation of it. We empirically compared three different approximation methods. One of the three methods gives a performance of 86.6% (F, sentences 40 words) on the standard test set of the Penn WSJ corpus. Utsuro et al. (1996) proposed a method that automatically selects a proper level of generalization of non-terminal symbols of a PCFG, but they did not report the results of parsing with the obtained PCFG. Henderson’s parsing model (Henderson, 2003) has a similar motivation as ours in that a derivation history of a parse tree is compactly represented by induced hidden variables (hidden layer activation of a neural network), although the details of his approach is quite different from ours.
2 Probabilistic model. PCFG-LA is a generative probabilistic model of parse trees. In this model, an observed parse tree is considered as an incomplete data, and the correplete data) and observed tree (incomplete data). sponding complete data is a tree with latent annotations. Each non-terminal node in the complete data is labeled with a complete symbol of the form , where is the non-terminal symbol of the corresponding node in the observed tree and is a latent annotation symbol, which is an element of a fixed set . A complete/incomplete tree pair of the sentence, “the cat grinned,” is shown in Figure 2. The complete parse tree, (left), is generated through a process just like the one in ordinary PCFGs, but the non-terminal symbols in the CFG rules are annotated with latent symbols, the probability of the complete tree ( ) is where denotes the probability of an occurrence of the symbol at a root node and denotes the probability of a CFG rule. The probability of the observed tree is obtained by summing for all the assignments to latent anUsing dynamic programming, the theoretical bound of the time complexity of the summation in Eq. 1 is reduced to be proportional to the number of non-terminal nodes in a parse tree. However, the calculation at node still has a cost that exponentially grows with the number of ’s daughters because we must sum up the probabilities of combinations of latent annotation symbols for a node with daughters. We thus took a kind of transformation/detransformation approach, in which a tree is binarized before parameter estimation and restored to its original form after parsing. The details of the binarization are explained in Section 4. Using syntactically annotated corpora as training data, we can estimate the parameters of a PCFGLA model using an EM algorithm. The algorithm is a special variant of the inside-outside algorithm of Pereira and Schabes (1992). Several recent work also use similar estimation algorithm as ours, i.e, inside-outside re-estimation on parse trees (Chiang and Bikel, 2002; Shen, 2004). The rest of this section precisely defines PCFGLA models and briefly explains the estimation algorithm. The derivation of the estimation algorithm is largely omitted; see Pereira and Schabes (1992) for details. We define a PCFG-LA as a tuple , where a set of observable non-terminal symbols a set of terminal symbols a set of latent annotation symbols a set of observable CFG rules the probability of the occurrence of a complete symbol at a root node the probability of a rule We use for non-terminal symbols in and for latent annotation symbols in . denotes the set of complete non-terminal symbols, i.e., . Note that latent annotation symbols are not attached to terminal symbols. In the above definition, is a set of CFG rules of observable (i.e., not annotated) symbols. For simplicity of discussion, we assume that is a CNF grammar, but extending to the general case is straightforward. is the set of CFG rules of complete symbols, such as grinned or . More precisely, We assume that non-terminal nodes in a parse tree are indexed by integers , starting from the root node. A complete tree is denoted by , where is a vector of latent annotation symbols and is the latent annotation symbol attached to the-th non-terminal node. We do not assume any structured parametrizations in and ; that is, each and is itself a parameter to be tuned. Therefore, an annotation symbol, say, , generally does not express any commonalities among the complete non-terminals annotated by , such as . The probability of a complete parse tree is defined as (2) where is the label of the root node of and denotes the multiset of annotated CFG rules used in the generation of . We have the probability of an observable tree by marginalizing out the latent annotation symbols in : where is the number of non-terminal nodes in . The sum in Eq. 3 can be calculated using a dynamic programming algorithm analogous to the forward algorithm for HMMs. For a sentence and its parse tree , backward probabilities are recursively computed for the-th non-terminal node and for each . In the definition below, denotes the non-terminal label of the-th node. If node is a pre-terminal node above a terminal symbol , then . Otherwise, let and be the two daughter nodes of. Then Using backward probabilities, is calculated as . We define forward probabilities , which are used in the estimation described below, as follows: If node is the root node (i.e., = 1), then . If node has a right sibling , let be the mother node of. Then If node has a left sibling, is defined analogously. We now derive the EM algorithm for PCFG-LA, which estimates the parameters . Let be the training set of parse trees and be the labels of non-terminal nodes in . Like the derivations of the EM algorithms for other latent variable models, the update formulas for the parameters, which update the parameters from to , are obtained by constrained optimization of , which is defined as where and denote probabilities under and , and is the conditional probability of latent annotation symbols given an observed tree , i.e., . Using the Lagrange multiplier method and re-arranging the results using the backward and forward probabilities, we obtain the update formulas in Figure 2.
3 Parsing with PCFG-LA. In theory, we can use PCFG-LAs to parse a given sentence by selecting the most probable parse: where denotes the set of possible parses for under the observable grammar . While the optimization problem in Eq. 4 can be efficiently solved for PCFGs using dynamic programming algorithms, the sum-of-products form of in PCFG-LA models (see Eq. 2 and Eq. 3) makes it difficult to apply such techniques to solve Eq. 4. Actually, the optimization problem in Eq. 4 is NPhard for general PCFG-LA models. Although we omit the details, we can prove the NP-hardness by observing that a stochastic tree substitution grammar (STSG) can be represented by a PCFG-LA model in a similar way to one described by Goodman (1996a), and then using the NP-hardness of STSG parsing (Sima´an, 2002). The difficulty of the exact optimization in Eq. 4 forces us to use some approximations of it. The rest of this section describes three different approximations, which are empirically compared in the next section. The first method simply limits the number of candidate parse trees compared in Eq. 4; we first create N-best parses using a PCFG and then, within the N-best parses, select the one with the highest probability in terms of the PCFG-LA. The other two methods are a little more complicated, and we explain them in separate subsections. The second approximation method selects the best complete tree , that is, (5) We call a Viterbi complete tree. Such a tree can be obtained in time by regarding the PCFG-LA as a PCFG with annotated symbols.1 The observable part of the Viterbi complete tree (i.e., ) does not necessarily coincide with the best observable tree in Eq. 4. However, if has some ‘dominant’ assignment to its latent annotation symbols such that ,then because and , and thus and are almost equally ‘good’ in terms of their marginal probabilities. In the third method, we approximate the true distribution by a cruder distribution , and then find the tree with the highest in polynomial time. We first create a packed representation of for a given sentence .2 Then, the approximate distribution is created using the packed forest, and the parameters in are adjusted so that approximates as closely as possible. The form of is that of a product of the parameters, just like the form of a PCFG model, and it enables us to use a Viterbi algorithm to select the tree with the highest . A packed forest is defined as a tuple of , which can be obtained by parsing with beam thresholding, for instance. An approximate distribution on such subsets can be derived in almost the same way as one for from the-th to-th word in . The second component, , is a function on that represents dominance relations among the chart items in ; is a set of possible daughters of if is not a pre-terminal node, and if is a pre-terminal node above . Two parse trees for a sentence and a packed representation of them are shown in Figure 3. We require that each tree has a unique representation as a set of connected chart items in . A packed representation satisfying the uniqueness condition is created using the CKY algorithm with the observable grammar , for instance. The approximate distribution, , is defined as a PCFG, whose CFG rules is defined as . We use to denote the rule probability of rule and to denote the probability with which is generated as a root node. We define as where the set of connected items is the unique representation of . To measure the closeness of approximation by , we use the ‘inclusive’ KL-divergence, (Frey et al., 2000): Minimizing under the normalization constraints on and yields closed form solutions for ❂ and , as shown in Figure 4. in and❂out in Figure 4 are similar to ordinary inside/outside probabilities. We define❂in as follows: If is a pre-terminal node , then❂in above where and denote non-terminal symbols of chart items and . The outside probability,❂out, is calculated using❂in and PCFG-LA parameters along the packed structure, like the outside probabilities for PCFGs. Once we have computed and , the parse tree that maximizes is found using a Viterbi algorithm, as in PCFG parsing. Several parsing algorithms that also use insideoutside calculation on packed chart have been proposed (Goodman, 1996b; Sima´an, 2003; Clark and Curran, 2004). Those algorithms optimize some evaluation metric of parse trees other than the posterior probability , e.g., (expected) labeled constituent recall or (expected) recall rate of dependency relations contained in a parse. It is in contrast with our approach where (approximated) posterior probability is optimized.
4 Experiments. We conducted four sets of experiments. In the first set of experiments, the degree of dependency of trained models on initialization was examined because EM-style algorithms yield different results with different initial values of parameters. In the second set of experiments, we examined the relationship between model types and their parsing performances. In the third set of experiments, we compared the three parsing methods described in the previous section. Finally, we show the result of a parsing experiment using the standard test set. We used sections 2 through 20 of the Penn WSJ corpus as training data and section 21 as heldout data. The heldout data was used for early stopping; i.e., the estimation was stopped when the rate of increase in the likelihood of the heldout data became lower than a certain threshold. Section 22 was used as test data in all parsing experiments except in the final one, in which section 23 was used. We stripped off all function tags and eliminated empty nodes in the training and heldout data, but any other pre-processing, such as comma raising or base-NP marking (Collins, 1999), was not done except for binarizations. To see the degree of dependency of trained models on initializations, four instances of the same model were trained with different initial values of parameters.3 The model used in this experiment was created by CENTER-PARENT binarization and was set to 16. Table 1 lists training/heldout data loglikelihood per sentence (LL) for the four instances and their parsing performances on the test set (section 22). The parsing performances were obtained using the approximate distribution method in Section 3.2. Different initial values were shown to affect the results of training to some extent (Table 1). We compared four types of binarization. The original form is depicted in Figure 5 and the results are shown in Figure 6. In the first two methods, called CENTER-PARENT and CENTER-HEAD, the headfinding rules of Collins (1999) were used. We obtained an observable grammar for each model by reading off grammar rules from the binarized training trees. For each binarization method, PCFG-LA models with different numbers of latent annotation symbols, , and , were trained. The relationships between the number of parameters in the models and their parsing performances are shown in Figure 7. Note that models created using different binarization methods have different numbers of parameters for the same . The parsing performances were measured using F scores of the parse trees that were obtained by re-ranking of 1000-best parses by a PCFG. We can see that the parsing performance gets better as the model size increases. We can also see that models of roughly the same size yield similar performances regardless of the binarization scheme used for them, except the models created using LEFT binarization with small numbers of parameters ( and ). Taking into account the dependency on initial values at the level shown in the previous experiment, we cannot say that any single model is superior to the other models when the sizes of the models are large enough. The results shown in Figure 7 suggest that we could further improve parsing performance by increasing the model size. However, both the memory size and the training time are more than linear in , and the training time for the largest ( ) models was about 15 hours for the models created using CENTER-PARENT, CENTER-HEAD, and LEFT and about 20 hours for the model created using RIGHT. To deal with larger (e.g., = 32 or 64) models, we therefore need to use a model search that reduces the number of parameters while maintaining the model’s performance, and an approximation during training to reduce the training time. The relationships between the average parse time and parsing performance using the three parsing methods described in Section 3 are shown in Figure 8. A model created using CENTER-PARENT with was used throughout this experiment. The data points were made by varying configurable parameters of each method, which control the number of candidate parses. To create the candidate parses, we first parsed input sentences using a PCFG4, using beam thresholding with beam width . The data points on a line in the figure were created by varying with other parameters fixed. The first method re-ranked the -best parses enumerated from the chart after the PCFG parsing. The two lines for the first method in the figure correspond to = 100 and = 300. In the second and the third methods, we removed all the dominance relations among chart items that did not contribute to any parses whose PCFG-scores were higher than max, where max is the PCFG-score of the best parse in the chart. The parses remaining in the chart were the candidate parses for the second and the third methods. The different lines for the second and the third methods correspond to different values of . The third method outperforms the other two methods unless the parse time is very limited (i.e., 1 sec is required), as shown in the figure. The superiority of the third method over the first method seems to stem from the difference in the number of candidate parses from which the outputs are selected.5 The superiority of the third method over the second method is a natural consequence of the consistent use of both in the estimation (as the objective function) and in the parsing (as the score of a parse). Parsing performance on section 23 of the WSJ corpus using a PCFG-LA model is shown in Table 2. We used the instance of the four compared in the second experiment that gave the best results on the development set. Several previously reported results on the same test set are also listed in Table 2. Our result is lower than the state-of-the-art lexicalized PCFG parsers (Collins, 1999; Charniak, 1999), but comparable to the unlexicalized PCFG parser of Klein and Manning (2003). Klein and Manning’s PCFG is annotated by many linguistically motivated features that they found using extensive manual feature selection. In contrast, our method induces all parameters automatically, except that manually written head-rules are used in binarization. Thus, our method can extract a considerable amount of hidden regularity from parsed corpora. However, our result is worse than the lexicalized parsers despite the fact that our model has access to words in the sentences. It suggests that certain types of information used in those lexicalized 5Actually, the number of parses contained in the packed forest is more than 1 million for over half of the test sentences when = and , while the number of parses for which the first method can compute the exact probability in a comparable time (around 4 sec) is only about 300. parsers are hard to be learned by our approach.