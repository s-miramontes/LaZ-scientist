1 Introduction. Coreference systems exploit a variety of information sources, ranging from syntactic and discourse constraints, which are highly configurational, to semantic constraints, which are highly contingent on lexical meaning and world knowledge. Perhaps because configurational features are inherently easier to learn from small data sets, past work has often emphasized them over semantic knowledge. Of course, all state-of-the-art coreference systems have needed to capture semantic compatibility to some degree. As an example of nominal headword compatibility, a “president” can be a “leader” but cannot be not an “increase.” Past systems have often computed the compatibility of specific headword pairs, extracted either from lexical resources (Ng, 2007; Bengston and Roth, 2008; Rahman and Ng, 2009), web statistics (Yang et al., 2005), or surface syntactic patterns (Haghighi and Klein, 2009). While the pairwise approach has high precision, it is neither realistic nor scalable to explicitly enumerate all pairs of compatible word pairs. A more compact approach has been to rely on named-entity recognition (NER) systems to give coarse-grained entity types for each mention (Soon et al., 1999; Ng and Cardie, 2002). Unfortunately, current systems use small inventories of types and so provide little constraint. In general, coreference errors in state-of-theart systems are frequently due to poor models of semantic compatibility (Haghighi and Klein, 2009). In this work, we take a primarily unsupervised approach to coreference resolution, broadly similar to Haghighi and Klein (2007), which addresses this issue. Our generative model exploits a large inventory of distributional entity types, including standard NER types like PERSON and ORG, as well as more refined types like WEAPON and VEHICLE. For each type, distributions over typical heads, modifiers, and governors are learned from large amounts of unlabeled data, capturing type-level semantic information (e.g. “spokesman” is a likely head for a PERSON). Each entity inherits from a type but captures entity-level semantic information (e.g. “giant” may be a likely head for the Microsoft entity but not all ORGs). Separately from the type-entity semantic module, a log-linear discourse model captures configurational effects. Finally, a mention model assembles each textual mention by selecting semantically appropriate words from the entities and types. Despite being almost entirely unsupervised, our model yields the best reported end-to-end results on a range of standard coreference data sets.
2 Key Abstractions. sociated with nodes in a parse tree and are typically realized as NPs. There are three basic forms of mentions: proper (denoted NAM), nominal (NOM), and pronominal (PRO). We will often describe proper and nominal mentions together as referring mentions. We represent each mention M as a collection of key-value pairs. The keys are called properties and the values are words. For example, the left mention in Figure 1(a) has a proper head property, denoted NAM-HEAD, with value “Obama.” The set of properties we consider, denoted R, includes several varieties of heads, modifiers, and governors (see Section 5.2 for details). Not every mention has a value for every property. Entities: An entity is a specific individual or object in the world. Entities are always latent in text. Where a mention has a single word for each property, an entity has a list of signature words. Formally, entities are mappings from properties r E R to lists Lr of “canonical” words which that entity uses for that property. For instance in Figure 1(b), the list of nominal heads for the Barack Obama entity includes “president.” Types: Coreference systems often make a mention / entity distinction. We extend this hierarchy to include types, which represent classes of entities (PERSON, ORGANIZATION, and so on). Types allow the sharing of properties across entities and mediate the generation of entities in our model (Section 3.1). See Figure 1(c) for a concrete example. We represent each type T as a mapping between properties r and pairs of multinomials (Br, fr). Together, these distributions control the lists Lr for entities of that type. Br is a unigram distribution of words that are semantically licensed for property r. fr is a “fertility” distribution over the integers that characterizes entity list lengths. For example, for the type PERSON, Br for proper heads is quite flat (there are many last names) but fr is peaked at 1 (people have a single last name).
3 Generative Model. We now describe our generative model. At the parameter level, we have one parameter group for the types τ = (0, T1, ... , Tt), where 0 is a multinomial prior over a fixed number t of types and the {TZ} are the parameters for each individual type, described in greater detail below. A second group comprises loglinear parameters π over discourse choices, also described below. Together, these two groups are drawn according to P(τ|λ)P(π|Q2), where λ and Q2 are a small number of scalar hyper-parameters described in Section 4. Conditioned on the parameters (τ, π), a document is generated as follows: A semantic module generates a sequence E of entities. E is in principle infinite, though during inference only a finite number are ever instantiated. A discourse module generates a vector Z which assigns an entity index ZZ to each mention position i. Finally, a mention generation module independently renders the sequence of mentions (M) from their underlying entities. The syntactic position and structure of mentions are treated as observed, including the mention forms (pronominal, etc.). We use X to refer to this ungenenerated information. Our model decomposes as follows: We detail each of these components in subsequent sections. The semantic module is responsible for generating a sequence of entities. Each entity E is generated independently and consists of a type indicator T, as well as a collection {Lr}rE7Z of word lists for each property. These elements are generated as follows: Draw entity type T — 0 For each mention property r E R, Fetch {(fr, Br)} for TT Draw word list length |Lr |— fr Draw |Lr |words from w — Br See Figure 2 for an illustration of this process. Each word list Lr is generated by first drawing a list length from fr and then independently populating that list from the property’s word distribution Br.1 Past work has employed broadly similar distributional models for unsupervised NER of proper men1There is one exception: the sizes of the proper and nominal head property lists are jointly generated, but their word lists are still independently populated. tions (Collins and Singer, 1999; Elsner et al., 2009). However, to our knowledge, this is the first work to incorporate such a model into an entity reference process. The discourse module is responsible for choosing an entity to evoke at each of the n mention positions. Formally, this module generates an entity assignment vector Z = (Zl, ... , Zn), where Zi indicates the entity index for the ith mention position. Most linguistic inquiry characterizes NP anaphora by the pairwise relations that hold between a mention and its antecedent (Hobbs, 1979; Kehler et al., 2008). Our discourse module utilizes this pairwise perspective to define each Zi in terms of an intermediate “antecedent” variable Ai. Ai either points to a previous antecedent mention position (Ai < i) and “steals” its entity assignment or begins a new entity (Ai = i). The choice of Ai is parametrized by affinities s7r(i, j; X) between mention positions i and j. Formally, this process is described as: For each mention position, i = 1, ... , n, Draw antecedent position Ai E {1, ... , i}: Here, K denotes the number of entities allocated in the first i-1 mention positions. This process is an instance of the sequential distance-dependent Chinese Restaurant Process (DD-CRP) of Blei and Frazier (2009). During inference, we variously exploit both the A and Z representations (Section 4). For nominal and pronoun mentions, there are several well-studied anaphora cues, including centering (Grosz et al., 1995), nearness (Hobbs, 1978), and deterministic constraints, which have all been utilized in prior coreference work (Soon et al., 1999; Ng and Cardie, 2002). In order to combine these cues, we take a log-linear, feature-based approach and parametrize s7r(i, j; X) = exp{7rTfX(i, j)}, where fX(i, j) is a feature vector over mention positions i and j, and 7r is a parameter vector; the features may freely condition on X. We utilize the following features between a mention and an antecedent: tree distance, sentence distance, and the syntactic positions (subject, object, and oblique) of the mention and antecedent. Features for starting a new entity include: a definiteness feature (extracted from the mention’s determiner), the top CFG rule of the mention parse node, its syntactic role, and a bias feature. These features are conjoined with the mention form (nominal or pronoun). Additionally, we restrict pronoun antecedents to the current and last two sentences, and the current and last three sentences for nominals. Additionally, we disallow nominals from having direct pronoun antecedents. In addition to the above, if a mention is in a deterministic coreference configuration, as defined in Haghighi and Klein (2009), we force it to take the required antecedent. In general, antecedent affinities learn to prefer close antecedents in prominent syntactic positions. We also learn that new entity nominals are typically indefinite or have SBAR complements (captured by the CFG feature). In contrast to nominals and pronouns, the choice of entity for a proper mention is governed more by entity frequency than antecedent distance. We capture this by setting s,7r(i, j; X) in the proper case to 1 for past positions and to a fixed α otherwise. 2 Once the semantic module has generated entities and the discourse model selects entity assignments, each mention Mi generates word values for a set of observed properties Ri: Mention Generation For each mention Mi, i = 1, ... , n For each property r, there is a hyper-parameter αr which interpolates between selecting a word from the entity list Lr and drawing from the underlying type property distribution Br. Intuitively, a small value of αr indicates that an entity prefers to re-use a small number of words for property r. This is typically the case for proper and nominal heads as well as modifiers. At the other extreme, setting αr to 1 indicates the property isn’t particular to the entity itself, but rather only on its type. We set αr to 1 for pronoun heads as well as for the governor of the head properties.
4 Learning and Inference. Our learning procedure involves finding parameters and assignments which are likely under our model’s posterior distribution P(E, Z, T, 9C|M, X). The model is modularized in such a way that running EM on all variables simultaneously would be very difficult. Therefore, we adopt a variational approach which optimizes various subgroups of the variables in a round-robin fashion, holding approximations to the others fixed. We first describe the variable groups, then the updates which optimize them in turn. Decomposition: We decompose the entity variables E into types, T, one for each entity, and word lists, L, one for each entity and property. We decompose the mentions M into referring mentions (propers and nominals), Mr, and pronominal mentions, Mp (with sizes nr and np respectively). The entity assignments Z are similarly divided into Zr and Zp components. For pronouns, rather than use Zp, we instead work with the corresponding antecedent variables, denoted Ap, and marginalize over antecedents to obtain Zp. With these variable groups, we would like to approximation our model posterior P(T, L, Zr, Ap, -r, 7rJM, X) using a simple factored representation. Our variational approximation takes the following form: We use a mean field approach to update each of the RHS factors in turn to minimize the KL-divergence between the current variational posterior and the true model posterior. The δr, δs, and δd factors place point estimates on a single value, just as in hard EM. Updating these factors involves finding the value which maximizes the model (expected) loglikelihood under the other factors. For instance, the δs factor is a point estimate of the type parameters, and is updated with:3 where Q_63 denotes all factors of the variational approximation except for the factor being updated. The ri (pronoun antecedents) and qk (type indicator) factors maintain a soft approximation and so are slightly more complex. For example, the ri factor update takes the standard mean field form: ri(Api ) a exp{EQ_r, lnP(E, Z, M, -r, 7r)} (2) We briefly describe the update for each additional factor, omitting details for space. Updating type parameters δs(-r): The type parameters -r consist of several multinomial distributions which can be updated by normalizing expected counts as in the EM algorithm. The prior 3Of course during learning, the argmax is performed over the entire document collection, rather than a single document. P(-r JA) consists of several finite Dirichlet draws for each multinomial, which are incorporated as pseudocounts.4 Given the entity type variational posteriors {qk(·)}, as well as the point estimates of the L and Zr elements, we obtain expected counts from each entity’s attribute word lists and referring mention usages. Updating discourse parameters δd(7r): The learned parameters for the discourse module rely on pairwise antecedent counts for assignments to nominal and pronominal mentions.5 Given these expected counts, which can be easily obtained from other factors, the update reduces to a weighted maximum entropy problem, which we optimize using LBFGS. The prior P(7rJσ2) is a zero-centered normal distribution with shared diagonal variance σ2, which is incorporated via L2 regularization during optimization. Updating referring assignments and word lists δr(Zr, L): The word lists are usually concatenations of the words used in nominal and proper mentions and so are updated together with the assignments for those mentions. Updating the δr(Zr, L) factor involves finding the referring mention entity assignments, Zr, and property word lists L for instantiated entities which maximize ]EQ_ar ln P(T, L, Zr, Ap, M, -r, 7r). We actually only need to optimize over Zr, since for any Zr, we can compute the optimal set of property word lists L. Essentially, for each entity we can compute the Lr which optimizes the probability of the referring mentions assigned to the entity (indicated by Zr). In practice, the optimal Lr is just the set of property words in the assigned mentions. Of course enumerating and scoring all Zr hypotheses is intractable, so we instead utilize a left-to-right sequential beam search. Each partial hypothesis is an assignment to a prefix of mention positions and is scored as though it were a complete hypothesis. Hypotheses are extended via adding a new mention to an existing entity or creating a new one. For our experiments, we limited the number of hypotheses on the beam to the top fifty and did not notice an improvement in model score from increasing beam size. Updating pronominal antecedents ri(A? 'i ) and entity types qk(Tk): These updates are straightforward instantiations of the mean-field update (2). To produce our final coreference partitions, we assign each referring mention to the entity given by the δr factor and each pronoun to the most likely entity given by the ri. In order to facilitate learning, some factors are initially set to fixed heuristic values and only learned in later iterations. Initially, the assignment factors δr and {ri} are fixed. For δr, we use a deterministic entity assignment Zr, similar to the Haghighi and Klein (2009)’s SYN-CONSTR setting: each referring mention is coreferent with any past mention with the same head or in a deterministic syntactic configuration (appositives or predicative nominatives constructions).6 The {ri} factors are heuristically set to place most of their mass on the closest antecedent by tree distance. During training, we proceed in stages, each consisting of 5 iterations: We evaluate our system at the end of stage using the B3All metric on the A05CU development set (see Section 5 for details).
5 Experiments. We considered the challenging end-to-end system mention setting, where in addition to predicting mention partitions, a system must identify the mentions themselves and their boundaries automatically. Our system deterministically extracts mention boundaries from parse trees (Section 5.2). We utilized no coreference annotation during training, but did use minimal prototype information to prime the learning of entity types (Section 5.3). For evaluation, we used standard coreference data sets derived from the ACE corpora: For all experiments, we evaluated on the dev and test sets above. To train, we included the text of all documents above, though of course not looking at either their mention boundaries or reference annotations in any way. We also trained on the following much larger unlabeled datasets utilized in Haghighi and Klein (2009): Mention boundaries were automatically detected as follows: For each noun or pronoun (determined by parser POS tag), we associated a mention with the maximal NP projection of that head or that word itself if no NP can be found. This procedure recovers over 90% of annotated mentions on the A05CU dev set, but also extracts many unannotated “spurious” mentions (for instance events, times, dates, or abstract nouns) which are not deemed to be of interest by the ACE annotation conventions. Mention properties were obtained from parse trees using the the Stanford typed dependency extractor (de Marneffe et al., 2006). The mention properties we considered are the mention head (annotated with mention type), the typed modifiers of the head, and the governor of the head (conjoined with the mention’s syntactic position). We discard determiners, but make use of them in the discourse component (Section 3.2) for NP definiteness. While it is possible to learn type distributions in a completely unsupervised fashion, we found it useful to prime the system with a handful of important types. Rather than relying on fully supervised data, we took the approach of Haghighi and Klein (2006). For each type of interest, we provided a (possiblyempty) prototype list of proper and nominal head words, as well as a list of allowed pronouns. For instance, for the PERSON type we might provide: Bush, Gore, Hussein president, minister, official he, his, she, him, her, you, ... The prototypes were used as follows: Any entity with a prototype on any proper or nominal head word attribute list (Section 3.1) was constrained to have the specified type; i.e. the qk factor (Section 4) places probability one on that single type. Similarly to Haghighi and Klein (2007) and Elsner et al. (2009), we biased these types’ pronoun distributions to the allowed set of pronouns. In general, the choice of entity types to prime with prototypes is a domain-specific question. For experiments here, we utilized the types which are annotated in the ACE coreference data: person (PERS), organization (ORG), geo-political entity (GPE), weapon (WEA), vehicle (VEH), location (LOC), and facility (FAC). Since the person type in ACE conflates individual persons with groups of people (e.g., soldier vs. soldiers), we added the group (GROUP) type and generated a prototype specification. We obtained our prototype list by extracting at most four common proper and nominal head words from the newswire portions of the 2004 and 2005 ACE training sets (A04CU and A05ST); we chose prototype words to be minimally ambiguous with respect to type.8 When there are not at least three proper heads for a type (WEA for instance), we did not provide any proper prototypes and instead strongly biased the type fertility parameters to generate empty NAM-HEAD lists. Because only certain semantic types were annotated under the arbitrary ACE guidelines, there are many mentions which do not fall into those limited categories. We therefore prototype (refinements of) the ACE types and then add an equal number of unconstrained “other” types which are automatically induced. A nice consequence of this approach is that we can simply run our model on all mentions, discarding at evaluation time any which are of nonprototyped types. We evaluated on multiple coreference resolution metrics, as no single one is clearly superior, partic8Meaning those headwords were assigned to the target type for more than 75% of their usages. NAM NOM PRO ularly in dealing with the system mention setting. We utilized MUC (Vilain et al., 1995), B3All (Stoyanov et al., 2009), B3None (Stoyanov et al., 2009), and Pairwise F1. The B3All and B3None are B3 variants (Bagga and Baldwin, 1998) that differ in their treatment of spurious mentions. For Pairwise F1, precision measures how often pairs of predicted coreferent mentions are in the same annotated entity. We eliminated any mention pair from this calculation where both mentions were spurious.9
5.5 Results. Table 1 shows our results. We compared to two state-of-the-art supervised coreference systems. The Stoyanov et al. (2009) numbers represent their THRESHOLD ESTIMATION setting and the Rahman and Ng (2009) numbers represent their highestperforming cluster ranking model. We also compared to the strong deterministic system of Haghighi and Klein (2009).10 Across all data sets, our model, despite being largely unsupervised, consistently outperforms these systems, which are the best previously reported results on end-to-end coreference resolution (i.e. including mention detection). Performance on the A05RA dataset is generally lower because it includes articles from blogs and web forums where parser quality is significantly degraded. While Bengston and Roth (2008) do not report on the full system mention task, they do report on the more optimistic setting where mention detection is performed but non-gold mentions are removed for evaluation using an oracle. On this more lenient setting, they report 78.4 B3 on the A04CU test set. Our model yields 80.3.
6 Analysis. We now discuss errors and improvements made by our system. One frequent source of error is the merging of mentions with explicitly contrasting modifiers, such as new president and old president. While it is not unusual for a single entity to admit multiple modifiers, the particular modifiers new and old are incompatible in a way that new and popular 9Note that we are still penalized for marking a spurious mention coreferent with an annotated one. 10Haghighi and Klein (2009) reports on true mentions; here, we report performance on automatically detected mentions. are not. Our model does not represent the negative covariance between these modifiers. We compared our output to the deterministic system of Haghighi and Klein (2009). Many improvements arise from correctly identifying mentions which are semantically compatible but which do not explicitly appear in an appositive or predicatenominative configuration in the data. For example, analyst and it cannot corefer in our system because it is not a likely pronoun for the type PERSON. While the focus of our model is coreference resolution, we can also isolate and evaluate the type component of our model as an NER system. We test this component by presenting our learned model with boundary-annotated non-pronominal entities from the A05ST dev set and querying their predicted type variable T. Doing so yields 83.2 entity classification accuracy under the mapping between our prototyped types and the coarse ACE types. Note that this task is substantially more difficult than the unsupervised NER in Elsner et al. (2009) because the inventory of named entities is larger (7 vs. 3) and because we predict types over nominal mentions that are more difficult to judge from surface forms. In this task, the plurality of errors are confusions between the GPE (geo-political entity) and ORG entity types, which have very similar distributions.
7 Conclusion. Our model is able to acquire and exploit knowledge at either the level of individual entities (“Obama” is a “president”) and entity types (“company” can refer to a corporation). As a result, it leverages semantic constraints more effectively than systems operating at either level alone. In conjunction with reasonable, but simple, factors capturing discourse and syntactic configurational preferences, our entity-centric semantic model lowers coreference error rate substantially, particularly on semantically disambiguated references, giving a sizable improvement over the state-of-the-art.11 Acknowledgements: This project is funded in part by the Office of Naval Research under MURI Grant No. N000140911081. 11See nlp.cs.berkeley.edu and aria42.com/software.html for software release.