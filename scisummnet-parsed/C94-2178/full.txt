Motivation. There have been quite a number of recent papers on parallel text: Brown et al(1990, 1991, 1993), Chen (1993), Church (1993), Church et al(1993), Dagan et al(1993), Gale and Church (1991, 1993), Isabelle (1992), Kay and Rgsenschein (1993), Klavans and Tzoukermann (1990), Kupiec (1993), Matsumoto (1991), Ogden and Gonzales (1993), Shemtov (1993), Simard et al(1992), Warwick- Armstrong and Russell (1990), Wu (to appear). Most of this work has been focused on European language pairs, especially English-French. It remains an open question how well these methods might generalize to other language pairs, especially pairs such as English-Japanese and English- Chinese. In previous work (Church et al 1993), we have reported some preliminary success in aligning the English and Japanese versions of the AWK manual (Aho, Kernighan, Weinberger (1980)), using charalign (Church, 1993), a method that looks for character sequences that are the same in both the source and target. The charalign method was designed for European language pairs, where cognates often share character sequences, e.g., government and gouvernement. In general, this approach doesn't work between languages uch as English and Japanese which are written in different alphabets. The AWK manual happens to contain a large number of examples and technical words that are the same in the English source and target Japanese. It remains an open question how we might be able to align a broader class of texts, especially those that are written in different character sets and share relatively few character sequences. The K-vec method attempts to address this question.
The K-vec Algorithm. . K-vec starts by estimating the lexicon. Consider the example: fisheries --~ p~ches. The K-vec algorithm will discover this fact by noting that the distribution of fisheries in the English text is similar to the distribution of p~ches in the French. The concordances for fisheries and p~ches are shown in Tables 1 and 2 (at the end of this paper). 1 1. These tables were computed from a small fragment ofthe. Canadian Hansards that has been used in a number of other studies: Church (1993) and Simard et al(1992). The English text has 165,160 words and the French text has 185,615 words. 1096 There are 19 instances of fisheries and 21 instances of p~ches. The numbers along the left hand edge show where the concordances were found in the texts. We want to know whether the distribution of numbers in Table 1 is similar to those in Table 2, and if so, we will suspect hat fisheries and p~ches are translations of one another. A quick look at the two tables suggests that the two distributions are probably very similar, though not quite identical. 2 We use a simple representation f the distribution of fisheries and p~ches. The English text and the French text were each split into K pieces. Then we determine whether or not the word in question appears in each of the K pieces. Thus, we denote the distribution of fisheries in the English text with a K-dimensional binary vector, VU, and similarly, we denote the distribution of p~ches in the French text with a K-dimensional binary vector, Vp. The i th bit of Vf indicates whether or not Fisheries occurs in the i th piece of the English text, and similarly, the ith bit of Vp indicates whether or not p~ches occurs in the i th piece of the French text. If we take K be 10, the first three instances of fisheries in Table 1 fall into piece 2, and the remaining 16 fall into piece 8. Similarly, the first 4 instances of pgches in Table 2 fall into piece 2, and the remaining 17 fall into piece 8. Thus, VT= Vp = <2 0,0,1,0,0,0,0,0,1,0 > Now, we want to know if VT is similar to Vp, and if we find that it is, then we will suspect that fisheries ---> p~ches. In this example, of course, the vectors are identical, so practically any reasonable similarity statistic ought to produce the desired result. 3. fisheries is not file translation of lections Before describing how we estimate the similarity of Vf and Vp, let us see what would happen if we tried to compare fisheries with a completely unrelated word, eg., lections. (This word should be the translation of elections, not fisheries.) 2. At most, fisheries can account for only 19 instances of. p~ches, leaving at least 2 instances ofp~ches unexplained. As can be seen in the concordances in Table 3, for K=10, the vector is <1, 1, 0, 1, 1,0, 1, 0, 0, 0>. By almost any measure of similarity one could imagine, this vector will be found to be quite different from the one for fisheries, and therefore, we will correctly discover that fisheries is not the translation of lections. To make this argument a little more precise, it might help to compare the contingency matrices in Tables 5 and 6. The contingency matrices show: (a) the number of pieces where both the English and French word were found, (b) the number of pieces where just the English word was found, (c) the number of pieces where just the French word was found, and (d) the number of peices where neither word was found. Table 4: A contingency matrix French English a b c d Table 5: fisheries vs. pgches p~ches fisheries 2 0 0 8 Table 6: fisheries vs. lections lections fisheries 0 2 4 4 In general, if the English and French words are good translations of one another, as in Table 5, then a should be large, and b and c should be small. In contrast, if the two words are not good translations of one another, as in Table 6, then a should be small, and b and c should be large. 4. Mutual Information. Intuitively, these statements seem to be true, but we need to make them more precise. One could have chosen quite a number of similarity metrics for this purpose. We use mutual information: 1097 prob ( VI, Vp ) log2 prob(Vf) prob(Vp ) That is, we want to compare the probability of seeing fisheries and p~ches in the same piece to chance. The probability of seeing the two words in the same piece is simply: a prob(Vf, Vp) - a+b+c+d The marginal probabilities are: a+b prob(Vf ) - a+b+c+d a+c prob(Vp) = a+b+c+d For fisheries --~ p~ches, prob(Vf, Vp) =prob(Vf) =prob(Vp) =0.2. Thus, the mutual information is log25 or 2.32 bits, meaning that the joint probability is 5 times more likely than chance. In contrast, for fisheries ~ lections, prob ( V f, V p ) = O, prob(Vf) =0.5 and prob(Vp) = 0.4. Thus, the mutual information is log 2 0, meaning that the joint is infinitely less likely than chance. We conclude that it is quite likely that fisheries and p~ches are translations of one another, much more so than fisheries and lections. 5. Significance. Unfortunately, mutual information is often unreliable when the counts are small. For example, there are lots of infrequent words. If we pick a pair of these words at random, there is a very large chance that they would receive a large mutual information value by chance. For example, let e be an English word that appeared just once and le t fbe a French word that appeared just once. Then, there a non-trivial chance (-~) that e andf will appear is in the same piece, as shown in Table 7. If this should happen, the mutual information estimate would be very large, i.e., logK, and probably misleading. Table 7: f e 1 0 0 9 In order to avoid this problem, we use a t-score to filter out insignificant mutual information values. prob ( Vf, Vp ) - prob (Vf) prob ( Vp ) t= 1 prob(Vf,gp) Using the numbers in Table 7, t=l , which is not significant. (A t of 1.65 or more would be significant at the p > 0.95 confidence level.) Similarly, if e and f appeared in just two pieces 1 each, then there is approximately a ~ chance that they would both appear in the same two pieces, and then the mutual information score would be quite log, , ~--, but we probably wouldn't believe it high, Z. because the t-score would be only "~-. By this definition of significance, we need to see the two words in at least 3 different pieces before the result would be considered significant. This means, unfortunately, that we would reject fisheries --+ p~ches because we found them in only two pieces. The problem, of course, is that we don't have enough pieces. When K=10, there simply isn't enough resolution to see what's going on. At K=100, we obtain the contingency matrix shown in Table 8, and the t-score is significant (t=2.1). Table 8:K=100 p~ches fisheries 5 0 1 94 How do we choose K? As we have seen, if we choose too small a K, then the mutual information values will be unreliable. However, we can only increase K up to a point. If we set K to a ridiculously large value, say the size of the English text, then an English word and its translations are likely to fall in slightly different pieces due to random fluctuations and we would miss the signal. For this work, we set K to the square root of the size of the corpus. K should be thought of as a scale parameter. If we use too low a resolution, then everything turns into a blur and it is hard to see anything. But if we use too high a resolution, then we can miss the signal if 7098 it isn't just exactly where we are looking. Ideally, we would like to apply the K-vec algorithm to all pairs of English and French words, but unfortunately, there are too many such pairs to consider. We therefore limited the search to pairs of words in the frequency range: 3-10. This heuristic makes the search practical, and catches many interesting pairs) 6. Results. This algorithm was applied to a fragment of the Canadian Hansards that has been used in a number of other studies: Church (1993) and Simard et al (1992). The 30 significant pairs with the largest mutual information values are shown in Table 9. As can be seen, the results provide a quick-and- dirty estimate of a bilingual exicon. When the pair is not a direct translation, it is often the translation of a collocate, as illustrated by acheteur ~ Limited and Santd -~ Welfare. (Note that some words in Table 9 are spelled with same way in English and French; this information is not used by the K-vec algorithm). Using a scatter plot technique developed by Church and Helfman (1993) called dotplot, we can visulize the alignment, as illustrated in Figure 1. The source text (Nx bytes) is concatenated to the target text (Ny bytes) to form a single input sequence of Nx+Ny bytes. A dot is placed in position i,j whenever the input token at position i is the same as the input token at position j. The equality constraint is relaxed in Figure 2. A dot is placed in position i,j whenever the input token at position i is highly associated with the input token at position j as determined by the mutual information score of their respective K- vecs. In addition, it shows a detailed, magnified and rotated view of the diagonal line. The alignment program tracks this line with as much precision as possible. have been rejected anyways as insignificant. Table 9: K-vec results French English 3.2 Beauce Beauce. 3.2 1981 1981 3.0 Richmond Richmond. 3.0 p~ches Fisheries 2.8 Deans Deans. 2.8 Prud Prud. 2.8 Prud homme. 2.7 acheteur Limited 2.7 Communications Communications. 2.7 MacDonald MacDonald. 2.6 Mazankowski Mazankowski. 2.5 croisi~re nuclear 2.5 Sant6 Welfare. 2.5 39 39 2.5 Johnston Johnston. 2.5 essais nuclear 2.5 Universit6 University. 2.5 bois lumber 2.5 Angus Angus. 2.4 Angus VIA. 2.4 Saskatoon University. 2.4 agriculteurs farmers 2.4 inflation inflation 2.4 James James. 2.4 Vanier Vanier. 2.4 Sant6 Health. 2.3 royale languages 2.3 grief grievance 7. Conclusions. The K-vec algorithm generates a quick-and-dirty estimate of a bilingual exicon. This estimate could be used as a starting point for a more detailed alignment algorithm such as word_align (Dagan et al, 1993). In this way, we might be able to apply word_align to a broader class of language combinations including possibly English-Japanese and English-Chinese. Currently, word_align depends on charalign (Church, 1993) to generate a starting point, which limits its applicability to European languages since char_align was designed for language pairs that share a common alphabet.