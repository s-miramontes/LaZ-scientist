. This paper presents a syntactic analysis method that first detects conjunctive structures in a sentence by checking parallelism of two series of words and then analyzes the dependency structure of the sentence with the help of the information about the conjunctive structures. Analysis of long sentences is one of the most difficult problems in natural language processing. The main reason for this difficulty is the structural ambiguity that is common for conjunctive structures that appear in long sentences. Human beings can recognize conjunctive structures because of a certain, but sometimes subtle, similarity that exists between conjuncts. Therefore, we have developed an algorithm for calculating a similarity measure between two arbitrary series of words from the left and the right of a conjunction and selecting the two most similar series of words that can reasonably be considered as composing a conjunctive structure. This is realized using a dynamic programming technique. A long sentence can be reduced into a shorter form by recognizing conjunctive structures. Consequently, the total dependency structure of a sentence can be obtained by relatively simple head-dependent rules. A serious problem concerning conjunctive structures, besides the ambiguity of their scopes, is the ellipsis of some of their components. Through our dependency analysis process, we can find the ellipses and recover the omitted components. We report the results of analyzing 150 Japanese sentences to illustrate the effectiveness of this method.
1.. Machine translation systems are gradually being accepted by a wider range of people, and accordingly the improvement of machine translation systems is becoming an urgent requirement by manufacturers. There are many difficult problems that cannot be solved by the current efforts of many researchers. Analysis of long Japanese sentences is one of them. It is difficult to get a proper analysis of a sentence whose length is more than 50 Japanese characters, and almost all the current analysis methods fail for sentences composed of more than 80 characters. By analysis failure we mean the following: Some researchers have attributed the difficulties to the numerous possibilities of headdependent relations between phrases in long sentences. But no deeper consideration has ever been given to the reasons for the analysis failure. A long sentence, particularly in Japanese, very often contains conjunctive structures. These may be either conjunctive noun phrases or conjunctive predicative clauses. Among the latter, those made by the renyoh forms of predicates (the ending forms that mean connection to another right predicate) are called renyoh chuushi-ho (see example sentence (iv) of Table 1). A renyoh chuushi-ho appears in an embedded sentence to modify nouns and is also used to connect two or more sentences. This form is used frequently in Japanese and is a major cause of structural ambiguity. Many major sentential components are omitted in the posterior part of renyoh chuushi expressions, thus complicating the analysis. For the successful analysis of long sentences, these conjunctive phrases and clauses, including renyoh chuushi-ho, must be recognized correctly. Nevertheless, most work in this area (e.g., Dahl and McCord 1983; Fong and Berwick 1985; Hirschman 1986; Kaplan and Maxwell 1988; Sag et al. 1985; Sedogbo 1985; Steedman 1990; Woods 1973) has concerned the problem of creating candidate conjunctive structures or explaining correct conjunctive structures, and not the method for selecting correct structures among many candidates. A method proposed by some researchers (Agarwal and Boggess 1992; Nagao et al. 1983) for selecting the correct structure is, in outline, that the two most similar components to the left side and to the right side of a conjunction are detected as two conjoined heads in a conjunctive structure. For example, in &quot;John enjoyed the book and liked the play&quot; we call the verbs &quot;enjoyed&quot; and &quot;liked&quot; conjoined heads; &quot;enjoyed&quot; is the pre-head, and &quot;liked&quot; the posthead. We also call &quot;enjoyed the book&quot; pre-conjunct, and &quot;liked the play&quot; post-conjunct. In Japanese, the word preceding a conjunction is the pre-head, and the post-head that is most similar to the pre-head is searched for (Nagao et al. 1983) (see the upper part of Figure 1). In English, conversely, the phrase following the conjunction is the posthead, and the pre-head is searched for in the same way (Agarwal and Boggess 1992). However, two conjoined heads are sometimes far apart in a long sentence, making this simple method clearly inadequate. Human beings can recognize conjunctive structures because of a certain, but sometimes subtle, similarity that exists between conjuncts. Not only the conjoined heads, but also other components in conjuncts, have some similarity, and furthermore, the pre- and post-conjuncts have a structural parallelism. A computational method needs to recognize this subtle similarity in order to detect the correct conjunctive structures. In this investigation, we have developed an algorithm for calculating a similarity measure between two arbitrary series of words from the left and the right of a conjunction and selecting the two most similar series of words that can reasonably be considered as composing a conjunctive structure (see the lower part of Figure 1). This procedure is realized using a dynamic programming technique. In our syntactic analysis method, the first step is the detection of conjunctive structures by the above-mentioned algorithm. Since two or more conjunctive structures sometimes exist in a sentence with very complex interrelations, the second step is to adjust tangled relations that may exist between two or more conjunctive structures in the sentence. In this step conjunctive structures with incorrect overlapping relations, if they exist, are found and retrials of detecting their scopes are done. The third step of our syntactic analysis is a very common operation. Japanese sentences can best be explained by kakari-uke, which is essentially a dependency structure. Therefore our third step, after identifying all the conjunctive structures, is to perform dependency analyses for each phrase/clause of the conjunctive structures and the dependency analysis for the whole sentence after all the conjunctive structures have been reduced into single nodes. The dependency analysis of Japanese is rather simple. A component depends on a component to its right (not necessarily the adjacent component), and the suffix (postposition) of a component indicates what kind of element it can depend on. More than one head-dependent relation may exist between components, but by introducing some heuristics, we can easily get a unique dependency analysis result that is correct for a high percentage of cases. A serious problem regarding conjunctive structures, in addition to the ambiguity of their scopes, is the ellipses in some of their components. Through the dependency analysis process outlined, we are able to find the ellipses occurring in the conjunctive structures and supplement them with the omitted components.
2.. In Japanese, bunsetsu is the smallest meaningful sequence consisting of an independent word (IW; nouns, verbs, adjectives, etc.) and accompanying words (AW; copulas, postpositions, auxiliary verbs, and so on); A bunsetsu whose IW is a verb or an adjective, or whose AW is a copula, functions as a predicate and thus is called a predicative bunsetsu (PB). A bunsetsu whose IW is a noun is called a nominal bunsetsu (NB). Conjunctive structures (CSs) that appear in Japanese are classified into three types (Shudo et al. 1986). The first type is the conjunctive noun phrase. We can find these phrases by the words listed in Table 1-a. Each conjunctive noun can have adjectival modifiers (Table 1-ii) or clausal modifiers (Table 1-iii). The second type is the conjunctive predicative clause, in which two or more predicates in a sentence form a coordination. We can find these clauses by the renyoh forms of predicates (Table 1-iv) or by the predicates accompanying one of the words in Table 1-b (Table 1-v). The third type is a CS consisting of parts of conjunctive predicative clauses. We call this type an incomplete conjunctive structure. We can find these structures by the *A noun directly followed by a comma indicates a conjunctive noun phrase or an incomplete conjunctive structure. correspondence of case-marking postpositions (Table 1-vi: &quot;.. WO .. NI, .. WO .. NI&quot;). However, sometimes the last bunsetsu of the pre-conjunct has no case-marking postposition (e.g., &quot;NI&quot; can be omitted in the bunsetsu &quot;KAISEKI-NI&quot; in Table 1-vi), just followed by one of the words listed in Table 1-c. In such cases we cannot distinguish this type of CS from conjunctive noun phrases by seeing the last bunsetsu of the pre-conjunct. However, this does not matter, as our method handles the three types of CSs in almost the same way in the stage of detecting their scopes, and it exactly distinguishes incomplete conjunctive structures in the stage of dependency analysis. For all of these types, it is relatively easy to detect the presence of a CS by looking for a distinctive key bunsetsu (we call this a KB) that accompanies a word indicating a CS listed in Table 1 or has the renyoh forms (the underlined bunsetsus are KBs in Sadao Kurohashi and Makoto Nagao Syntactic Analysis Method Table 1). A KB lies last in the pre-conjunct and is a pre-head. However, it is difficult to determine which bunsetsu sequences on both sides of the KB constitute pre- and post-conjuncts. That is, it is not easy to determine which bunsetsu to the left of a KB is the leftmost bunsetsu of the pre-conjunct (we call this starting bunsetsu SB) and which bunsetsu to the right of a KB is the rightmost bunsetsu of the post-conjunct (this ending bunsetsu is called EB and is a post-head). The bunsetsus between these two extreme bunsetsus constitute the scope of the CS. In detecting a CS, it is most important to find the post-head (that is, the EB) among many candidates in a sentence; e.g., in a conjunctive noun phrase, all NBs after a KB are candidates (we call such a candidate bunsetsu a CB). However, our method searches not only for the most plausible EB, but also for the most plausible scope of the CS. We detect the scope of CSs by using a wide range of information before and after a KB. An input sentence is first divided into bunsetsus by conventional morphological analysis. Then we calculate similarities in all pairs of bunsetsus in the sentence. After that, we calculate the similarities between two series of bunsetsus on the left and right of the KB by combining the similarity scores for pairs of bunsetsus. Then, as a final result, we choose the two most similar series of bunsetsus that can reasonably be considered as composing a CS. We will explain this process in detail in the following sections. In detecting CSs, it is necessary to take many factors into consideration, and it is important to give the proper weight to each factor. The scoring system described hereafter was first hypothesized and then manually adjusted through experiments on 30 training sentences containing CSs. These parameters would not be the best, and statistical investigations of large corpora would be preferable. However, these parameters are good enough to get reasonably good analysis results, as shown in the experiments section, and to show the appropriateness of our method. First, we calculate similarities for all pairs of bunsetsus in the sentence. An appropriate similarity value between two bunsetsus is given by the following process: Hyou (BGH; National Language Research Institute 1964). The BGH has a six layer abstraction hierarchy, and more than 60,000 words are assigned to the leaves of it. If the most specific common layer between two IWs is the kth layer and if k is greater than 2, add (k — 2) x 2 points. If either or both IWs are not contained in the BGH, no addition is made. Matching of the generic two layers is ignored to prevent too vague matching in a broader sense. The maximum sum of similarity values that can be added by step 3 and this step is 10 points. 5. If some of the AWs match, add the number of matching AWs x 3 points. For example, the similarity value between &quot;TEISEI(revision)SHI(do),&quot; and &quot;KENSHUTSU(detection)SURU(do)&quot; is calculated as 2(match of parts of speech) + 2(match by BGH) + 3(match of one AW) = 7 points. The similarity value between &quot;TEI-SUIJUN-GENGO(low level language),&quot; and &quot;KOUSUIJUN-GENGO(high level language)T0(and)&quot; is 2(match of parts of speech) + 8(match of four kanji characters: &quot;SUIJUN-GENGO&quot;) = 10 points. Since the BGH does not contain technical terms, similarity points cannot be given to them by the BGH. However, technical terms are often compound words, and those having similar meanings often contain the same words. For such technical terms, some similarity points can be given according to the degree of partial character matching by step 3, as for the latter example. Our method detects the scope of a CS by finding the two series of bunsetsus from before and after the KB that have the greatest similarity. To measure the similarity score between two series of bunsetsus, we have developed a method using a triangular matrix, A, as shown in Figure 2 (Figure 7 and Figure 8 are concrete examples): A = (a(i, j)) (0 5_ i < 1; i < j < I), where 1 is the number of bunsetsus in a sentence. Here, each diagonal element a(i, i) is the ith bunsetsu in a sentence (hereafter denoted 13,) and every other element a(i,j) (i <j) is the similarity value between bunsetsu Bi and bunsetsu Bj calculated by the process just described. In detecting a CS whose KB is the nth bunsetsu (B„), we consider only a partial matrix (denoted An) that is the upper right part of B, (Figure 2): For specifying candidate pre- and post-conjuncts and measuring their similarity, we define a path in A, (Figure 2): path ::-= (a(pi,m),a(p2,m —1), ... ,a(p„,_„,n + 1)), wheren+1 <m< 1,a(pi,m)00, 131 = n, pi > pi+1(1 <i<m—n-1). That is, a path is a series of elements from a non-zero element in the lowest row in An to the element in the leftmost column in A. It has only one element in each column and extends toward the upper left. The series of bunsetsus on the left side of the path (sbi in Figure 2) and the series under the path (sb2 in Figure 2) are candidate conjuncts for a KB, B. When a KB is an NB, NBs after it are CBs; when a KB is a PB, PBs after it are CBs. To satisfy this condition, a path starts from a non-zero element that shows the correspondence of a KB to a CB (note the first process giving the similarity between two bunsetsus). We calculate a path score, which shows the similarity between two candidate conjuncts specified by the path, using the following five criteria: insertion in pre-conjunct and that in post-conjunct symmetrically, when a part of the path is horizontal (a(i, j), a(i, j — 1)), the element's points a(i, j — 1) are not added to the path score (Figures 3b and 3c).1 3. Since a pair of conjunctive phrases/clauses often exhibit structural similarity, we hypothesize that analyses of CSs which maximize corresponding bunsetsus tend to lead to a correct resolution of the conjunctive scope. By this hypothesis, we impose penalty points on the pairs of elements in the path that cause one to multiple bunsetsu correspondence, giving priority to CSs that are constructed of components of the same size. Penalty points for (a (p„ j), a (p,±1, j — 1)) calculated by the following formula are subtracted from the path score (Figure 4): Note that these penalty points are also symmetrical, as shown in Figures 3b and 3c. 4. Since each phrase in the CS has a certain coherence of meaning, special words that separate different meanings in a sentence often limit the scope of a CS. If candidate conjuncts specified by a path include such words, we impose penalty points on the path so that the possibility of selecting such a path is reduced. We define five separating levels (SLs) for bunsetsus, which express the strength of separating meanings in a sentence (Table 2; see Table 1), by observing sentences containing CSs. If candidate conjuncts contain a bunsetsu whose SL is equal to the KB's SL or higher, we reduce the path score by (SL of the bunsetsu — KB's SL + 1) x 7. However, two high SL bunsetsus corresponding to each other often exist in a CS, and these do not limit the scope of the CS, like &quot;X TO-SHITE WA(As to X), ... DE-ARI(be), Y TO-SHITE WA(as to Y), . DE-ARU(be).&quot; To take this into consideration, penalty points for corresponding high SL bunsetsus are not given to paths. For high SL bunsetsus, B, and BI, to be corresponding, they have to be of the same type, and the path contains the element a(i,j). We define two bunsetsus to be of the same type if: For example, &quot;KARE(he)-WA&quot; and &quot;KANOJO(she)-WA&quot; are of the same type (noun + postposition &quot;WA&quot;). So are &quot;HASHIREBA(if run)&quot; and &quot;ARUKEBA(if walk)&quot; (conditional form of verb). These penalty points can be imposed on pairs of elements in a path, namely, extension steps of a path separately because each extension step of a path takes some bunsetsus in candidate conjuncts. 5. Some words frequently are the AW of the last bunsetsu in a CS or the IW following it. These words are shown in Table 3. Bonus points (6 points) are given to paths that have the CS ending with one of the words in Table 3. The best path from an element. As described in the preceding subsection, a path score is composed of points for its elements, penalty points for every path extension, and bonus points for its starting position. The key aspect is that these points can be calculated for every extension step of a path independently. For this reason, the greatest score path can be searched for by using dynamic programming method. Calculation is performed column by column going left from a non-zero element in the lowest row in An to the leftmost column in A. For each element in a column, the best partial path reaching it is found by extending the partial paths from the previous column and choosing the greatest score path (the left part of Figure 5). In extending partial paths, elements' points and penalty points are given to paths step by step. Then, among the paths to the leftmost column, the path that has the greatest score becomes the best path from the starting non-zero element (the right part of Figure 5). Of all the best paths from all the non-zero lowest row elements, the path that has the greatest path score (the maximum path) is chosen as defining the scope of the CS; i.e., the series of bunsetsus on the left side of the maximum path (pre-conjunct) and the series of bunsetsus under it (post-conjunct) are conjunctive (Figure 6). An EB (the last bunsetsu in the post-conjunct) corresponds to a KB (the last bunsetsu in the pre-conjunct), and it follows from the definition of a path that the EB has a certain similarity to the KB. On the other hand, when there are modifiers in both conjuncts, an SB shows where the leftmost modifier starts in its pre-conjunct. Since the modifiers in the pre-conjunct and those in the post-conjunct usually do not correspond exactly, an SB is determined mainly on the basis of the balance between preand post-conjuncts and is not always detected precisely. This problem is managed in the next stages when the relations between CSs in a sentence are adjusted and when a dependency structure is constructed (described in Section 4.1 and Section 5.2). Two examples of detecting CSs are shown in Figures 7 and 8. A chain of matrix elements with the same letters shows the maximum path for the KB marked with this letter and '>.' In the example sentence in Figure 7, the conjunctive predicative clause is detected correctly owing to the penalty points for the SL of the topic-marking postposition &quot;WA&quot; and the comma in the bunsetsu &quot;KAISHOU-SURU-TAME-NI-WA(in order to solve),&quot; which is outside of the CS, and owing to the bonus points for the IW &quot;KOTO(that)&quot; in the next right bunsetsu of the CS. The maximum path specifying a conjunctive structure. KORERA-NO 0 0 2 0 0 0 0 0 0 0 0 0 0 (these) AIMAISEI-WO 0 0 2 5 0 2 0 5 0 2 2 2 (ambiguities) KAISHOU-SURU-TAME-NI-WA, 0 0 0 8 0 2 0 5 0 0 2 (in order to solve) SONO 0 0 0 0 0 0 0 0 0 0 (the) SUBblb-NO 2 0 2 0 2 7 2 (all) KANOUSEI-WO 2 2 2 (possibility) , a>HYOUKA-SHI, 0 4 6'40 0 2 (evaluate) SAITEKI-TO 0 2 0 2 2 2 (to be optimum) KB/ OMOWA-RERU 0 2 0 0 0 (be thought) KAI-WO 0 2 2 2 (the answer) DOUSHUTSU-SURU 0 o 0 (derive) KOTO-MO 2 2 (that) HITOTSU-NO 2 (one) HOUHOU-DEARU. (be way) (57characters) In order to solve these ambiguities, one way is to evaluate all the possibility and to derive the answer which is thought to be optimum. An example of detecting conjunctive structures. hi the sentence illustrated in Figure 8, the conjunctive noun phrase, in which three nouns are conjoined, is detected correctly (chains of 'a' and 'b'). Consecutive overlapping CSs express a CS consisting of more than two conjuncts and will thus be merged into one CS (as described in Section 4). In this example, the conjunctive predicative clause that contains the conjunctive noun phrase is also detected correctly (the 'c chain). ZOKUSEI-NI-KANSURU 2 0 (concerning an attribute) 2-31-JOUHOU-T0-SHITE 2 k 6, (as the secondary information) c›SAI-HENSEI-SHL 0 0 56 (be reorganized) KB --&quot; SAKUIN-NO 2 0 (of an index) KATACHI-DE 0 (in the form) KIROKU-SHITE-OKU. (be recorded) (52characters) Concretely, document information is reorganized as the secondary information concerning an attribute such as a title, an author, a theme, and is recorded in the form of an index. An example of detecting conjunctive structures. In a long Japanese sentence two or more CSs often exist, overlapping with each other. In such cases, we have to adjust their relations in a sentence after their scopes have been detected. This adjustment is done by checking relations in all pairs of CSs and merging all the relations. Through this adjustment process, CSs consisting of three or more conjuncts are detected. Furthermore, CSs with incorrect relations, if they exist, are found, and retrials of detecting their scopes are done. As a result of this adjustment process, we get a reduced sentence form. The details of these processes will be given in the following section. The scope of a CS is represented by a three-tuple: {position of SB, position of KB, position of EB}. Let us suppose that two CSs exist in a sentence; the prior one, X, has a scope represented by {xl, x2, x3}, and the posterior one, Y, has a scope represented by {yl, y2, y3} (see Figure 9). When two CSs are detected by the previously described dynamic programming method as overlapping each other, in this case yl < x3, there is a variety of possible cases according to the relation among xl, x2, and yl and that among y2, y3, and x3 as shown in Figure 9. These 16 possible cases of two CSs overlapping each other are classified into three different relations, and the correction of CSs is performed for each relation in the following way: Brother relation (case F in Figure 9): In the previous step of detecting the scopes of CSs, a CS that consists of more than two conjuncts is detected as composed of consecutive CSs, each of which consists of two conjuncts. In this case, two adjoining CSs have a brother relation. Consecutive CSs that are in a brother relation are merged into one CS. Parent—child relation (cases A, B, C, D, E, G, M, and N in Figure 9): Another actual relation between two CSs is a parent—child relation, in which a pre- or post-conjunct of a CS includes another CS. Cases D, H, A relation between two conjunctive structures. M, and N illustrate this relation. Cases A, B, C, and G fall into this category when a pre-conjunct of a posterior CS (Y) is extended to the left to include a prior CS (X), because X is considered to be a modifier in Y's pre-conjunct.2 Case E also falls into the parent—child category by extending X's post-conjunct to the right to include Y. This is because the EB of the extended X (that is, Y's EB) can correspond to X's KB through the EB of the original X (that is, Y's KB). Apart from case E, a post-conjunct is not extended to the right. Therefore, cases I and J do not come into this relation. Incorrect relation (cases I, J, K, L, 0, and P in Figure 9): These relations do not exist in actual sentences and are caused only by incorrect detection of CSs. Therefore, a retrial of detecting their scopes is done in the way described in the following section.
6 QXX 5 XXX 4 XXX. An example of redetecting a conjunctive structure under an incorrect relation between conjunctive structures. 4.2 Retrial of Detecting Overlapping Conjunctive Structures with Incorrect Interrelations If two CSs have a incorrect relation in a sentence as described earlier, a retrial is conducted to get the proper CSs. In this case, the CS that has the larger CS score is regarded as correct, and a new CS concerning the KB whose old CS had a smaller score is detected so that the new CS does not have an incorrect relation with the other CS. For example, when the CSs X and Y (X precedes Y) have an incorrect relation and Y has a smaller score than X, the range of yl and y3, which will give a correct relation with x1, x2, x3, and y2, is determined from the relations in Figure 9.3 Then, the new CS is identified whose similarity score is the greatest in this restricted range of yl and y3, ignoring paths that start from and end with elements outside the restricted range in the dynamic programming method. An example of redetecting a CS is shown in Figure 10. In this example only a pair of yl and y3, (6, 7), gives a correct relation so that the scope of the CS is determined uniquely without the dynamic programming method. If there exist two or more CS pairs in a sentence that all have incorrect relations, the redetection is done on the pair whose difference of scores is the greatest. Whenever the redetection is done on one pair of CSs, the relations of all pairs of CSs in a sentence are checked and contradictory relations are corrected by the previously described process. This continues till no pair of CSs with an incorrect relation exists in the sentence. An example of a reduced sentence. As for the sentence in Figure 8, the following CSs are detected: Because CSI and CS2 are found to be in a brother relation by checking their overlap relation, they are merged into one CS (CSI-2: [HYOUDAI(a tit/e),HCHOSHA(an author),]- [SHUDAI-NADO-NO(such as a theme)]). Then, because CS3 is found to be a parent CS of CS2, that is, a parent CS of CS1-2, its pre-conjunct is extended to contain CS1-2. As a result of this process, the reduced form of a sentence is obtained as shown in Figure 11.
5.. As described in the preceding sections, information about CSs can be used to reduce a sentence into a simpler form. Consequently, a dependency structure of an entire sentence can be obtained by applying relatively simple head-dependent rules to CSs and the sentence. Another serious problem regarding CSs, in addition to the ambiguity of scope, is the ellipses that may occur in the components of CSs. We recover the omitted components in the stage of dependency analysis. We will explain this process in the following. In this paper, the goal of the syntactic analysis is to transform a sentence into a dependency tree structure in which a dependent bunsetsu node is placed as a child node of its head bunsetsu node. In a Japanese sentence, because each bunsetsu depends on one of the bunsetsus to the right of it, a sentence can be transformed into a tree whose root node is the last bunsetsu in the sentence. This left-to-right head-dependent relation is characteristic of the sentential structure of Japanese, and the dependency analysis fits this very well. First, each conjunct of the CSs is analyzed. If there are two or more CSs in a nested structure in a sentence (i.e., having parent—child relations), each CS is analyzed from the innermost CS in the order of nesting level. Then finally, the main sentential component is analyzed. Because the pre- and post-conjuncts have their own consistent structures and meanings, they are parsed independently into dependency trees. The root nodes of these trees are the KB and the EB (the last bunsetsu of each conjunct).4 After analyzing a CS, a new node, called the CS node, is created that has two child nodes, KB and EB. The CS node inherits the property of the EB when it depends on a bunsetsu to the right of it, and it inherits the property of the KB and the EB when it governs a bunsetsu to the left of it. In the next level analysis (the term we give to the analysis of its parent CS or of the whole sentence if no parent CS exists), the CS node is handled as a symbol. This means that bunsetsus outside a CS can no longer depend on bunsetsus in it, except the KB and the EB. Even in the case of a CS that consists of more than two conjuncts, the same analysis takes place, except that the dependency tree of the CS is composed of more than two sub-trees into which each conjunct is parsed. Parsing a series of bunsetsus in a certain range (conjuncts of CSs, or a whole sentence after merging all the CSs into CS nodes) is performed in the following way. The head bunsetsu is determined from right to left for each bunsetsu in the range of bunsetsus to the right of it with a no-cross condition.' The type of bunsetsu as a head is classified into two types, NB and PB.6 Whether a bunsetsu depends on NB or PB is determined by the conjugation of its IW or by the type of its AW. For example, an NB with a postposition &quot;NO&quot; can depend on an NB, and a conditional form of a PB (ending with &quot;BA&quot;) can depend on a PB. When a bunsetsu can depend on two or more bunsetsus in the range, its head is determined by the following heuristics: bunsetsu accompanying a comma usually depends on a bunsetsu farther away than the nearest one. Based on our observation we consider such a bunsetsu to depend on the second nearest head. These rules are rather simple, but they are still useful when applied to the reduced form of a sentence, as shown in the discussion of the experiments. We illustrate this process for the sentence in Figure 12. At first, the CS [HYOUDAI(a title),]-[CHOSHA(an author),]- [SHUDAI-NADO-NO(such as a theme)] is analyzed; because each conjunct consists of only one bunsetsu, the analysis results only in creating Sadao Kurohashi and Makoto Nagao Syntactic Analysis Method a CS node and assigning each bunsetsu to it (Figure 12a: 'PARA' is the CS node, and the nodes accompanying '<P>' are the root nodes of the dependency trees for conjuncts). Next, the pre- and post-conjuncts [HYOUDAI(a title)/ —SAI-HENSEI-SHI(be reorganized),]- [SAKUIN-NO(of an index). • •KIROKU-SHITE-OKU(be recorded).] are analyzed and transformed into dependency trees, and another CS node is created (Figure 12b). Finally, the whole sentence is analyzed, and its dependency tree is obtained. Our method of detecting a CS cannot find where the pre-conjunct begins with complete certainty. For this reason, it is necessary to check whether some modifiers' (bunsetsus) to the left of the detected SB can be included in the CS in the stage of dependency analysis. This left-side extension is performed only on CSs containing PBs. This is because modifiers to the left of a CS containing no PB rarely depend on the preconjunct alone; usually they depend on the entire CS (this head-dependent relation is handled as the relation to the CS node in the next level analysis) or on a bunsetsu after the CS. When a CS contains PBs, the analysis of its pre-conjunct does not stop at the detected SB, but continues to the bunsetsus to the left of the SB as follows: If the bunsetsu depends on a certain bunsetsu apart from the KB in the pre-conjunct, the bunsetsu is regarded as a part of the CS, and the extension operation is continued (Figure 13). Otherwise the extension operation is stopped. The KB is excluded from the candidates for a head, because the head-dependent relation to the KB is handled as the relation to the CS node in the next level analysis. A modifier ellipsis. In the sentence in Figure 7, the bunsetsu &quot;SONO(the),&quot; which can depend on &quot;KANOUSEI-WO(possibility),&quot; is regarded as contained in the CS, but the bunsetsu &quot;KAISHOU-SURU-TAME-NI-WA(in order to solve),&quot; which accompanies &quot;WA&quot; and a comma, is not contained in the CS, and the extension of the CS thus ends here. Through this extension of the CS, the issue of omitted modifiers in a CS can be addressed. When the same modifiers exist in both conjuncts, the modifiers in its postconjunct are often omitted (Figures 14a and 14b). Among these omitted modifiers, the ones that depend on the EB do not have to be recovered, because a remaining modifier that depends on the KB is treated as depending on the CS node, which means that the Sadao Kurohashi and Makoto Nagao Syntactic Analysis Method MOCHIRON, 0 0 0 0 0 0 0 MONDAI-NO 2 0 2 0 0 2 DAI-BUBUN-WA, 0 2 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 (of course) 2 0 0 2 5a 2 0 5 2 0 2 0 2 0 2 0 (of the problem) 2 0 0 5 2 2a0 2 2 0 2 0 2 0 2 0 (a major part) ARU00800000008a000000000(acertain) GENSHOU-WO 0 0 2 5 00 22 2 0 2a2 02 0 20 2 0(phenomenon) SHIRABERU-NONI 0 0 0 0 6 0 0 0 0 0 0a2 0 2 0 2 0 2 (to check) DONNA 0 0 0 0 0 0 0 8 0 0 Oa 0 0 0 0 0 0 (what) ARGORITHM-GA 2 0 0 5 2 7 0 2 2 0 2a 0 2 0 2 0 (algorithm) HITSUYOU-KA-WO 0 0 2 2 2 0 2 2 0 2 Oa 2 0 2 0 (be necessary) SEIKAKU-NI 0 0 0 0 0 0 0 0 0 0 Oa 0 0 0 (accurately) MISADAMERU 0 0 0 0 0 0 2 0 2 0 2a 0 2 (to ascertain) a> KOTO-DE-ARU-GA, 0 0 0 0 0 2 0 2 0 2 Oa 2a (be, but) .„%toillit-Tia:1,10-... 0 5 2 0 2 0 2 0 2 0 (of a computer) An example of analyzing a long sentence into a dependency structure. remaining modifier also depends on the EB (Figure 14c). The problem is to recover the omitted modifiers that depend on a bunsetsu in the post-conjunct except the EB. The key point is that Y and Y' in Figure 14b have a great similarity because they contain not only similar bunsetsus, KB and EB, but also very similar bunsetsus that originally governed the same modifier X. Therefore, we can detect the possibility of modifier ellipsis by checking the similarity score of the CS obtained when detecting its scope. When the extension operation is performed on the pre-conjunct of a CS that is a strong CS, we recover the omitted modifiers by interpreting a bunsetsu that depends on a bunsetsu (B1) in its pre-conjunct as also depending on the bunsetsu (131) in its post-conjunct corresponding to B, (Figure 14d) (we think B, corresponds to B1 when the path specifying these conjuncts contains an element a(i,j)). A CS that satisfies the following two conditions is called a strong CS: For example, in the sentence in Figure 15, the detected CS [TASUKE-NI(a help). • ARE-BA(sometimesbe),]- [SAMATAGE-NI(an obstacle). • .ARU(sometimesbe).] satisfies the above two conditions. Thus, by checking the relation between the CS and the outside modifier phrase &quot;SONO KAIHATSU-NO(to its development)&quot; the phrase is considered to depend on both of the bunsetsus &quot;TASUKE-NI(a help)&quot; and &quot;SAMATAGE-NI(an obstacle).&quot; In the same way, &quot;COMPUTER-NO ARCHITECTURE-GA(the architecture of a computer)&quot; is again thought to depend on both the bunsetsu &quot;NARU(be)&quot; in the preconjunct and the bunsetsu &quot;NARU(be)&quot; in the post-conjunct. The dependency tree of this sentence that is supplemented correctly with the omitted modifiers is shown in Figure 15. Another type of ellipsis in CSs that is a serious problem is the omission of predicates in incomplete conjunctive structures. This type of ellipsis can be found by examining the failures of dependency analysis. The failure of dependency analysis here means that a head bunsetsu cannot be found for a certain bunsetsu in a certain range of analysis. When two predicates in a conjunctive predicative clause are the same, the first predicate is sometimes omitted and the remaining part constitutes the incomplete conjunctive structure (Figures 16a and 16b). In these structures, neither conjunct can be parsed into a dependency tree, because there is no predicate in it that should become the root node of a dependency tree. For this reason, by checking dependency analysis failures, we find incomplete conjunctive structures and start the process of supplementing the CSs with omitted predicates. The conditions for incomplete conjunctive structures are the following (Figure 16c): The key point is that it is important for successful analysis of CSs containing predicate ellipses to detect the correct scope of the incomplete conjunctive structures. In most cases their scopes can be detected correctly from a significant similarity between the A predicate ellipsis. pre- and post-conjuncts that contain the case components of the same predicate. That is, the detection of a CS based on the similarity measure smoothly leads to the omitted predicate being recovered. A method that merely searches for the EB as the most similar bunsetsu for the KB might detect an incorrect scope, and in this case the predicate ellipsis cannot be detected, as shown in Figure 16d. When a CS is regarded as an incomplete conjunctive structure, each series of bunsetsus to the left of an FB is analyzed into a dependency tree, and its root node (FB) is connected to a CS node in addition to the KB and the EB (Figure 16e). When the head of the CS node is found in the next level analysis, the head is considered to be the omitted predicate and the dependency tree is transformed by supplementing it with this predicate in the pre-conjunct, as shown in Figure 16f. When the postposition of An example of analyzing a long sentence into a dependency structure. the KB is also omitted (in Figure 16b, p2 is omitted in the KB), the KB is supplemented with the postposition of the EB. For example, in the sentence in Figure 17, the CS [DENRYU-GEN-NI(as current source) PNP-TRANSISTOR(the pnp transistor),]- [SWITCHING-NI(as switching) NPNTRANSISTOR-W0(the npn transistor)] is recognized as an incomplete conjunctive structure, since the head of the bunsetsu &quot;DENRYU-GEN-NI(as current source)&quot; in the preconjunct and the bunsetsu &quot;SWITCHING-NI(as switching)&quot; in the post-conjunct are not found, and both of them have the same postposition &quot;NI.&quot; As a result, FB &quot;DENRYUGEN-NI(as current source)&quot; and FB &quot;SWITCHING-NI(as switching)&quot; are connected to the CS node in addition to the KB and EB. In the analysis of the parent CS, it is made clear that this CS node depends on bunsetsu &quot;SHIYOU-SHI(be used),&quot; and the dependency tree is transformed by supplementing it with the omitted predicate and the omitted postposition, as shown in Figure 17 (this sentence also contains a conjuncAn example of redetecting a conjunctive structure under a failure of analyzing a dependency structure. tive noun phrase and a conjunctive predicative clause, and all of them are analyzed correctly). On the other hand, if the dependency analysis of a CS fails and the conditions for incomplete conjunctive structures are not satisfied, we postulate that the detected scope of a CS is incorrect and start the detection of a new CS for the KB. To find a new CS whose pre- and post-conjuncts can be analyzed successfully, the positions of the SB and EB are restricted as follows: SB: We examine head-dependent relations in a series of bunsetsus from the first bunsetsu in a sentence to the KB. If there exists a bunsetsu in that range whose head is not found, the analysis must fail for a CS whose pre-conjunct contains this bunsetsu. Therefore, the SB is restricted to be to the right of this bunsetsu. EB: We examine head-dependent relations in all series of bunsetsus that can be a post-conjunct. If the analysis of a certain series of bunsetsus fails, the last bunsetsu of this series cannot become an EB of a new CS. After reanalysis of the CS, the analysis returns to the reduction of a sentence by checking the relations between all pairs of CSs. An example of redetecting a CS is shown in Figure 18.
6.. We report the results of analyzing 150 test sentences, which are different from the 30 training sentences used in the parameter adjustment, to illustrate the effectiveness of our method. Test sentences are longer and more complex than sentences in common usage and consist of 50 sentences composed of 30 to 50 characters, 50 sentences of 50 to 80 characters, and 50 sentences of over 80 characters.8 All the example sentences shown in this paper belong to these test sentences. We evaluated the results of analyzing 150 Japanese sentences. First, as shown in Table 4, we classified all the bunsetsus in the 150 sentences into five types: KBs of conjunctive noun phrases, KBs of conjunctive predicative clauses, KBs of incomplete conjunctive structures, bunsetsus that depend on NBs, and bunsetsus that depend on PBs. Then we manually checked these KBs to see whether their corresponding EBs were analyzed correctly; for other bunsetsus, we manually checked whether their heads were analyzed correctly. Table 4 shows a high success ratio for the detection of CSs and a very high success ratio of the dependency analysis on bunsetsu level. These results suggest that the simple heuristic rules for head-dependent relations are good enough to analyze each phrase/clause of the CSs internally and the sentence in which CSs are merged into nodes, respectively. Second, as shown in the upper part of Table 5, we classified the 150 sentences by their length and according to whether they contain CSs or not. We manually checked whether CSs in each sentence were detected correctly, if they exit, and whether their dependency structures were analyzed correctly. The table shows that CSs are generally well recognized, but the total success ratio of getting proper dependency structures is 65% (97/150). To determine how well a conventional method (described in the introduction) works on such long sentences, we parsed the same test sentences by another method simulating a conventional one. This method uses a simple rule, instead of our dynamic programming method, that a KB depends on the most similar CB (calculated by the process in Section 3.1). It parses a sentence, determining the head bunsetsu from right to left for each bunsetsu in the sentence with this simple rule for CSs, heuristic rules for head-dependent relations (described in Section 5.1), and the no-cross condition. The result of this method (the lower part of Table 5) clearly shows the superiority of our method over the conventional method. Third, we report the results of the redetection of CSs and the recovery of omitted components. • The redetection of CSs was activated only for incorrect CSs, so we can conclude that the conditions for performing redetection are reasonable. Out of 215 CSs, 180 were obtained correctly by the first CS detection (the success ratio is 84%). Five CSs were redetected because of incorrect relation to other CSs, and all of them were analyzed correctly. Eight CSs were redetected because of the failure in obtaining a dependency structure, and five out of them were recognized correctly. Finally, 190 CSs out of 215 were obtained correctly (the success ratio is 88%). • Eleven out of 215 detected CSs satisfied the conditions for a strong CS. One strong CS was an incorrectly detected CS, and this problem is mentioned in the following section. For two of the ten correctly detected strong CSs, the omitted components that depend on one of the bunsetsus a: The number of sentences that were classified into this category. b: The number of sentences in which all the CSs were detected correctly. c: The number of sentences whose whole dependency structures were analyzed correctly. in the post-conjunct other than the EB (the case of Figure 14d) were recovered correctly. There was no modifier ellipsis of this type that could not be found by our method in the test sentences. Other strong CSs had omitted modifiers depending on the EB (the case of Figure 14c), or had no omitted modifiers. • There were two incomplete conjunctive structures in the test sentences. Both of them were found by our method, and the omitted predicates concerning them were recovered correctly. e We analyzed sentences of considerable length, consisting of many bunsetsus (the average number of bunsetsus in a sentence was 14.3). There are many candidate heads for each bunsetsu in such a sentence, making the possibility for incorrect headdependent relations in the dependency structure of a sentence significant. Considering these conditions and comparing results using our method with those using the conventional method, the total success ratio for determining correct dependency structures for a complete sentence, 65%, can be considered to be fairly good. Although one-third of the dependency structures after this analysis process included some errors, their major structures, that is, their conjunctive structures and basic dependency structures, were detected correctly in most cases. This can be seen from the high scores in Table 4. It is possible to classify some of the causes of incorrect analyses arising from our method. Table 6 gives some examples of errors in recognizing CSs. Here the underlined bunsetsus are KBs. The incorrectly calculated scope of a CS is enclosed by square brackets, and the correct scope is enclosed by curly brackets. • Our assumption that both conjuncts contain about the same number of bunsetsus is useful in detecting most CSs. Even if the number of bunsetsus of two conjuncts is somewhat different, a correct CS can be obtained with the help of the penalty points, which reduces the possibility that a CS contains high SL bunsetsus, and with the extension of the pre-conjunct, and so on. However, it is difficult to recognize a CS that is extremely unbalanced. In sentence (i) in Table 6, the KB &quot;TSUKATTE(using)&quot; in the beginning part of the sentence should correspond to the last CB &quot;SEISAKU-SHITE-IRU(crea ter and a short clause &quot;KORE-WO TSUKATTE(using it)&quot; corresponds to the following We have shown that a variety of conjunctive structures in Japanese sentences can be detected using a certain similarity measure and that information about conjunctive structures enables the syntactic analysis to be more robust and successful in handling long and complex sentences. There are still some expressions that cannot be recognized by the proposed method, and one might hasten to rely on semantic information in the hope of getting proper analyses for these remaining cases. Semantic information, however, is not as reliable as syntactic information, and we have to make further efforts to find some syntactic rather than semantic relations even in these difficult cases. Phrase structure grammar or other existing grammar formalisms may not be applicable in detecting the subtle syntactic relations among several words in a sentence. We have to find new methods to detect them. To make further progress in this field, we feel it is necessary to be able to take into consideration more possible interactions among a wider range of components of long sentences.