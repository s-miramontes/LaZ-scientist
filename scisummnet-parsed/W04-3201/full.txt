1 Introduction. Recent work has shown that discriminative techniques frequently achieve classification accuracy that is superior to generative techniques, over a wide range of tasks. The empirical utility of models such as logistic regression and support vector machines (SVMs) in flat classification tasks like text categorization, word-sense disambiguation, and relevance routing has been repeatedly demonstrated. For sequence tasks like part-of-speech tagging or named-entity extraction, recent top-performing systems have also generally been based on discriminative sequence models, like conditional Markov models (Toutanova et al., 2003) or conditional random fields (Lafferty et al., 2001). A number of recent papers have considered discriminative approaches for natural language parsing (Johnson et al., 1999; Collins, 2000; Johnson, 2001; Geman and Johnson, 2002; Miyao and Tsujii, 2002; Clark and Curran, 2004; Kaplan et al., 2004; Collins, 2004). Broadly speaking, these approaches fall into two categories, reranking and dynamic programming approaches. In reranking methods (Johnson et al., 1999; Collins, 2000; Shen et al., 2003), an initial parser is used to generate a number of candidate parses. A discriminative model is then used to choose between these candidates. In dynamic programming methods, a large number of candidate parse trees are represented compactly in a parse tree forest or chart. Given sufficiently “local” features, the decoding and parameter estimation problems can be solved using dynamic programming algorithms. For example, (Johnson, 2001; Geman and Johnson, 2002; Miyao and Tsujii, 2002; Clark and Curran, 2004; Kaplan et al., 2004) describe approaches based on conditional log-linear (maximum entropy) models, where variants of the inside-outside algorithm can be used to efficiently calculate gradients of the log-likelihood function, despite the exponential number of trees represented by the parse forest. In this paper, we describe a dynamic programming approach to discriminative parsing that is an alternative to maximum entropy estimation. Our method extends the maxmargin approach of Taskar et al. (2003) to the case of context-free grammars. The present method has several compelling advantages. Unlike reranking methods, which consider only a pre-pruned selection of “good” parses, our method is an end-to-end discriminative model over the full space of parses. This distinction can be very significant, as the set of n-best parses often does not contain the true parse. For example, in the work of Collins (2000), 41% of the correct parses were not in the candidate pool of —30-best parses. Unlike previous dynamic programming approaches, which were based on maximum entropy estimation, our method incorporates an articulated loss function which penalizes larger tree discrepancies more severely than smaller ones.1 Moreover, like perceptron-based learning, it requires only the calculation of Viterbi trees, rather than expectations over all trees (for example using the inside-outside algorithm). In practice, it converges in many fewer iterations than CRF-like approaches. For example, while our approach generally converged in 20-30 iterations, Clark and Curran (2004) report experiments involving 479 iterations of training for one model, and 1550 iterations for another. The primary contribution of this paper is the extension of the max-margin approach of Taskar et al. (2003) to context free grammars. We show that this framework allows high-accuracy parsing in cubic time by exploiting novel kinds of lexical information.
2 Discriminative Parsing. In the discriminative parsing task, we want to learn a function f : X —* Y, where X is a set of sentences, and Y is a set of valid parse trees according to a fixed grammar G. G maps an input x E X to a set of candidate parses G(x) C Y.2 We assume a loss function L : X x Y x Y —* R+. The function L(x, y, ˆy) measures the penalty for proposing the parse yˆ for x when y is the true parse. This penalty may be defined, for example, as the number of labeled spans on which the two trees do not agree. In general we assume that L(x, y, ˆy) = 0 for y = ˆy. Given labeled training examples (xi, yi) for i = 1... n, we seek a function f with small expected loss on unseen sentences. The functions we consider take the following linear discriminant form: where (·, ·) denotes the vector inner product, w E Rd and Φ is a feature-vector representation of a parse tree Φ : X x Y —* Rd (see examples below).3 Note that this class of functions includes Viterbi PCFG parsers, where the feature-vector consists of the counts of the productions used in the parse, and the parameters w are the logprobabilities of those productions. The traditional method of estimating the parameters of PCFGs assumes a generative grammar that defines P(x, y) and maximizes the joint log-likelihood Ei log P(xi, yi) (with some regularization). A alternative probabilistic approach is to estimate the parameters discriminatively by maximizing conditional loglikelihood. For example, the maximum entropy approach (Johnson, 2001) defines a conditional log-linear model: where Zw(x) = Ey∈G(x) exp{(w, Φ(x, y))}, and maximizes the conditional log-likelihood of the sample, Ei log P(yi  |xi), (with some regularization). In this paper, we advocate a different estimation criterion, inspired by the max-margin principle of SVMs. Max-margin estimation has been used for parse reranking (Collins, 2000). Recently, it has also been extended to graphical models (Taskar et al., 2003; Altun et al., 2003) and shown to outperform the standard maxlikelihood methods. The main idea is to forego the probabilistic interpretation, and directly ensure that for all i in the training data. We define the margin of the parameters w on the example i and parse y as the difference in value between the true parse yi and y: where `bi,y = `b(xi, y), and `bi,yz = `b(xi, yi). Intuitively, the size of the margin quantifies the confidence in rejecting the mistaken parse y using the function fw(x), modulo the scale of the parameters ||w||. We would like this rejection confidence to be larger when the mistake y is more severe, i.e. L(xi, yi, y) is large. We can express this desideratum as an optimization problem: where Li,y = L(xi, yi, y). This quadratic program aims to separate each y ∈ G(xi) from the target parse yi by a margin that is proportional to the loss L(xi, yi, y). After a standard transformation, in which maximizing the margin is reformulated as minimizing the scale of the weights (for a fixed margin of 1), we get the following program: The addition of non-negative slack variables Si allows one to increase the global margin by paying a local penalty on some outlying examples. The constant C dictates the desired trade-off between margin size and outliers. Note that this formulation has an exponential number of constraints, one for each possible parse y for each sentence i. We address this issue in section 4. In SVMs, the optimization problem is solved by working with the dual of a quadratic program analogous to Eq. 2. For our problem, just as for SVMs, the dual has important computational advantages, including the “kernel trick,” which allows the efficient use of high-dimensional features spaces endowed with efficient dot products (Cristianini and Shawe-Taylor, 2000). Moreover, the dual view plays a crucial role in circumventing the exponential size of the primal problem. In Eq. 2, there is a constraint for each mistake y one might make on each example i, which rules out that mistake. For each mistake-exclusion constraint, the dual contains a variable αi,y. Intuitively, the magnitude of αi,y is proportional to the attention we must pay to that mistake in order not to make it. The dual of Eq. 2 (after adding additional variables αi,yz and renormalizing by C) is given by: where Ii,y = I(xi, yi, y) indicates whether y is the true parse yi. Given the dual solution α*, the solution to the primal problem w* is simply a weighted linear combination of the feature vectors of the correct parse and mistaken parses: This is the precise sense in which mistakes with large α contribute more strongly to the model.
3 Factored Models. There is a major problem with both the primal and the dual formulations above: since each potential mistake must be ruled out, the number of variables or constraints is proportional to |G(x)|, the number of possible parse trees. Even in grammars without unary chains or empty elements, the number of parses is generally exponential in the length of the sentence, so we cannot expect to solve the above problem without any assumptions about the feature-vector representation `b and loss function L. For that matter, for arbitrary representations, to find the best parse given a weight vector, we would have no choice but to enumerate all trees and score them. However, our grammars and representations are generally structured to enable efficient inference. For example, we usually assign scores to local parts of the parse such as PCFG productions. Such factored models have shared substructure properties which permit dynamic programming decompositions. In this section, we describe how this kind of decomposition can be done over the dual α distributions. The idea of this decomposition has previously been used for sequences and other Markov random fields in Taskar et al. (2003), but the present extension to CFGs is novel. For clarity of presentation, we restrict the grammar to be in Chomsky normal form (CNF), where all rules in the grammar are of the form hA → B Ci or hA → ai, where A, B and C are non-terminal symbols, and a is some terminal symbol. For example figure 1(a) shows a tree in this form. We will represent each parse as a set of two types of parts. Parts of the first type are single constituent tuples (A, s, e, i), consisting of a non-terminal A, start-point s and end-point e, and sentence i, such as r in figure 1(b). In this representation, indices s and e refer to positions between words, rather than to words themselves. These parts correspond to the traditional notion of an edge in a tabular parser. Parts of the second type consist of CF-ruletuples (A —* B C, s, m, e, i). The tuple specifies a particular rule A —* B C, and its position, including split point m, within the sentence i, such as q in figure 1(b), and corresponds to the traditional notion of a traversal in a tabular parser. Note that parts for a basic PCFG model are not just rewrites (which can occur multiple times), but rather anchored items. Formally, we assume some countable set of parts, R. We also assume a function R which maps each object (x, y) E X x Y to a finite subset of R. Thus R(x, y) is the set of parts belonging to a particular parse. Equivalently, the function R(x, y) maps a derivation y to the set of parts which it includes. Because all rules are in binary-branching form, |R(x, y) |is constant across different derivations y for the same input sentence x. We assume that the feature vector for a sentence and parse tree (x, y) decomposes into a sum of the feature vectors for its parts: In CFGs, the function O(x, r) can be any function mapping a rule production and its position in the sentence x, to some feature vector representation. For example, O could include features which identify the rule used in the production, or features which track the rule identity together with features of the words at positions s, m, e, and neighboring positions in the sentence x. In addition, we assume that the loss function L(x, y, ˆy) also decomposes into a sum of local loss functions l(x, y, r) over parts, as follows: One approach would be to define l(x, y, r) to be 0 only if the non-terminal A spans words s ... e in the derivation y and 1 otherwise. This would lead to L(x, y, ˆy) tracking the number of “constituent errors” in ˆy, where a constituent is a tuple such as (A, s, e, i). Another, more strict definition would be to define l(x, y, r) to be 0 if r of the type (A —* B C, s, m, e, i) is in the derivation y and 1 otherwise. This definition would lead to L(x, y, ˆy) being the number of CFrule-tuples in yˆ which are not seen in y.4 Finally, we define indicator variables I(x, y, r) which are 1 if r ∈ R(x, y), 0 otherwise. We also define sets R(xi) = ∪yEG(xi)R(xi, y) for the training examples i = 1... n. Thus, R(xi) is the set of parts that is seen in at least one of the objects {(xi, y) : y ∈ G(xi)}.
4 Factored Dual. The dual in Eq. 3 involves variables αi,y for all i = 1... n, y ∈ G(xi), and the objective is quadratic in these α variables. In addition, it turns out that the set of dual variables αi = {αi,y : y ∈ G(xi)} for each example i is constrained to be non-negative and sum to 1. It is interesting that, while the parameters w lose their probabilistic interpretation, the dual variables αi for each sentence actually form a kind of probability distribution. Furthermore, the objective can be expressed in terms of expectations with respect to these distributions: We now consider how to efficiently solve the max-margin optimization problem for a factored model. As shown in Taskar et al. (2003), the dual in Eq. 3 can be reframed using “marginal” terms. We will also find it useful to consider this alternative formulation of the dual. Given dual variables α, we define the marginals µi,r(α) for all i, r, as follows: Since the dual variables αi form probability distributions over parse trees for each sentence i, the marginals µi,r(αi) represent the proportion of parses that would contain part r if they were drawn from a distribution αi. Note that the number of such marginal terms is the number of parts, which is polynomial in the length of the sentence. Now consider the dual objective Q(α) in Eq. 3. It can be shown that the original objective Q(α) can be expressed in terms of these 4The constituent loss function does not exactly correspond to the standard scoring metrics, such as F1 or crossing brackets, but shares the sensitivity to the number of differences between trees. We have not thoroughly investigated the exact interplay between the various loss choices and the various parsing metrics. We used the constituent loss in our experiments. marginals as Qm(µ(α)), where µ(α) is the vector with components µi,r(αi), and Qm(µ) is defined as: where li,r = l(xi, yi, r), φi,r = φ(xi, r) and Ii,r = I(xi, yi, r). This follows from substituting the factored definitions of the feature representation Φ and loss function L together with definition of marginals. Having expressed the objective in terms of a polynomial number of variables, we now turn to the constraints on these variables. The feasible set for α is Now let Δm be the space of marginal vectors which are feasible: Then our original optimization problem can be reframed as maxµEAm Qm(µ). Fortunately, in case of PCFGs, the domain Δm can be described compactly with a polynomial number of linear constraints. Essentially, we need to enforce the condition that the expected proportions of parses having particular parts should be consistent with each other. Our marginals track constituent parts hA, s, e, ii and CF-rule-tuple parts hA → B C, s, m, e, ii The consistency constraints are precisely the insideoutside probability relations: where ni is the length of the sentence. In addition, we must ensure non-negativity and normalization to 1: µi,r ≥ 0; X µi,A,0,ni = 1. A The number of variables in our factored dual for CFGs is cubic in the length of the sentence, while the number of constraints is quadratic. This polynomial size formulation should be contrasted with the earlier formulation in Collins (2004), which has an exponential number of constraints.
5 Factored SMO. We have reduced the problem to a polynomial size QP, which, in principle, can be solved using standard QP toolkits. However, although the number of variables and constraints in the factored dual is polynomial in the size of the data, the number of coefficients in the quadratic term in the objective is very large: quadratic in the number of sentences and dependent on the sixth power of sentence length. Hence, in our experiments we use an online coordinate descent method analogous to the sequential minimal optimization (SMO) used for SVMs (Platt, 1999) and adapted to structured max-margin estimation in Taskar et al. (2003). We omit the details of the structured SMO procedure, but the important fact about this kind of training is that, similar to the basic perceptron approach, it only requires picking up sentences one at a time, checking what the best parse is according to the current primal and dual weights, and adjusting the weights.
6 Results. We used the Penn English Treebank for all of our experiments. We report results here for each model and setting trained and tested on only the sentences of length < 15 words. Aside from the length restriction, we used the standard splits: sections 2-21 for training (9753 sentences), 22 for development (603 sentences), and 23 for final testing (421 sentences). As a baseline, we trained a CNF transformation of the unlexicalized model of Klein and Manning (2003) on this data. The resulting grammar had 3975 non-terminal symbols and contained two kinds of productions: binary nonterminal rewrites and tag-word rewrites.5 The scores for the binary rewrites were estimated using unsmoothed relative frequency estimators. The tagging rewrites were estimated with a smoothed model of P(w|t), also using the model from Klein and Manning (2003). Figure 3 shows the performance of this model (GENERATIvE): 87.99 F1 on the test set. For the BAsIC max-margin model, we used exactly the same set of allowed rewrites (and therefore the same set of candidate parses) as in the generative case, but estimated their weights according to the discriminative method of section 4. Tag-word production weights were fixed to be the log of the generative P(w|t) model. That is, the only change between GENERATIvE and BAsIC is the use of the discriminative maximum-margin criterion in place of the generative maximum likelihood one. This change alone results in a small improvement (88.20 vs. 87.99 F1). On top of the basic model, we first added lexical features of each span; this gave a LEXICAL model. For a span (s, e) of a sentence x, the base lexical features were: These base features were conjoined with the span length for spans of length 3 and below, since short spans have highly distinct behaviors (see the examples below). The features are lexical in the sense than they allow specific words 5Unary rewrites were compiled into a single compound symbol, so for example a subject-gapped sentence would have label like s+vp. These symbols were expanded back into their source unary chain before parses were evaluated. and word pairs to influence the parse scores, but are distinct from traditional lexical features in several ways. First, there is no notion of headword here, nor is there any modeling of word-toword attachment. Rather, these features pick up on lexical trends in constituent boundaries, for example the trend that in the sentence The screen was a sea of red., the (length 2) span between the word was and the word of is unlikely to be a constituent. These non-head lexical features capture a potentially very different source of constraint on tree structures than head-argument pairs, one having to do more with linear syntactic preferences than lexical selection. Regardless of the relative merit of the two kinds of information, one clear advantage of the present approach is that inference in the resulting model remains cubic, since the dynamic program need not track items with distinguished headwords. With the addition of these features, the accuracy jumped past the generative baseline, to 88.44. As a concrete (and particularly clean) example of how these features can sway a decision, consider the sentence The Egyptian president said he would visit Libya today to resume the talks. The generative model incorrectly considers Libya today to be a base NP. However, this analysis is counter to the trend of today being a one-word constituent. Two features relevant to this trend are: (CONSTITUENT n first-word = today n length = 1) and (CONSTITUENT n lastword = today n length = 1). These features represent the preference of the word today for being the first and and last word in constituent spans of length 1.6 In the LEXICAL model, however, these features have quite large positive weights: 0.62 each. As a result, this model makes this parse decision correctly. Another kind of feature that can usefully be incorporated into the classification process is the output of other, auxiliary classifiers. For this kind of feature, one must take care that its reliability on the training not be vastly greater than its reliability on the test set. Otherwise, its weight will be artificially (and detrimentally) high. To ensure that such features are as noisy on the training data as the test data, we split the training into two folds. We then trained the auxiliary classifiers in jacknife fashion on each fold, and using their predictions as features on the other fold. The auxiliary classifiers were then retrained on the entire training set, and their predictions used as features on the development and test sets. We used two such auxiliary classifiers, giving a prediction feature for each span (these classifiers predicted only the presence or absence of a bracket over that span, not bracket labels). The first feature was the prediction of the generative baseline; this feature added little information, but made the learning phase faster. The second feature was the output of a flat classifier which was trained to predict whether single spans, in isolation, were constituents or not, based on a bundle of features including the list above, but also the following: the preceding, first, last, and following tag in the span, pairs of tags such as preceding-first, last-following, preceding-following, first-last, and the entire tag sequence. Tag features on the test sets were taken from a pretagging of the sentence by the tagger described in Toutanova et al. (2003). While the flat classifier alone was quite poor (P 78.77 / R 63.94 / F1 70.58), the resulting max-margin model (LEXICAL+AUX) scored 89.12 F1. To situate these numbers with respect to other models, the parser in Collins (1999), which is generative, lexicalized, and intricately smoothed scores 88.69 over the same train/test configuration. It is worth considering the cost of this kind of method. At training time, discriminative methods are inherently expensive, since they all involve iteratively checking current model performance on the training set, which means parsing the training set (usually many times). In our experiments, 10-20 iterations were generally required for convergence (except the BASIC model, which took about 100 iterations.) There are several nice aspects of the approach described here. First, it is driven by the repeated extraction, over the training examples, of incorrect parses which the model currently prefers over the true parses. The procedure that provides these parses need not sum over all parses, nor even necessarily find the Viterbi parses, to function. This allows a range of optimizations not possible for CRF-like approaches which must extract feature expectations from the entire set of parses.7 Nonetheless, generative approaches 7One tradeoff is that this approach is more inherently sequential and harder to parallelize. are vastly cheaper to train, since they must only collect counts from the training set. On the other hand, the max-margin approach does have the potential to incorporate many new kinds of features over the input, and the current feature set allows limited lexicalization in cubic time, unlike other lexicalized models (including the Collins model which it outperforms in the present limited experiments).
7 Conclusion. We have presented a maximum-margin approach to parsing, which allows a discriminative SVM-like objective to be applied to the parsing problem. Our framework permits the use of a rich variety of input features, while still decomposing in a way that exploits the shared substructure of parse trees in the standard way. On a test set of ≤ 15 word sentences, the featurerich model outperforms both its own natural generative baseline and the Collins parser on Fl. While like most discriminative models it is compute-intensive to train, it allows fast parsing, remaining cubic despite the incorporation of lexical features. This trade-off between the complexity, accuracy and efficiency of a parsing model is an important area of future research.
Acknowledgements. This work was supported in part by the Department of the Interior/DARPA under contract number NBCHD030010, a Microsoft Graduate Fellowship to the second author, and National Science Foundation grant 0347631 to the third author.