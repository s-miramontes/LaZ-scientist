1 Introduction. Inducing a weighted context-free grammar from flat text is a hard problem. A common starting point for weighted grammar induction is the Expectation-Maximization (EM) algorithm (Dempster et al., 1977; Baker, 1979). EM’s mediocre performance (Table 1) reflects two problems. First, it seeks to maximize likelihood, but a grammar that makes the training data likely does not necessarily assign a linguistically defensible syntactic structure. Second, the likelihood surface is not globally concave, and learners such as the EM algorithm can get trapped on local maxima (Charniak, 1993). We seek here to capitalize on the intuition that, at least early in learning, the learner should search primarily for string-local structure, because most structure is local.1 By penalizing dependencies between two words that are farther apart in the string, we obtain consistent improvements in accuracy of the learned model (§3). We then explore how gradually changing S over time affects learning (§4): we start out with a strong preference for short dependencies, then relax the preference. The new approach, structural annealing, often gives superior performance. An alternative structural bias is explored in §5. This approach views a sentence as a sequence of one or more yields of separate, independent trees. The points of segmentation are a hidden variable, and during learning all possible segmentations are entertained probabilistically. This allows the learner to accept hypotheses that explain the sentences as independent pieces. In §6 we briefly review contrastive estimation (Smith and Eisner, 2005a), relating it to the new method, and show its performance alone and when augmented with structural bias.
2 Task and Model. In this paper we use a simple unlexicalized dependency model due to Klein and Manning (2004). The model is a probabilistic head automaton grammar (Alshawi, 1996) with a “split” form that renders it parseable in cubic time (Eisner, 1997). Let x = (x1, x2, ..., xn) be the sentence. x0 is a special “wall” symbol, $, on the left of every sentence. A tree y is defined by a pair of functions yleft and yright (both {0, 1, 2,..., n} --, 211,2,...,n1) that map each word to its sets of left and right dependents, respectively. The graph is constrained to be a projective tree rooted at $: each word except $ has a single parent, and there are no cycles or crossing dependencies.2 yleft(0) is taken to be empty, and yright(0) contains the sentence’s single head. Let yi denote the subtree rooted at position i. The probability P(yi  |xi) of generating this subtree, given its head word xi, is defined recursively: where firsty(j) is a predicate defined to be true iff xj is the closest child (on either side) to its parent xi. The probability of the entire tree is given by pe(x, y) = P(y0  |$). The parameters O are the conditional distributions pstop and pchild. Experimental baseline: EM. Following common practice, we always replace words by part-ofspeech (POS) tags before training or testing. We used the EM algorithm to train this model on POS sequences in six languages. Complete experimental details are given in the appendix. Performance with unsupervised and supervised model selection across different λ values in add-λ smoothing and three initializers O(0) is reported in Table 1. The supervised-selected model is in the 40–55% F1-accuracy range on directed dependency attachments. (Here F1 Pz� precision Pz� recall; see appendix.) Supervised model selection, which uses a small annotated development set, performs almost as well as the oracle, but unsupervised model selection, which selects the model that maximizes likelihood on an unannotated development set, is often much worse.
3 Locality Bias among Trees. Hidden-variable estimation algorithms— including EM—typically work by iteratively manipulating the model parameters O to improve an objective function F(O). EM explicitly alternates between the computation of a posterior distribution over hypotheses, pp(y  |x) (where y is any tree with yield x), and computing a new parameter estimate O.3 with a locality bias at varying S. Each curve corresponds to a different language and shows performance of supervised model selection within a given S, across A and O1°) values. (See Table 3 for performance of models selected across Ss.) We decode with S = 0, though we found that keeping the training-time value of S would have had almost no effect. The EM baseline corresponds to S = 0. One way to bias a learner toward local explanations is to penalize longer attachments. This was done for supervised parsing in different ways by Collins (1997), Klein and Manning (2003), and McDonald et al. (2005), all of whom considered intervening material or coarse distance classes when predicting children in a tree. Eisner and Smith (2005) achieved speed and accuracy improvements by modeling distance directly in a ML-estimated (deficient) generative model. Here we use string distance to measure the length of a dependency link and consider the inclusion of a sum-of-lengths feature in the probabilistic model, for learning only. Keeping our original model, we will simply multiply into the probability of each tree another factor that penalizes long dependencies, giving: where y(i) = yleft(i) U yright(i). Note that if δ = 0, we have the original model. As δ —* −oc, the new model p' will favor parses with shorter dependencies. The dynamic programming algorithms remain the same as before, with the appropriate ea|i−j |factor multiplied in at each attachment between xi and xj. Note that when δ = 0, pe - pe. Experiment. We applied a locality bias to the same dependency model by setting δ to different we show performance with add-10 smoothing, the all-zero initializer, for three languages with three different initial values 6o. Time progresses from left to right. Note that it is generally best to start at 6o « 0; note also the importance of picking the right point on the curve to stop. See Table 3 for performance of models selected across smoothing, initialization, starting, and stopping choices, in all six languages. values in [−1, 0.2] (see Eq. 2). The same initializers Off0) and smoothing conditions were tested. Performance of supervised model selection among models trained at different δ values is plotted in Fig. 1. When a model is selected across all conditions (3 initializers x 6 smoothing values x 7 δs) using annotated development data, performance is notably better than the EM baseline using the same selection procedure (see Table 3, second column).
4 Structural Annealing. The central idea of this paper is to gradually change (anneal) the bias δ. Early in learning, local dependencies are emphasized by setting δ « 0. Then δ is iteratively increased and training repeated, using the last learned model to initialize. This idea bears a strong similarity to deterministic annealing (DA), a technique used in clustering and classification to smooth out objective functions that are piecewise constant (hence discontinuous) or bumpy (non-concave) (Rose, 1998; Ueda and Nakano, 1998). In unsupervised learning, DA iteratively re-estimates parameters like EM, but begins by requiring that the entropy of the posterior pp(y  |x) be maximal, then gradually relaxes this entropy constraint. Since entropy is concave in O, the initial task is easy (maximize a concave, continuous function). At each step the optimization task becomes more difficult, but the initializer is given by the previous step and, in practice, tends to be close to a good local maximum of the more difficult objective. By the last iteration the objective is the same as in EM, but the annealed search process has acted like a good initializer. This method was applied with some success to grammar induction models by Smith and Eisner (2004). In this work, instead of imposing constraints on the entropy of the model, we manipulate bias toward local hypotheses. As δ increases, we penalize long dependencies less. We call this structural annealing, since we are varying the strength of a soft constraint (bias) on structural hypotheses. In structural annealing, the final objective would be the same as EM if our final δ, δf = 0, but we found that annealing farther (δf > 0) works much better.4 Experiment: Annealing δ. We experimented with annealing schedules for δ. We initialized at δ0 E {−1, −0.4, −0.21, and increased δ by 0.1 (in the first case) or 0.05 (in the others) up to δf = 3. Models were trained to convergence at each δepoch. Model selection was applied over the same initialization and regularization conditions as before, δ0, and also over the choice of δf, with stopping allowed at any stage along the δ trajectory. Trajectories for three languages with three different δ0 values are plotted in Fig. 2. Generally speaking, δ0 « 0 performs better. There is consistently an early increase in performance as δ increases, but the stopping δf matters tremendously. Selected annealed-δ models surpass EM in all six languages; see the third column of Table 3. Note that structural annealing does not always outperform fixed-δ training (English and Portuguese). This is because we only tested a few values of δ0, since annealing requires longer runtime.
5 Structural Bias via Segmentation. A related way to focus on local structure early in learning is to broaden the set of hypotheses to include partial parse structures. If x = (x1, x2, ..., xn), the standard approach assumes that x corresponds to the vertices of a single dependency tree. Instead, we entertain every hypothesis in which x is a sequence of yields from separate, independently-generated trees. For example, (x1, x2, x3) is the yield of one tree, (x4, x5) is the with structural annealing on the breakage weight 3. Here we show performance with add-10 smoothing, the all-zero initializer, for three languages with three different initial values ,Qo. Time progresses from left (large ,Q) to right. See Table 3 for performance of models selected across smoothing, initialization, and stopping choices, in all six languages. yield of a second, and (x6, ..., xn) is the yield of a third. One extreme hypothesis is that x is n singlenode trees. At the other end of the spectrum is the original set of hypotheses—full trees on x. Each has a nonzero probability. Segmented analyses are intermediate representations that may be helpful for a learner to use to formulate notions of probable local structure, without committing to full trees.5 We only allow unobserved breaks, never positing a hard segmentation of the training sentences. Over time, we increase the bias against broken structures, forcing the learner to commit most of its probability mass to full trees. At first glance broadening the hypothesis space to entertain all 2n−1 possible segmentations may seem expensive. In fact the dynamic programming computation is almost the same as summing or maximizing over connected dependency trees. For the latter, we use an inside-outside algorithm that computes a score for every parse tree by computing the scores of items, or partial structures, through a bottom-up process. Smaller items are built first, then assembled using a set of rules defining how larger items can be built.6 Now note that any sequence of partial trees over x can be constructed by combining the same items into trees. The only difference is that we are willing to consider unassembled sequences of these partial trees as hypotheses, in addition to the fully connected trees. One way to accomplish this in terms of yright(0) is to say that the root, $, is allowed to have multiple children, instead of just one. Here, these children are independent of each other (e.g., generated by a unigram Markov model). In supervised dependency parsing, Eisner and Smith (2005) showed that imposing a hard constraint on the whole structure— specifically that each non-$ dependency arc cross fewer than k words—can give guaranteed O(nk2) runtime with little to no loss in accuracy (for simple models). This constraint could lead to highly contrived parse trees, or none at all, for some sentences—both are avoided by the allowance of segmentation into a sequence of trees (each attached to $). The construction of the “vine” (sequence of $’s children) takes only O(n) time once the chart has been assembled. Our broadened hypothesis model is a probabilistic vine grammar with a unigram model over $’s children. We allow (but do not require) segmentation of sentences, where each independent child of $ is the root of one of the segments. We do not impose any constraints on dependency length. Now the total probability of an n-length sentence x, marginalizing over its hidden structures, sums up not only over trees, but over segmentations of x. For completeness, we must include a probability model over the number of trees generated, which could be anywhere from 1 to n. The model over the number T of trees given a sentence of length n will take the following log-linear form: where Q E R is the sole parameter. When Q = 0, every value of T is equally likely. For Q « 0, the model prefers larger structures with few breaks. At the limit (Q —* −oc), we achieve the standard learning setting, where the model must explain x using a single tree. We start however at Q » 0, where the model prefers smaller trees with more breaks, in the limit preferring each word in x to be its own tree. We could describe “brokenness” as a feature in the model whose weight, Q, is chosen extrinsically (and time-dependently), rather than empirically—just as was done with S. Annealing β resembles the popular bootstrapping technique (Yarowsky, 1995), which starts out aiming for high precision, and gradually improves coverage over time. With strong bias (β » 0), we seek a model that maintains high dependency precision on (non-$) attachments by attaching most tags to $. Over time, as this is iteratively weakened (β -* −oo), we hope to improve coverage (dependency recall). Bootstrapping was applied to syntax learning by Steedman et al. (2003). Our approach differs in being able to remain partly agnostic about each tag’s true parent (e.g., by giving 50% probability to attaching to $), whereas Steedman et al. make a hard decision to retrain on a whole sentence fully or leave it out fully. In earlier work, Brill and Marcus (1992) adopted a “local first” iterative merge strategy for discovering phrase structure. Experiment: Annealing β. We experimented with different annealing schedules for β. The initial value of β, β0, was one of {−1 , 0, 2 }. After EM training, β was diminished by 10;this was repeated down to a value of βf = −3. Performance after training at each β value is shown in Fig. 3.7 We see that, typically, there is a sharp increase in performance somewhere during training, which typically lessens as β -* −oo. Starting β too high can also damage performance. This method, then, is not robust to the choice of λ, β0, or βf, nor does it always do as well as annealing δ, although considerable gains are possible; see the fifth column of Table 3. By testing models trained with afixed value of β (for values in [−1,1]), we ascertained that the performance improvement is due largely to annealing, not just the injection of segmentation bias (fourth vs. fifth column of Table 3).8
6 Comparison and Combination with Contrastive Estimation. Contrastive estimation (CE) was recently introduced (Smith and Eisner, 2005a) as a class of alternatives to the likelihood objective function locally maximized by EM. CE was found to outperform EM on the task of focus in this paper, when applied to English data (Smith and Eisner, 2005b). Here we review the method briefly, show how it performs across languages, and demonstrate that it can be combined effectively with structural bias. Contrastive training defines for each example xi a class of presumably poor, but similar, instances called the “neighborhood,” N(xi), and seeks to maximize At this point we switch to a log-linear (rather than stochastic) parameterization of the same weighted grammar, for ease of numerical optimization. All this means is that O (specifically, pstop and pchild in Eq. 1) is now a set of nonnegative weights rather than probabilities. Neighborhoods that can be expressed as finitestate lattices built from xi were shown to give significant improvements in dependency parser quality over EM. Performance of CE using two of those neighborhoods on the current model and datasets is shown in Table 2.9 0-mean diagonal Gaussian smoothing was applied, with different variances, and model selection was applied over smoothing conditions and the same initializers as before. Four of the languages have at least one effective CE condition, supporting our previous English results (Smith and Eisner, 2005b), but CE was harmful for Bulgarian and Mandarin. Perhaps better neighborhoods exist for these languages, or there is some ideal neighborhood that would perform well for all languages. Our approach of allowing broken trees (§5) is a natural extension of the CE framework. Contrastive estimation views learning as a process of moving posterior probability mass from (implicit) negative examples to (explicit) positive examples. The positive evidence, as in MLE, is taken to be the observed data. As originally proposed, CE allowed a redefinition of the implicit negative evidence from “all other sentences” (as in MLE) to “sentences like xi, but perturbed.” Allowing segmentation of the training sentences redefines the positive and negative evidence. Rather than moving probability mass only to full analyses of the training example xi, we also allow probability mass to go to partial analyses of xi. By injecting a bias (S 7� 0 or Q > −oc) among tree hypotheses, however, we have gone beyond the CE framework. We have added features to the tree model (dependency length-sum, number of breaks), whose weights we extrinsically manipulate over time to impose locality bias CN and improve search on CN. Another idea, not explored here, is to change the contents of the neighborhood N over time. Experiment: Locality Bias within CE. We combined CE with a fixed-S locality bias for neighborhoods that were successful in the earlier CE experiment, namely DELETEORTRANSPOSE1 for German, English, Turkish, and Portuguese. Our results, shown in the seventh column of Table 3, show that, in all cases except Turkish, the combination improves over either technique on its own. We leave exploration of structural annealing with CE to future work. Experiment: Segmentation Bias within CE. For (language, N) pairs where CE was effective, we trained models using CE with a fixedQ segmentation model. Across conditions (Q E [−1,1]), these models performed very badly, hypothesizing extremely local parse trees: typically over 90% of dependencies were length 1 and pointed in the same direction, compared with the 60–70% length-1 rate seen in gold standards. To understand why, consider that the CE goal is to maximize the score of a sentence and all its segmentations while minimizing the scores of neighborhood sentences and their segmentations. An ngram model can accomplish this, since the same n-grams are present in all segmentations of x, and (some) different n-grams appear in N(x) (for LENGTH and DELETEORTRANSPOSE1). A bigram-like model that favors monotone branching, then, is not a bad choice for a CE learner that must account for segmentations of x and N(x). Why doesn’t CE without segmentation resort to n-gram-like models? Inspection of models trained using the standard CE method (no segmentation) with transposition-based neighborhoods TRANSPOSE1 and DELETEORTRANSPOSE1 did have high rates of length-1 dependencies, while the poorly-performing DELETE1 models found low length-1 rates. This suggests that a bias toward locality (“n-gram-ness”) is built into the former neighborhoods, and may partly explain why CE works when it does. We achieved a similar locality bias in the likelihood framework when we broadened the hypothesis space, but doing so under CE over-focuses the model on local structures.
7 Error Analysis. We compared errors made by the selected EM condition with the best overall condition, for each language. We found that the number of corrected attachments always outnumbered the number of new errors by a factor of two or more. Further, the new models are not getting better by merely reversing the direction of links made by EM; undirected accuracy also improved significantly under a sign test (p < 10−6), across all six languages. While the most common corrections were to nouns, these account for only 25–41% of corrections, indicating that corrections are not “all of the same kind.” Finally, since more than half of corrections in every language involved reattachment to a noun or a verb (content word), we believe the improved models to be getting closer than EM to the deeper semantic relations between words that, ideally, syntactic models should uncover.
8 Future Work. One weakness of all recent weighted grammar induction work—including Klein and Manning (2004), Smith and Eisner (2005b), and the present paper—is a sensitivity to hyperparameters, including smoothing values, choice of N (for CE), and annealing schedules—not to mention initialization. This is quite observable in the results we have presented. An obstacle for unsupervised learning in general is the need for automatic, efficient methods for model selection. For annealing, inspiration may be drawn from continuation methods; see, e.g., Elidan and Friedman (2005). Ideally one would like to select values simultaneously for many hyperparameters, perhaps using a small annotated corpus (as done here), extrinsic figures of merit on successful learning trajectories, or plausibility criteria (Eisner and Karakos, 2005). Grammar induction serves as a tidy example for structural annealing. In future work, we envision that other kinds of structural bias and annealing will be useful in other difficult learning problems where hidden structure is required, including machine translation, where the structure can consist of word correspondences or phrasal or recursive syntax with correspondences. The technique bears some similarity to the estimation methods described by Brown et al. (1993), which started by estimating simple models, using each model to seed the next.
9 Conclusion. We have presented a new unsupervised parameter estimation method, structural annealing, for learning hidden structure that biases toward simplicity and gradually weakens (anneals) the bias over time. We applied the technique to weighted dependency grammar induction and achieved a significant gain in accuracy over EM and CE, raising the state-of-the-art across six languages from 42– 54% to 58–73% accuracy.