. Statistical machine translation is a relatively new approach to the long-standing problem of translating human languages by computer. Current statistical techniques uncover translation rules from bilingual training texts and use those rules to translate new texts. The general architecture is the source-channel model: an English string is statistically generated (source), then statistically transformed into French (channel). In order to translate (or &quot;decode&quot;) a French string, we look for the most likely English source. We show that for the simplest form of statistical models, this problem is NP-complete, i.e., probably exponential in the length of the observed sentence. We trace this complexity to factors not present in other decoding problems.
1.. Statistical models are widely used in attacking natural language problems. The sourcechannel framework is especially popular, finding applications in part-of-speech tagging, accent restoration, transliteration, speech recognition, and many other areas. In this framework, we build an underspecified model of how certain structures (such as strings) are generated and transformed. We then instantiate the model through training on a database of sample structures and transformations. Recently, Brown et al. (1993) built a source-channel model of translation between English and French. They assumed that English strings are produced according to some stochastic process (source model) and transformed stochastically into French strings (channel model). To translate French to English, it is necessary to find an English source string that is likely according to the models. With a nod to its cryptographic antecedents, this kind of translation is called decoding. This paper looks at decoding complexity.
2.. The prototype source-channel application in natural language is part-of-speech tagging (Church 1988). We review it here for purposes of comparison with machine translation. Source strings comprise sequences of part-of-speech tags like noun, verb, etc. A simple source model assigns a probability to a tag sequence ti tm based on the probabilities of the tag pairs inside it. Target strings are English sentences, e.g., w1 wm. The channel model assumes each tag is probabilistically replaced by a word (e.g., noun by dog) without considering context. More concretely, we have: We can assign parts-of-speech to a previously unseen word sequence w1 ... Win by finding the sequence ti ... 4, that maximizes P(ti ... tm I wi ... Wm). By Bayes' rule, we can equivalently maximize P(ti ... tm)•P(wi ... Wm' ti . . . G), which we can calculate directly from the b and s tables above. Three interesting complexity problems in the source-channel framework are: The first problem is solved in 0(m) time for part-of-speech tagging—we simply count tag pairs and word/tag pairs, then normalize. The second problem seems to require enumerating all 0(e) potential source sequences to find the best, but can actually be solved in 0(mv2) time with dynamic programming. We turn to the third problem in the context of another application: cryptanalysis.
3.. In a substitution cipher, a plaintext message like HELLO WORLD is transformed into a ciphertext message like EOPPX YXAPF via a fixed letter-substitution table. As with tagging, we can assume an alphabet of v source tokens, a bigram source model, a substitution channel model, and an m-token coded text. If the coded text is annotated with corresponding English, then building source and channel models is trivially 0(m). Comparing the situation to part-of-speech tagging: Then the problem becomes one of acquiring a channel model, i.e., a table s(f le) with an entry for each code-letter/plaintext-letter pair. Starting with an initially uniform table, we can use the estimation-maximization (EM) algorithm to iteratively revise s(f. le) so as to increase the probability of the observed corpus P(f). Figure 1 shows a naive EM implementation that runs in 0(mvin) time. There is an efficient 0(mv2) EM implementation based on dynamic programming that accomplishes the same thing. Once the s(f le) table has been learned, there is a similar 0(mv2) algorithm for optimal decoding. Such methods can break English letter-substitution ciphers of moderate size. Given coded text f of length m, a plaintext vocabulary of v tokens, and a source model b: A naive application of the EM algorithm to break a substitution cipher. It runs in 0(men) time.
4.. In our discussion of substitution ciphers, we were on relatively sure ground—the channel model we assumed in decoding is actually the same one used by the cipher writer for encoding. That is, we know that plaintext is converted to ciphertext, letter by letter, according to some table. We have no such clear conception about how English gets converted to French, although many theories exist. Brown et al. (1993) recently cast some simple theories into a source-channel framework, using the bilingual Canadian parliament proceedings as training data. We may assume: Bilingual texts seem to exhibit English words getting substituted with French ones, though not one-for-one and not without changing their order. These are important departures from the two applications discussed earlier. In the main channel model of Brown et al. (1993), each English word token e, in a source sentence is assigned a &quot;fertility&quot; 0„ which dictates how many French words it will produce. These assignments are made stochastically according to a table n(01 e). Then actual French words are produced according to s(f le) and permuted into new positions according to a distortion table d(j1i, m, I). Here, j and i are absolute target/source word positions within a sentence, and m and I are target/source sentence lengths. Inducing n, s, and d parameter estimates is easy if we are given annotations in the form of word alignments. An alignment is a set of connections between English and French words in a sentence pair. In Brown et al. (1993), alignments are asymmetric— each French word is connected to exactly one English word. Word-aligned data is usually not available, but large sets of unaligned bilingual sentence pairs do sometimes exist. A single sentence pair will have rn possible alignments—for each French word position 1 m, there is a choice of I English positions to connect to. A naive EM implementation will collect n, s, and d counts by considering each alignment, but this is expensive. (By contrast, part-of-speech tagging involves a single alignment, leading to 0(m) training). Lacking a polynomial reformulation, Brown et al. (1993) decided to collect counts only over a subset of likely alignments. To bootstrap, they required some initial idea of what alignments are reasonable, so they began with several iterations of a simpler channel model (called Model 1) that has nicer computational properties. In the following description of Model 1, we represent an alignment formally as a vector al, . . with values al ranging over English word positions 1 ... 1.. Model 1 Channel Parameters: c(m 1/) and s(f le). Given a source sentence e of length 1: Because the same e may produce the same f by means of many different alignments, we must sum over all of them to obtain P(fle): Figure 2 illustrates naive EM training for Model 1. If we compute P(fle) once per iteration, outside the &quot;for a&quot; loops, then the complexity is 0(m/m) per sentence pair, per iteration. More efficient 0(/m) training was devised by Brown et al. (1993). Instead of proWe next consider decoding. We seek a string e that maximizes P(e If), or equivalently maximizes P(e) • P(fle). A naive algorithm would evaluate all possible source strings, whose lengths are potentially unbounded. If we limit our search to strings at most twice the length m of our observed French, then we have a naive 0(m2v2m) method: Given a string f of length m We may now hope to find a way of reorganizing this computation, using tricks like the ones above. Unfortunately, we are unlikely to succeed, as we now show. For proof purposes, we define our optimization problem with an associated yes-no decision problem:
Definition: M1-OPTIMIZE. Given a string f of length m and a set of parameter tables (b, E, s), return a string e of length 1 < 2m that maximizes P(elf), or equivalently maximizes Given a string f of length m, a set of parameter tables (b, €, s), and a real number k, does there exist a string e of length / < 2m such that P(e) • P(fle) > k? We will leave the relationship between these two problems somewhat open and intuitive, noting only that M1-DECIDE's intractability does not bode well for MlOPTIMIZE. To show inclusion in NP, we need only nondeterministically choose e for any problem instance and verify that it has the requisite P(e) • P(fle) in 0(m2) time. Next we give separate polynomial-time reductions from two NP-complete problems. Each reduction highlights a different source of complexity. The Hamilton Circuit Problem asks: given a directed graph G with vertices labeled 0, , n, does G have a path that visits each vertex exactly once and returns to its starting point? We transform any Hamilton Circuit instance into an M1-DECIDE instance as follows. First, we create a French vocabulary fn, associating word fi with vertex i in the graph. We create a slightly larger English vocabulary eo, 'en, with eo serving as the &quot;boundary&quot; word for source model scoring. Ultimately, we will ask Ml-DECIDE to decode the string fi . fn. We create channel model tables as follows: These tables ensure that any decoding e of fi –ft, will contain the n words el, • • • , en (in some order). We now create a source model. For every pair (i,j) such that 0 < i,j < n: Finally, we set k to zero. To solve a Hamilton Circuit Problem, we transform it as above (in quadratic time), then invoke Ml-DECIDE with inputs b, e, s, k, and fi . • If M1-DECIDE returns yes, then there must be some string e with both P(e) and P(fle) nonzero. The channel model lets us conclude that if P(fle) is nonzero, then e contains the n words el, , en in some order. If P(e) is nonzero, then every bigram in e (including the two boundary bigrams involving eo) has nonzero probability. Because each English word in e corresponds to a unique vertex, we can use the order of words in e to produce an ordering of vertices in G. We append vertex 0 to the beginning and end of this list to produce a Hamilton Circuit. The source model construction guarantees an edge between each vertex and the next. If Ml-DECIDE returns no, then we know that every string e includes at least one zero value in the computation of either P(e) or P(fle). From any proposed Hamilton Circuit—i.e., some ordering of vertices in G—we can construct a string e using the same ordering. This e will have P(fle) = 1 according to the channel model. Therefore, P(e) = 0. By the source model, this can only happen if the proposed &quot;circuit&quot; is actually broken somewhere. So no Hamilton Circuit exists. Figure 3 illustrates the intuitive correspondence between selecting a good word order and finding a Hamilton Circuit. We note that Brew (1992) discusses the NPcompleteness of a related problem, that of finding some permutation of a string that is acceptable to a given context-free grammar. Both of these results deal with decision problems. Returning to optimization, we recall another circuit task called the Traveling Selecting a good source word order is like solving the Hamilton Circuit Problem. If we assume that the channel model offers deterministic, word-for-word translations, then the bigram source model takes responsibility for ordering them. Some word pairs in the source language may be illegal. In that case, finding a legal word ordering is like finding a complete circuit in a graph. (In the graph shown above, a sample circuit is boundary —> this year comma —> my —4 birthday falls —> on a Thursday —> boundary). If word pairs have probabilities attached to them, then word ordering resembles the finding the least-cost circuit, also known as the Traveling Salesman Problem. Salesman Problem. It introduces edge costs c111 and seeks a minimum-cost circuit. By viewing edge costs as log probabilities, we can cast the Traveling Salesman Problem as one of optimizing P(e), that is, of finding the best source word order in Model 1 decoding. 4.2 Reduction 2 (from Minimum Set Cover Problem) The Minimum Set Cover Problem asks: given a collection C of subsets of finite set S. and integer n, does C contain a cover for S of size < n, i.e., a subcollection whose union is S? We now transform any instance of Minimum Set Cover into an instance of M1-DECIDE, using polynomial time. This time, we assume a rather neutral source model in which all strings of a given length are equally likely, but we construct a more complex channel. We first create a source word e, for each subset in C, and let g, be the size of that subset. We create a table b(e,jej) with values set uniformly to the reciprocal of the source vocabulary size (i.e., the number of subsets in C). Assuming S has m elements, we next create target words ,fin corresponding to each of those elements, and set up channel model tables as follows: 1/g, if the element in S corresponding to j5 is also in the subset s(fi le,) = corresponding to e, Finally, we set k to zero. This completes the reduction. To solve an instance of Minimum Set Cover in polynomial time, we transform it as above, then call MlDECIDE with inputs b, E, s, k, and the words • • • n in any order. Selecting a concise set of source words is like solving the Minimum Set Cover Problem. A channel model with overlapping, one-to-many dictionary entries will typically license many decodings. The source model may prefer short decodings over long ones. Searching for a decoding of length < n is difficult, resembling the problem of covering a finite set with a small collection of subsets. In the example shown above, the smallest acceptable set of source words is {and, cooked, however, left, comma, period} . If M1-DECIDE returns yes, then some decoding e with P(e) • P(fle) > 0 must exist. We know that e must contain n or fewer words—otherwise P(fle) = 0 by the E table. Furthermore, the s table tells us that every word fi is covered by at least one English word in e. Through the one-to-one correspondence between elements of e and C, we produce a set cover of size < n for S. Likewise, if M1-DECIDE returns no, then all decodings have P(e) • P(fle) = 0. Because there are no zeroes in the source table b, every e has P(fle) = 0. Therefore either (1) the length of e exceeds n, or (2) some fi is left uncovered by the words in e. Because source words cover target words in exactly the same fashion as elements of C cover S, we conclude that there is no set cover of size < n for S. Figure 4 illustrates the intuitive correspondence between source word selection and minimum set covering.
5.. The two proofs point up separate factors in MT decoding complexity. One is wordorder selection. But even if any word order will do, there is still the problem of picking a concise decoding in the face of overlapping bilingual dictionary entries. The former is more closely tied to the source model, and the latter to the channel model, though the complexity arises from the interaction of the two. We should note that Model 1 is an intentionally simple translation model, one whose primary purpose in machine translation has been to allow bootstrapping into more complex translation models (e.g., IBM Models 2-5). It is easy to show that the intractability results also apply to stronger &quot;fertility/distortion&quot; models; we assign zero probability to fertilities other than 1, and we set up uniform distortion tables. Simple translation models like Model 1 find more direct use in other applications (e.g., lexicon construction, idiom detection, psychological norms, and cross-language information retrieval), so their computational properties are of wider interest. The proofs we presented are based on a worst-case analysis. Real s, e, and b tables may have properties that permit faster optimal decoding than the artificial tables constructed above. It is also possible to devise approximation algorithms like those devised for other NP-complete problems. To the extent that word ordering is like solving the Traveling Salesman Problem, it is encouraging substantial progress continues to be made on Traveling Salesman algorithms. For example, it is often possible to get within two percent of the optimal tour in practice, and some researchers have demonstrated an optimal tour of over 13,000 U.S. cities. (The latter experiment relied on things like distance symmetry and the triangle inequality constraint, however, which do not hold in word ordering.) So far, statistical translation research has either opted for heuristic beam-search algorithms or different channel models. For example, some researchers avoid bag generation by preprocessing bilingual texts to remove word-order differences, while others adopt channels that eliminate syntactically unlikely alignments. Finally, expensive decoding also suggests expensive training from unannotated (monolingual) texts, which presents a challenging bottleneck for extending statistical machine translation to language pairs and domains where large bilingual corpora do not exist.